<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>4张图带你读懂Spring-IoC的世界</title>
    <url>/2020/06/22/4%E5%BC%A0%E5%9B%BE%E5%B8%A6%E4%BD%A0%E8%AF%BB%E6%87%82Spring-IoC%E7%9A%84%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<h1 id="4张图带你读懂Spring-IoC的世界"><a href="#4张图带你读懂Spring-IoC的世界" class="headerlink" title="4张图带你读懂Spring-IoC的世界"></a>4张图带你读懂Spring-IoC的世界</h1><h2 id="1-Bean-的转换过程"><a href="#1-Bean-的转换过程" class="headerlink" title="1. Bean 的转换过程"></a>1. Bean 的转换过程</h2><p>下面这张图演示了一个可用的 bean 是如何从 xml 配置文件中演变过来的。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg12rvv7mtj318g0tljup.jpg" alt="img"></p>
<h2 id="2-ApplicationContext-的架构图"><a href="#2-ApplicationContext-的架构图" class="headerlink" title="2. ApplicationContext 的架构图"></a>2. ApplicationContext 的架构图</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg12s8ndumj31w80se0yy.jpg" alt="img"></p>
<h2 id="3-load-BeanDefinition-的全流程"><a href="#3-load-BeanDefinition-的全流程" class="headerlink" title="3. load BeanDefinition 的全流程"></a>3. load BeanDefinition 的全流程</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg12soffd0j30wb0u0adh.jpg" alt="img"></p>
<h2 id="4-get-Bean-的全流程"><a href="#4-get-Bean-的全流程" class="headerlink" title="4. get Bean 的全流程"></a>4. get Bean 的全流程</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg12t5ien9j30u03c8anv.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>spring源码解读</category>
      </categories>
      <tags>
        <tag>spring-ioc</tag>
      </tags>
  </entry>
  <entry>
    <title>AtomicInteger</title>
    <url>/2020/06/18/AtomicInteger/</url>
    <content><![CDATA[<h1 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a><strong>AtomicInteger</strong></h1><p>首先说明，此处 AtomicInteger ，一个提供原子操作的 Integer 的类，常见的还有AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference 等，他们的实现原理相同，区别在与运算对象类型的不同。令人兴奋地，还可以通过 AtomicReference<V>将一个对象的所有操作转化成原子操作。</p>
<p>我们知道，在多线程程序中，诸如++i 或 i++等运算不具有原子性，是不安全的线程操作之一。通常我们会使用 synchronized 将该操作变成一个原子操作，但 JVM 为此类操作特意提供了一些</p>
<p>同步类，使得使用更方便，且使程序运行效率变得更高。通过相关资料显示，通常AtomicInteger的性能是 ReentantLock 的好几倍。</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>ReadWriteLock读写锁</title>
    <url>/2020/06/18/ReadWriteLock%E8%AF%BB%E5%86%99%E9%94%81/</url>
    <content><![CDATA[<h1 id="ReadWriteLock读写锁"><a href="#ReadWriteLock读写锁" class="headerlink" title="ReadWriteLock读写锁"></a>ReadWriteLock读写锁</h1><p>为了提高性能，Java 提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的,在一定程度上提高了程序的执行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的，你只要上好相应的锁即可。</p>
<h2 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a><strong>读锁</strong></h2><p>如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁</p>
<h2 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a><strong>写锁</strong></h2><p>如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上读锁，写的时候上写锁！</p>
<p>Java 中 读 写 锁 有 个 接 口 java.util.concurrent.locks.ReadWriteLock ， 也 有 具 体 的 实 现ReentrantReadWriteLock。</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>ReentrantLock</title>
    <url>/2020/06/18/ReentrantLock/</url>
    <content><![CDATA[<h1 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a><strong>ReentrantLock</strong></h1><p>ReentantLock 继承接口 Lock 并实现了接口中定义的方法，他是一种可重入锁，除了能完成 synchronized 所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p>
<h2 id="Lock-接口的主要方法"><a href="#Lock-接口的主要方法" class="headerlink" title="Lock 接口的主要方法"></a><strong>Lock</strong> <strong>接口的主要方法</strong></h2><ol>
<li><p>void lock(): 执行此方法时, 如果锁处于空闲状态, 当前线程将获取到锁. 相反, 如果锁已经被其他线程持有, 将禁用当前线程, 直到当前线程获取到锁.</p>
</li>
<li><p>boolean tryLock()：如果锁可用, 则获取锁, 并立即返回 true, 否则返回 false. 该方法和lock()的区别在于, tryLock()只是”试图”获取锁, 如果锁不可用, 不会导致当前线程被禁用, 当前线程仍然继续往下执行代码. 而 lock()方法则是一定要获取到锁, 如果锁不可用, 就一直等待, 在未获得锁之前,当前线程并不继续向下执行. </p>
</li>
<li><p>void unlock()：执行此方法时, 当前线程将释放持有的锁. 锁只能由持有者释放, 如果线程并不持有锁, 却执行该方法, 可能导致异常的发生.</p>
</li>
<li><p>Condition newCondition()：条件对象，获取等待通知组件。该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的 await()方法，而调用后，当前线程将缩放锁。</p>
</li>
<li><p>getHoldCount() ：查询当前线程保持此锁的次数，也就是执行此线程执行 lock 方法的次数。</p>
</li>
<li><p>getQueueLength（）：返回正等待获取此锁的线程估计数，比如启动 10 个线程，1 个线程获得锁，此时返回的是 9</p>
</li>
<li><p>getWaitQueueLength：（Condition condition）返回等待与此锁相关的给定条件的线程估计数。比如 10 个线程，用同一个 condition 对象，并且此时这 10 个线程都执行了condition 对象的 await 方法，那么此时执行此方法返回 10</p>
</li>
<li><p>hasWaiters(Condition condition)：查询是否有线程等待与此锁有关的给定条件</p>
</li>
</ol>
<p>(condition)，对于指定 contidion 对象，有多少线程执行了 condition.await 方法</p>
<ol start="9">
<li><p>hasQueuedThread(Thread thread)：查询给定线程是否等待获取此锁</p>
</li>
<li><p>hasQueuedThreads()：是否有线程等待此锁</p>
</li>
<li><p>isFair()：该锁是否公平锁</p>
</li>
<li><p>isHeldByCurrentThread()： 当前线程是否保持锁锁定，线程的执行 lock 方法的前后分别是 false 和 true</p>
</li>
<li><p>isLock()：此锁是否有任意线程占用</p>
</li>
<li><p>lockInterruptibly（）：如果当前线程未被中断，获取锁</p>
</li>
<li><p>tryLock（）：尝试获得锁，仅在调用时锁未被线程占用，获得锁</p>
</li>
<li><p>tryLock(long timeout TimeUnit unit)：如果锁在给定等待时间内没有被另一个线程保持，则获取该锁。</p>
</li>
</ol>
<h2 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a><strong>非公平锁</strong></h2><p>JVM 按随机、就近原则分配锁的机制则称为不公平锁，ReentrantLock 在构造函数中提供了是否公平锁的初始化方式，默认为非公平锁。非公平锁实际执行的效率要远远超出公平锁，除非程序有特殊需要，否则最常用非公平锁的分配机制。</p>
<h2 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a><strong>公平锁</strong></h2><p>公平锁指的是锁的分配机制是公平的，通常先对锁提出获取请求的线程会先被分配到锁，ReentrantLock 在构造函数中提供了是否公平锁的初始化方式来定义公平锁。</p>
<h2 id="ReentrantLock-与-synchronized"><a href="#ReentrantLock-与-synchronized" class="headerlink" title="ReentrantLock 与 synchronized"></a><strong>ReentrantLock</strong> <strong>与</strong> <strong>synchronized</strong></h2><ol>
<li><p>ReentrantLock 通过方法 lock()与 unlock()来进行加锁与解锁操作，与 synchronized 会 被 JVM 自动解锁机制不同，ReentrantLock 加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用 ReentrantLock 必须在 finally 控制块中进行解锁操作。</p>
</li>
<li><p>ReentrantLock 相比 synchronized 的优势是可中断、公平锁、多个锁。这种情况下需要使用 ReentrantLock。</p>
</li>
</ol>
<h3 id="ReentrantLock-实现"><a href="#ReentrantLock-实现" class="headerlink" title="ReentrantLock 实现"></a><strong>ReentrantLock</strong> <strong>实现</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">//Lock lock=new ReentrantLock(true);//公平锁</span></span><br><span class="line"><span class="comment">//Lock lock=new ReentrantLock(false);//非公平锁</span></span><br><span class="line"><span class="keyword">private</span> Condition condition=lock.newCondition();<span class="comment">//创建 Condition</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();<span class="comment">//lock 加锁</span></span><br><span class="line"><span class="comment">//1：wait 方法等待：</span></span><br><span class="line"><span class="comment">//System.out.println("开始 wait");</span></span><br><span class="line">condition.await();</span><br><span class="line"><span class="comment">//通过创建 Condition 对象来使线程 wait，必须先执行 lock.lock 方法获得锁</span></span><br><span class="line"><span class="comment">//:2：signal 方法唤醒</span></span><br><span class="line">condition.signal();<span class="comment">//condition 对象的 signal 方法可以唤醒 wait 线程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"ThreadName="</span> + Thread.currentThread().getName()+ (<span class="string">" "</span> + (i + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line"><span class="number">121623125152125125</span></span><br><span class="line">&#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125; &#125; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Condition-类和-Object-类锁方法区别区别"><a href="#Condition-类和-Object-类锁方法区别区别" class="headerlink" title="Condition 类和 Object 类锁方法区别区别"></a><strong>Condition</strong> <strong>类和</strong> <strong>Object</strong> <strong>类锁方法区别区别</strong></h3><ol>
<li><p>Condition 类的 awiat 方法和 Object 类的 wait 方法等效</p>
</li>
<li><p>Condition 类的 signal 方法和 Object 类的 notify 方法等效</p>
</li>
<li><p>Condition 类的 signalAll 方法和 Object 类的 notifyAll 方法等效</p>
</li>
<li><p>ReentrantLock 类可以唤醒指定条件的线程，而 object 的唤醒是随机的</p>
</li>
</ol>
<h3 id="tryLock-和-lock-和-lockInterruptibly-的区别"><a href="#tryLock-和-lock-和-lockInterruptibly-的区别" class="headerlink" title="tryLock 和 lock 和 lockInterruptibly 的区别"></a><strong>tryLock</strong> <strong>和</strong> <strong>lock</strong> <strong>和</strong> <strong>lockInterruptibly</strong> <strong>的区别</strong></h3><ol>
<li><p>tryLock 能获得锁就返回 true，不能就立即返回 false，tryLock(long timeout,TimeUnit unit)，可以增加时间限制，如果超过该时间段还没获得锁，返回 false</p>
</li>
<li><p>lock 能获得锁就返回 true，不能的话一直等待获得锁</p>
</li>
<li><p>lock 和 lockInterruptibly，如果两个线程分别执行这两个方法，但此时中断这两个线程，lock 不会抛出异常，而 lockInterruptibly 会抛出异常。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Semaphore信号量</title>
    <url>/2020/06/18/Semaphore%E4%BF%A1%E5%8F%B7%E9%87%8F/</url>
    <content><![CDATA[<h1 id="Semaphore信号量"><a href="#Semaphore信号量" class="headerlink" title="Semaphore信号量"></a>Semaphore信号量</h1><p>Semaphore 是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore 可以用来构建一些对象池，资源池之类的，比如数据库连接池</p>
<p>实现互斥锁（计数器为 1）</p>
<p>我们也可以创建计数为 1 的 Semaphore，将其作为一种类似互斥锁的机制，这也叫二元信号量，表示两种互斥状态。</p>
<p><strong>代码实现</strong></p>
<p>它的用法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个计数阈值为 5 的信号量对象</span></span><br><span class="line"><span class="comment">// 只能 5 个线程同时访问</span></span><br><span class="line">Semaphore semp = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 申请许可</span></span><br><span class="line">semp.acquire();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 业务逻辑</span></span><br><span class="line"><span class="number">121623125152125125</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 释放许可</span></span><br><span class="line">semp.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Semaphore-与-ReentrantLock"><a href="#Semaphore-与-ReentrantLock" class="headerlink" title="Semaphore 与 ReentrantLock"></a><strong>Semaphore</strong> <strong>与</strong> <strong>ReentrantLock</strong></h2><p>Semaphore 基本能完成 ReentrantLock 的所有工作，使用方法也与之类似，通过 acquire()与release()方法来获得和释放临界资源。经实测，Semaphone.acquire()方法默认为可响应中断锁，与 ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()方法中断。</p>
<p>此外，Semaphore 也实现了可轮询的锁请求与定时锁的功能，除了方法名 tryAcquire 与 tryLock不同，其使用方法与 ReentrantLock 几乎一致。Semaphore 也提供了公平与非公平锁的机制，也可在构造函数中进行设定。</p>
<p>Semaphore 的锁释放操作也由手动进行，因此与 ReentrantLock 一样，为避免线程因抛出异常而无法正常释放锁的情况发生，释放锁的操作也必须在 finally 代码块中完成。</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Synchronized同步锁</title>
    <url>/2020/06/17/Synchronized%E5%90%8C%E6%AD%A5%E9%94%81/</url>
    <content><![CDATA[<h1 id="Synchronized同步锁"><a href="#Synchronized同步锁" class="headerlink" title="Synchronized同步锁"></a>Synchronized同步锁</h1><p>synchronized 它可以把任意一个非 NULL 的对象当作锁。他属于独占式的悲观锁，同时属于可重入锁。</p>
<h2 id="Synchronized-作用范围"><a href="#Synchronized-作用范围" class="headerlink" title="Synchronized 作用范围"></a><strong>Synchronized</strong> <strong>作用范围</strong></h2><ol>
<li><p>作用于方法时，锁住的是对象的实例(this)；</p>
</li>
<li><p>当作用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（jdk1.8 则是 metaspace），永久带是全局共享的，因此静态方法锁相当于类的一个全局锁，会锁所有调用该方法的线程；</p>
</li>
<li><p>synchronized 作用于一个对象实例时，锁住的是所有以该对象为锁的代码块。它有多个队列，当多个线程一起访问某个对象监视器的时候，对象监视器会将这些线程存储在不同的容器中。</p>
</li>
</ol>
<h2 id="Synchronized-核心组件"><a href="#Synchronized-核心组件" class="headerlink" title="Synchronized 核心组件"></a><strong>Synchronized</strong> <strong>核心组件</strong></h2><ol>
<li><p>Wait Set：哪些调用 wait 方法被阻塞的线程被放置在这里；</p>
</li>
<li><p>Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中；</p>
</li>
<li><p>Entry List：Contention List 中那些有资格成为候选资源的线程被移动到 Entry List 中；</p>
</li>
<li><p>OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为 OnDeck；</p>
</li>
<li><p>Owner：当前已经获取到所资源的线程被称为 Owner；</p>
</li>
<li><p>!Owner：当前释放锁的线程。</p>
</li>
</ol>
<h2 id="Synchronized-实现"><a href="#Synchronized-实现" class="headerlink" title="Synchronized 实现"></a><strong>Synchronized</strong> <strong>实现</strong></h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfwhot9cepj317s0jstod.jpg" alt="image-20200618154736405"></p>
<ol>
<li><p>JVM 每次从队列的尾部取出一个数据用于锁竞争候选者（OnDeck），但是并发情况下，ContentionList 会被大量的并发线程进行 CAS 访问，为了降低对尾部元素的竞争，JVM 会将一部分线程移动到 EntryList 中作为候选竞争线程。</p>
</li>
<li><p>Owner 线程会在 unlock 时，将 ContentionList 中的部分线程迁移到 EntryList 中，并指定EntryList 中的某个线程为 OnDeck 线程（一般是最先进去的那个线程）。</p>
</li>
<li><p>Owner 线程并不直接把锁传递给 OnDeck 线程，而是把锁竞争的权利交给 OnDeck，OnDeck 需要重新竞争锁。这样虽然牺牲了一些公平性，但是能极大的提升系统的吞吐量，在JVM 中，也把这种选择行为称之为“竞争切换”。</p>
</li>
<li><p>OnDeck 线程获取到锁资源后会变为 Owner 线程，而没有得到锁资源的仍然停留在 EntryList中。如果 Owner 线程被 wait 方法阻塞，则转移到 WaitSet 队列中，直到某个时刻通过 notify或者 notifyAll 唤醒，会重新进去 EntryList 中。</p>
</li>
<li><p>处于 ContentionList、EntryList、WaitSet 中的线程都处于阻塞状态，该阻塞是由操作系统来完成的（Linux 内核下采用 pthread_mutex_lock 内核函数实现的）。</p>
</li>
<li><p>Synchronized 是非公平锁。 Synchronized 在线程进入 ContentionList 时，等待的线程会先尝试自旋获取锁，如果获取不到就进入 ContentionList，这明显对于已经进入队列的线程是不公平的，还有一个不公平的事情就是自旋获取锁的线程还可能直接抢占 OnDeck 线程的锁资源。参考：<a href="https://blog.csdn.net/zqz_zqz/article/details/70233767" target="_blank" rel="noopener">https://blog.csdn.net/zqz_zqz/article/details/70233767</a></p>
</li>
<li><p>每个对象都有个 monitor 对象，加锁就是在竞争 monitor 对象，代码块加锁是在前后分别加上 monitorenter 和 monitorexit 指令来实现的，方法加锁是通过一个标记位来判断的</p>
</li>
<li><p>synchronized 是一个重量级操作，需要调用操作系统相关接口，性能是低效的，有可能给线程加锁消耗的时间比有用操作消耗的时间更多。</p>
</li>
<li><p>Java1.6，synchronized 进行了很多的优化，有适应自旋、锁消除、锁粗化、轻量级锁及偏向锁等，效率有了本质上的提高。在之后推出的 Java1.7 与 1.8 中，均对该关键字的实现机理做了优化。引入了偏向锁和轻量级锁。都是在对象头中有标记位，不需要经过操作系统加锁。</p>
</li>
<li><p>锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。这种升级过程叫做锁膨胀；</p>
</li>
<li><p>JDK 1.6 中默认是开启偏向锁和轻量级锁，可以通过-XX:-UseBiasedLocking 来禁用偏向锁。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis体系结构与工作原理</title>
    <url>/2020/06/23/mybatis%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="mybatis体系结构与工作原理"><a href="#mybatis体系结构与工作原理" class="headerlink" title="mybatis体系结构与工作原理"></a>mybatis体系结构与工作原理</h1><h2 id="MyBatis-的工作流程分析"><a href="#MyBatis-的工作流程分析" class="headerlink" title="MyBatis 的工作流程分析"></a>MyBatis 的工作流程分析</h2><p>首先在 MyBatis 启动的时候我们要去解析配置文件，包括全局配置文件和映射器配置文件，这里面包含了我们怎么控制 MyBatis 的行为，和我们要对数据库下达的指令，也就是我们的 SQL 信息。我们会把它们解析成一个 Configuration 对象。</p>
<p>接下来就是我们操作数据库的接口，它在应用程序和数据库中间，代表我们跟数据库之间的一次连接:这个就是 SqlSession 对象。</p>
<p>我们要获得一个会话，必须有一个会话工厂 SqlSessionFactory。</p>
<p>SqlSessionFactory 里面又必须包含我们的所有的配置信息，所以我们会通过一个 Builder 来创建工厂类。</p>
<p>我们知道，MyBatis 是对 JDBC 的封装，也就是意味着底层一定会出现 JDBC 的一 些核心对象，比如执行 SQL 的 Statement，结果集 ResultSet。在 Mybatis 里面， SqlSession 只是提供给应用的一个接口，还不是 SQL 的真正的执行对象。</p>
<p>我们上次课提到了，SqlSession 持有了一个 Executor 对象，用来封装对数据库的操作。</p>
<p>在执行器 Executor 执行 query 或者 update 操作的时候我们创建一系列的对象， 来处理参数、执行 SQL、处理结果集，这里我们把它简化成一个对象:StatementHandler， 在阅读源码的时候我们再去了解还有什么其他的对象。</p>
<p>这个就是 MyBatis 主要的工作流程，如图:</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2ixaym3zj30pk0n4js3.jpg" alt="mybatis主要工作流程"></p>
<h2 id="MyBatis-架构分层与模块划分"><a href="#MyBatis-架构分层与模块划分" class="headerlink" title="MyBatis 架构分层与模块划分"></a><strong>MyBatis</strong> 架构分层与模块划分</h2><p>在 MyBatis 的主要工作流程里面，不同的功能是由很多不同的类协作完成的，它们 分布在 MyBatis jar 包的不同的 package 里面。</p>
<p>我们来看一下 MyBatis 的 jar 包(基于 3.5.1)，</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2j43crszj30h40sw0v3.jpg" alt="image-20200623211022205"></p>
<p>大概有 300 多个类，这样看起来不够清楚，不知道什么类在什么环节工作，属于什 么层次。</p>
<p>跟 Spring 一样，MyBatis 按照功能职责的不同，所有的 package 可以分成不同的 工作层次。</p>
<p>我们可以把 MyBatis 的工作流程类比成餐厅的服务流程。</p>
<p>第一个是跟客户打交道的服务员，它是用来接收程序的工作指令的，我们把它叫做 接口层。</p>
<p>第二个是后台的厨师，他们根据客户的点菜单，把原材料加工成成品，然后传到窗 口。这一层是真正去操作数据的，我们把它叫做核心层。</p>
<p>最后就是餐厅也需要有人做后勤(比如清洁、采购、财务)，来支持厨师的工作和 整个餐厅的运营。我们把它叫做基础层。</p>
<p>来看一下这张图，我们根据刚才的分层，和大体的执行流程，做了这么一个总结。 当然，从不同的角度来描述，架构图的划分有所区别，这张图画起来也有很多形式。我们先从总体上建立一个印象。每一层的主要对象和主要的功能我们也给大家分析一下。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2j5ihscyj31g40u0tlv.jpg" alt="image-20200623211140973"></p>
<h3 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h3><p>首先接口层是我们打交道最多的。核心对象是 SqlSession，它是上层应用和 MyBatis 打交道的桥梁，SqlSession 上定义了非常多的对数据库的操作方法。接口层在接收到调 用请求的时候，会调用核心处理层的相应模块来完成具体的数据库操作。</p>
<h3 id="核心处理层"><a href="#核心处理层" class="headerlink" title="核心处理层"></a>核心处理层</h3><p>接下来是核心处理层。既然叫核心处理层，也就是跟数据库操作相关的动作都是在 这一层完成的。</p>
<p>核心处理层主要做了这几件事:</p>
<ol>
<li><p>把接口中传入的参数解析并且映射成JDBC类型;</p>
</li>
<li><p>解析xml文件中的SQL语句，包括插入参数，和动态SQL的生成; </p>
</li>
<li><p>执行SQL语句;</p>
</li>
<li><p>处理结果集，并映射成Java对象。</p>
</li>
</ol>
<p>插件也属于核心层，这是由它的工作方式和拦截的对象决定的。</p>
<h3 id="基础支持层"><a href="#基础支持层" class="headerlink" title="基础支持层"></a>基础支持层</h3><p>最后一个就是基础支持层。基础支持层主要是一些抽取出来的通用的功能(实现复 用)，用来支持核心处理层的功能。比如数据源、缓存、日志、xml 解析、反射、IO、 事务等等这些功能。</p>
<p>这个就是 MyBatis 的主要工作流程和架构分层。接下来我们来学习一下基础层里面 的一个主要模块，缓存。我们一起来了解一下 MyBatis 一级缓存和二级缓存的区别，和 它们的工作方式，以及使用过程里面有什么注意事项。</p>
<h2 id="MyBatis-缓存详解"><a href="#MyBatis-缓存详解" class="headerlink" title="MyBatis 缓存详解"></a><strong>MyBatis</strong> 缓存详解</h2><h3 id="cache-缓存"><a href="#cache-缓存" class="headerlink" title="cache 缓存"></a>cache 缓存</h3><p>(基于 mybatis-standalone 工程)</p>
<p>缓存是一般的 ORM 框架都会提供的功能，目的就是提升查询的效率和减少数据库的 压力。跟 Hibernate 一样，MyBatis 也有一级缓存和二级缓存，并且预留了集成第三方 缓存的接口。</p>
<h4 id="缓存体系结构"><a href="#缓存体系结构" class="headerlink" title="缓存体系结构"></a>缓存体系结构</h4><p>MyBatis 跟缓存相关的类都在 cache 包里面，其中有一个 Cache 接口，只有一个默 认的实现类 PerpetualCache，它是用 HashMap 实现的。</p>
<p>除此之外，还有很多的装饰器，通过这些装饰器可以额外实现很多的功能:回收策略、日志记录、定时刷新等等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 煎饼加鸡蛋加香肠</span></span><br><span class="line">“装饰者模式(Decorator Pattern)是指在不改变原有对象的基础之上，将功能附加到对象上，提供了比继承更有弹性的替代方案(扩展原有对象的功能)。”</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2jdqym38j30vk0bg79s.jpg" alt="image-20200623211938385"></p>
<p>但是无论怎么装饰，经过多少层装饰，最后使用的还是基本的实现类(默认 PerpetualCache)。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2jfldpvjj30x60fo4bf.jpg" alt="image-20200623212124898"></p>
<p>所有的缓存实现类总体上可分为三类:基本缓存、淘汰算法缓存、装饰器缓存。</p>
<table>
<thead>
<tr>
<th>缓存实现类</th>
<th>描述</th>
<th>作用</th>
<th>装饰条件</th>
</tr>
</thead>
<tbody><tr>
<td>基本缓存</td>
<td>缓存基本实现类</td>
<td>默认是 PerpetualCache，也可以自定义比如 RedisCache、EhCache 等，具备基本功能的缓存类</td>
<td>无</td>
</tr>
<tr>
<td>LruCache</td>
<td>LRU 策略的缓存</td>
<td>当缓存到达上限时候，删除最近最少使用的缓存 (Least Recently Use)</td>
<td>eviction=”LRU”(默 认)</td>
</tr>
<tr>
<td>FifoCache</td>
<td>FIFO 策略的缓存</td>
<td>当缓存到达上限时候，删除最先入队的缓存</td>
<td>eviction=”FIFO”</td>
</tr>
<tr>
<td>SoftCache WeakCache</td>
<td>带清理策略的缓存</td>
<td>通过 JVM 的软引用和弱引用来实现缓存，当 JVM 内存不足时，会自动清理掉这些缓存，基于 SoftReference 和 WeakReference</td>
<td>eviction=”SOFT” eviction=”WEAK”</td>
</tr>
<tr>
<td>LoggingCache</td>
<td>带日志功能的缓存</td>
<td>比如:输出缓存命中率</td>
<td>基本</td>
</tr>
<tr>
<td>SynchronizedCache</td>
<td>同步缓存</td>
<td>基于 synchronized 关键字实现，解决并发问题</td>
<td>基本</td>
</tr>
<tr>
<td>BlockingCache</td>
<td>阻塞缓存</td>
<td>通过在 get/put 方式中加锁，保证只有一个线程操 作缓存，基于 Java 重入锁实现</td>
<td>blocking=true</td>
</tr>
<tr>
<td>SerializedCache</td>
<td>支持序列化的缓存</td>
<td>将对象序列化以后存到缓存中，取出时反序列化</td>
<td>readOnly=false(默 认)</td>
</tr>
<tr>
<td>ScheduledCache</td>
<td>定时调度的缓存</td>
<td>在进行 get/put/remove/getSize 等操作前，判断 缓存时间是否超过了设置的最长缓存时间(默认是 一小时)，如果是则清空缓存–即每隔一段时间清 空一次缓存</td>
<td>flushInterval 不为 空</td>
</tr>
<tr>
<td>TransactionalCache</td>
<td>事务缓存</td>
<td>在二级缓存中使用，可一次存入多个缓存，移除多 个缓存</td>
<td>在 TransactionalCach eManager 中用 Map 维护对应关系</td>
</tr>
</tbody></table>
<p>思考:缓存对象在什么时候创建?什么情况下被装饰?</p>
<p>我们要弄清楚这个问题，就必须要知道 MyBatis 的一级缓存和二级缓存的工作位置 和工作方式的区别。</p>
<h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><h5 id="一级缓存-本地缓存-介绍"><a href="#一级缓存-本地缓存-介绍" class="headerlink" title="一级缓存(本地缓存)介绍"></a>一级缓存(本地缓存)介绍</h5><p>一级缓存也叫本地缓存，MyBatis 的一级缓存是在会话(SqlSession)层面进行缓 存的。MyBatis 的一级缓存是默认开启的，不需要任何的配置。</p>
<p>首先我们必须去弄清楚一个问题，在 MyBatis 执行的流程里面，涉及到这么多的对 象，那么缓存 PerpetualCache 应该放在哪个对象里面去维护?如果要在同一个会话里面 共享一级缓存，这个对象肯定是在 SqlSession 里面创建的，作为 SqlSession 的一个属 性。</p>
<p>DefaultSqlSession 里面只有两个属性，Configuration 是全局的，所以缓存只可能 放在 Executor 里面维护——SimpleExecutor/ReuseExecutor/BatchExecutor 的父类BaseExecutor 的构造函数中持有了 PerpetualCache。</p>
<p>在同一个会话里面，多次执行相同的 SQL 语句，会直接从内存取到缓存的结果，不会再发送 SQL 到数据库。但是不同的会话里面，即使执行的 SQL 一模一样(通过一个 Mapper 的同一个方法的相同参数调用)，也不能使用到一级缓存。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2k3bek4xj31580iywio.jpg" alt="image-20200623214412856"></p>
<p>接下来我们来验证一下，MyBatis 的一级缓存到底是不是只能在一个会话里面共享， 以及跨会话(不同 session)操作相同的数据会产生什么问题。</p>
<h5 id="一级缓存验证"><a href="#一级缓存验证" class="headerlink" title="一级缓存验证"></a>一级缓存验证</h5><p>(基于 mybatis-standalone 工程，注意演示一级缓存需要先关闭二级缓存， localCacheScope 设置为 SESSION)</p>
<p>判断是否命中缓存:如果再次发送 SQL 到数据库执行，说明没有命中缓存;如果直 接打印对象，说明是从内存缓存中取到了结果。</p>
<p>1、在同一个 session 中共享</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">System.out.println(mapper.selectBlog(<span class="number">1</span>)); </span><br><span class="line">System.out.println(mapper.selectBlog(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>2、不同 session 不能共享</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session1 = sqlSessionFactory.openSession(); </span><br><span class="line">BlogMapper mapper1 = session1.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">System.out.println(mapper.selectBlog(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>PS:一级缓存在 BaseExecutor 的 query()——queryFromDatabase()中存入。在 queryFromDatabase()之前会 get()。</p>
<p>3、同一个会话中，update(包括 delete)会导致一级缓存被清空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapper.updateByPrimaryKey(blog); </span><br><span class="line">session.commit();</span><br><span class="line">System.out.println(mapper.selectBlogById(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>一级缓存是在 BaseExecutor 中的 update()方法中调用 clearLocalCache()清空的 (无条件)，query 中会判断。</p>
<p>如果跨会话，会出现什么问题?</p>
<p>4、其他会话更新了数据，导致读取到脏数据(一级缓存不能跨会话共享)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 会话 2 更新了数据，会话 2 的一级缓存更新</span></span><br><span class="line">BlogMapper mapper2 = session2.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">mapper2.updateByPrimaryKey(blog);</span><br><span class="line">session2.commit();</span><br><span class="line"><span class="comment">// 会话 1 读取到脏数据，因为一级缓存不能跨会话共享</span></span><br><span class="line">System.out.println(mapper1.selectBlog(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<h5 id="一级缓存的不足"><a href="#一级缓存的不足" class="headerlink" title="一级缓存的不足"></a>一级缓存的不足</h5><p>使用一级缓存的时候，因为缓存不能跨会话共享，不同的会话之间对于相同的数据 可能有不一样的缓存。在有多个会话或者分布式环境下，会存在脏数据的问题。如果要 解决这个问题，就要用到二级缓存。</p>
<p>【思考】一级缓存怎么命中?CacheKey 怎么构成?</p>
<p>【思考】一级缓存是默认开启的，怎么关闭一级缓存?</p>
<h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><h5 id="二级缓存介绍"><a href="#二级缓存介绍" class="headerlink" title="二级缓存介绍"></a>二级缓存介绍</h5><p>二级缓存是用来解决一级缓存不能跨会话共享的问题的，范围是 namespace 级别 的，可以被多个 SqlSession 共享(只要是同一个接口里面的相同方法，都可以共享)， 生命周期和应用同步。</p>
<p>思考一个问题:如果开启了二级缓存，二级缓存应该是工作在一级缓存之前，还是 在一级缓存之后呢?二级缓存是在哪里维护的呢?</p>
<p>作为一个作用范围更广的缓存，它肯定是在 SqlSession 的外层，否则不可能被多个 SqlSession 共享。而一级缓存是在 SqlSession 内部的，所以第一个问题，肯定是工作 在一级缓存之前，也就是只有取不到二级缓存的情况下才到一个会话中去取一级缓存。</p>
<p>第二个问题，二级缓存放在哪个对象中维护呢? 要跨会话共享的话，SqlSession 本 身和它里面的 BaseExecutor 已经满足不了需求了，那我们应该在 BaseExecutor 之外创 建一个对象。</p>
<p>实际上 MyBatis 用了一个装饰器的类来维护，就是 CachingExecutor。如果启用了 二级缓存，MyBatis 在创建 Executor 对象的时候会对 Executor 进行装饰。</p>
<p>CachingExecutor 对于查询请求，会判断二级缓存是否有缓存结果，如果有就直接 返回，如果没有委派交给真正的查询器 Executor 实现类，比如 SimpleExecutor 来执行 查询，再走到一级缓存的流程。最后会把结果缓存起来，并且返回给用户。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2kw0qa4rj31eu0qg199.jpg" alt="image-20200623221148435"></p>
<p>一级缓存是默认开启的，那二级缓存怎么开启呢?</p>
<h5 id="开启二级缓存的方法"><a href="#开启二级缓存的方法" class="headerlink" title="开启二级缓存的方法"></a>开启二级缓存的方法</h5><p>第一步:在 mybatis-config.xml 中配置了(可以不配置，默认是 true)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>只要没有显式地设置 cacheEnabled=false，都会用 CachingExecutor 装饰基本的执行器。</p>
<p>第二步:在 Mapper.xml 中配置&lt;cache/&gt;标签:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明这个 namespace 使用二级缓存 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.apache.ibatis.cache.impl.PerpetualCache"</span> </span></span><br><span class="line">       size="1024" &lt;!—最多缓存对象个数，默认 1024--&gt; </span><br><span class="line">			 eviction="LRU" <span class="tag">&lt;<span class="name">!—回收策略--</span>&gt;</span> </span><br><span class="line">			 flushInterval="120000" <span class="tag">&lt;<span class="name">!—自动刷新时间</span> <span class="attr">ms</span>，未配置时只有调用时刷新<span class="attr">--</span>&gt;</span> </span><br><span class="line">			 readOnly="false"/&gt; <span class="tag">&lt;<span class="name">!—默认是</span> <span class="attr">false</span>（安全），改为 <span class="attr">true</span> 可读写时，对象必须支持序列 化 <span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>cache 属性详解:</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>缓存实现类</td>
<td>需要实现 Cache 接口，默认是 PerpetualCache</td>
</tr>
<tr>
<td>size</td>
<td>最多缓存对象个数</td>
<td>默认 1024</td>
</tr>
<tr>
<td>eviction</td>
<td>回收策略(缓存淘汰算法)</td>
<td>LRU – 最近最少使用的:移除最长时间不被使用的对象(默认)。<br/>FIFO – 先进先出:按对象进入缓存的顺序来移除它们。<br/> SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。<br/> WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。</td>
</tr>
<tr>
<td>flushInterval</td>
<td>定时自动清空缓存间隔</td>
<td>自动刷新时间，单位 ms，未配置时只有调用时刷新</td>
</tr>
<tr>
<td>readOnly</td>
<td>是否只读</td>
<td>true:只读缓存;会给所有调用者返回缓存对象的相同实例。因此这些对象 不能被修改。这提供了很重要的性能优势。<br/>false:读写缓存;会返回缓存对象的拷贝(通过序列化)，不会共享。这 会慢一些，但是安全，因此默认是 false。<br/>改为 false 可读写时，对象必须支持序列化。</td>
</tr>
<tr>
<td>blocking</td>
<td>是否使用可重入锁实现 缓存的并发控制</td>
<td>true，会使用 BlockingCache 对 Cache 进行装饰 默认 false</td>
</tr>
</tbody></table>
<p>Mapper.xml 配置了&lt;cache&gt;之后，select()会被缓存。update()、delete()、insert() 会刷新缓存。</p>
<p>思考:如果 cacheEnabled=true，Mapper.xml 没有配置标签，还有二级缓存吗? 还会出现 CachingExecutor 包装对象吗?</p>
<p>只要 cacheEnabled=true 基本执行器就会被装饰。有没有配置&lt;cache&gt;，决定了在启动的时候会不会创建这个 mapper 的 Cache 对象，最终会影响到 CachingExecutor</p>
<p>query 方法里面的判断:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Cache cache = ms.getCache();</span><br><span class="line">  <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">    flushCacheIfRequired(ms);</span><br><span class="line">    <span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">      ensureNoOutParams(ms, boundSql);</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">      <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">        list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">        tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果某些查询方法对数据的实时性要求很高，不需要二级缓存，怎么办? 我们可以在单个 Statement ID 上显式关闭二级缓存(默认是 true):</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlog"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">useCache</span>=<span class="string">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>了解了二级缓存的工作位置和开启关闭的方法之后，我们也来验证一下二级缓存。 </p>
<h5 id="二级缓存验证"><a href="#二级缓存验证" class="headerlink" title="二级缓存验证"></a><strong>二级缓存验证</strong></h5><p>（验证二级缓存需要先开启二级缓存）</p>
<p>1、 事务不提交，二级缓存不存在 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BlogMapper mapper1 = session1.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">System.out.println(mapper1.selectBlogById(<span class="number">1</span>)); </span><br><span class="line"><span class="comment">// 事务不提交的情况下，二级缓存不会写入 </span></span><br><span class="line"><span class="comment">// session1.commit(); </span></span><br><span class="line">BlogMapper mapper2 = session2.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">System.out.println(mapper2.selectBlogById(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>思考：为什么事务不提交，二级缓存不生效？</p>
<p>因为二级缓存使用 TransactionalCacheManager（TCM）来管理，最后又调用了 </p>
<p>TransactionalCache 的getObject()、putObject和 commit()方法，TransactionalCache 里面又持有了真正的 Cache 对象，比如是经过层层装饰的 PerpetualCache。 </p>
<p>在 putObject 的时候，只是添加到了 entriesToAddOnCommit 里面，只有它的 commit()方法被调用的时候才会调用 flushPendingEntries()真正写入缓存。它就是在 DefaultSqlSession 调用 commit()的时候被调用的。</p>
<p>2、 使用不同的 session 和 mapper，验证二级缓存可以跨 session 存在取消以上 commit()的注释 </p>
<p>3、 在其他的 session 中执行增删改操作，验证缓存会被刷新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Blog blog = <span class="keyword">new</span> Blog(); </span><br><span class="line">blog.setBid(<span class="number">1</span>); </span><br><span class="line">blog.setName(<span class="string">"357"</span>); </span><br><span class="line">mapper3.updateByPrimaryKey(blog); </span><br><span class="line">session3.commit(); </span><br><span class="line"><span class="comment">// 执行了更新操作，二级缓存失效，再次发送 SQL 查询 </span></span><br><span class="line">System.out.println(mapper2.selectBlogById(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>思考：为什么增删改操作会清空缓存？ </p>
<p>在 CachingExecutor 的 update()方法里面会调用 flushCacheIfRequired(ms)，isFlushCacheRequired 就是从标签里面渠道的 flushCache 的值。而增删改操作的 flushCache 属性默认为 true。 </p>
<h5 id="什么时候开启二级缓存？"><a href="#什么时候开启二级缓存？" class="headerlink" title="什么时候开启二级缓存？"></a><strong>什么时候开启二级缓存？</strong></h5><p>一级缓存默认是打开的，二级缓存需要配置才可以开启。那么我们必须思考一个问题，在什么情况下才有必要去开启二级缓存？ </p>
<p>1、因为所有的增删改都会刷新二级缓存，导致二级缓存失效，所以适合在查询为主的应用中使用，比如历史交易、历史订单的查询。否则缓存就失去了意义。 </p>
<p>2、如果多个 namespace 中有针对于同一个表的操作，比如 Blog 表，如果在一个namespace 中刷新了缓存，另一个 namespace 中没有刷新，就会出现读到脏数据的情 况。所以，推荐在一个 Mapper 里面只操作单表的情况使用。 </p>
<p>思考：如果要让多个 namespace 共享一个二级缓存，应该怎么做？ 跨 namespace 的缓存共享的问题，可以使用&lt;cache-ref&gt;来解决： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache-ref</span> <span class="attr">namespace</span>=<span class="string">"com.gupaoedu.crud.dao.DepartmentMapper"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>cache-ref 代表引用别的命名空间的 Cache 配置，两个命名空间的操作使用的是同一个 Cache。在关联的表比较少，或者按照业务可以对表进行分组的时候可以使用。 </p>
<p>注意：在这种情况下，多个 Mapper 的操作都会引起缓存刷新，缓存的意义已经不大了。 </p>
<h5 id="第三方缓存做二级缓存"><a href="#第三方缓存做二级缓存" class="headerlink" title="第三方缓存做二级缓存"></a><strong>第三方缓存做二级缓存</strong></h5><p>除了 MyBatis 自带的二级缓存之外，我们也可以通过实现 Cache 接口来自定义二级缓存。</p>
<p>MyBatis 官方提供了一些第三方缓存集成方式，比如 ehcache 和 redis： </p>
<p><a href="https://github.com/mybatis/redis-cache" target="_blank" rel="noopener">https://github.com/mybatis/redis-cache</a> </p>
<p>pom 文件引入依赖： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-beta2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Mapper.xml 配置，type 使用 RedisCache：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.redis.RedisCache"</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span> <span class="attr">flushInterval</span>=<span class="string">"60000"</span> <span class="attr">size</span>=<span class="string">"512"</span> <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>redis.properties 配置： </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">host</span>=<span class="string">localhost </span></span><br><span class="line"><span class="attr">port</span>=<span class="string">6379 </span></span><br><span class="line"><span class="attr">connectionTimeout</span>=<span class="string">5000 </span></span><br><span class="line"><span class="attr">soTimeout</span>=<span class="string">5000 database=0</span></span><br></pre></td></tr></table></figure>

<p>Redis 作为二级缓存的验证： </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2mdnianvj313k0i2n74.jpg" alt="image-20200623230224583"></p>
<p>当然，我们也可以使用独立的缓存服务，不使用 MyBatis 自带的二级缓存。</p>
]]></content>
      <categories>
        <category>mybatis源码解读</category>
      </categories>
      <tags>
        <tag>mybatis应用</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis应用分析与最佳实践</title>
    <url>/2020/06/22/mybatis%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="mybatis应用分析与最佳实践"><a href="#mybatis应用分析与最佳实践" class="headerlink" title="mybatis应用分析与最佳实践"></a>mybatis应用分析与最佳实践</h1><h2 id="1-为什么要用-MyBatis"><a href="#1-为什么要用-MyBatis" class="headerlink" title="1.为什么要用 MyBatis"></a>1.为什么要用 MyBatis</h2><h3 id="JDBC-连接数据库"><a href="#JDBC-连接数据库" class="headerlink" title="JDBC 连接数据库"></a>JDBC 连接数据库</h3><p>在 Java 程序里面去连接数据库，最原始的办法是使用 JDBC 的 API。我们先来回顾 一下使用 JDBC 的方式，我们是怎么操作数据库的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册 JDBC 驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">// 打开连接</span></span><br><span class="line">conn = DriverManager.getConnection(DB_URL, USER, PASSWORD);</span><br><span class="line"><span class="comment">// 执行查询</span></span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line">String sql= <span class="string">"SELECT bid, name, author_id FROM blog"</span>; ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"><span class="comment">// 获取结果集</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> bid = rs.getInt(<span class="string">"bid"</span>);</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">String authorId = rs.getString(<span class="string">"author_id"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>我们在 maven 中引入 MySQL 驱动的依赖(JDBC 的包在 java.sql 中)。</p>
</li>
<li><p>注册驱动，第二步，通过 DriverManager 获取一个 Connection，参数里 面填数据库地址，用户名和密码。</p>
</li>
<li><p>我们通过 Connection 创建一个 Statement 对象。</p>
</li>
<li><p>通过 Statement 的 execute()方法执行 SQL。当然 Statement 上面定义了 非常多的方法。execute()方法返回一个 ResultSet 对象，我们把它叫做结果集。</p>
</li>
<li><p>我们通过 ResultSet 获取数据。转换成一个 POJO 对象。</p>
</li>
<li><p>我们要关闭数据库相关的资源，包括 ResultSet、Statement、Connection， 它们的关闭顺序和打开的顺序正好是相反的。</p>
</li>
</ol>
<p>这个就是我们通过 JDBC 的 API 去操作数据库的方法，这个仅仅是一个查询。如果 我们项目当中的业务比较复杂，表非常多，各种操作数据库的增删改查的方法也比较多 的话，那么这样代码会重复出现很多次。</p>
<p>在每一段这样的代码里面，我们都需要自己去管理数据库的连接资源，如果忘记写 close()了，就可能会造成数据库服务连接耗尽。</p>
<p>另外还有一个问题就是处理业务逻辑和处理数据的代码是耦合在一起的。如果业务 流程复杂，跟数据库的交互次数多，耦合在代码里面的 SQL 语句就会非常多。如果要修改业务逻辑，或者修改数据库环境(因为不同的数据库 SQL 语法略有不同)，这个工作 量是也是难以估计的。</p>
<p>还有就是对于结果集的处理，我们要把 ResultSet 转换成 POJO 的时候，必须根据 字段属性的类型一个个地去处理，写这样的代码是非常枯燥的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> bid = rs.getInt(<span class="string">"bid"</span>);</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">String authorId = rs.getString(<span class="string">"author_id"</span>); blog.setAuthorId(authorId); blog.setBid(bid);</span><br><span class="line">blog.setName(name);</span><br></pre></td></tr></table></figure>

<p>也正是因为这样，我们在实际工作中是比较少直接使用 JDBC 的。那么我们在 Java 程序里面有哪些更加简单的操作数据库的方式呢?</p>
<h3 id="Apache-DbUtils"><a href="#Apache-DbUtils" class="headerlink" title="Apache DbUtils"></a>Apache DbUtils</h3><p><a href="https://commons.apache.org/proper/commons-dbutils/" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-dbutils/</a></p>
<p>DbUtils 解决的最核心的问题就是结果集的映射，可以把 ResultSet 封装成 JavaBean。它是怎么做的呢?</p>
<p>首先 DbUtils 提供了一个 QueryRunner 类，它对数据库的增删改查的方法进行了封 装，那么我们操作数据库就可以直接使用它提供的方法。</p>
<p>在 QueryRunner 的构造函数里面，我们又可以传入一个数据源，比如在这里我们 Hikari，这样我们就不需要再去写各种创建和释放连接的代码了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryRunner = <span class="keyword">new</span> QueryRunner(dataSource);</span><br></pre></td></tr></table></figure>

<p>那我们怎么把结果集转换成对象呢?比如实体类 Bean 或者 List 或者 Map?在DbUtils 里面提供了一系列的支持泛型的 ResultSetHandler。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg1fdwe62gj30dk0jgn63.jpg" alt="image-20200622221548876"></p>
<p>我们只要在 DAO 层调用 QueryRunner 的查询方法，传入这个 Handler，它就可以 自动把结果集转换成实体类 Bean 或者 List 或者 Map。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"select * from blog"</span>;</span><br><span class="line">List&lt;BlogDto&gt; list = queryRunner.query(sql, <span class="keyword">new</span> BeanListHandler&lt;&gt;(BlogDto<span class="class">.<span class="keyword">class</span>))</span>;</span><br></pre></td></tr></table></figure>

<p>没有用过 DbUtils 的同学，可以思考一下通过结果集到实体类的映射是怎么实现的? 也就是说，我只传了一个实体类的类型，它怎么知道这个类型有哪些属性，每个属性是 什么类型?然后创建这个对象并且给这些字段赋值的?答案正是反射。</p>
<p>大家也可以去看一下源码映证一下是不是这样。</p>
<p>问题:输出的结果中，authorId 为什么是空的?DbUtils 要求数据库的字段跟对象 的属性名称完全一致，才可以实现自动映射。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BlogDto&#123;bid=<span class="number">3</span>, name=<span class="string">'MyBatis 源码分析'</span>, authorId=<span class="string">'null'</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h3><p>除了 DbUtils 之外，Spring 也对原生的 JDBC 进行了封装，并且给我们提供了一个 模板方法 JdbcTemplate，来简化我们对数据库的操作。</p>
<p>第一个，我们不再需要去关心资源管理的问题。<br>第二个，对于结果集的处理，Spring JDBC 也提供了一个 RowMapper 接口，可以把结果集转换成 Java 对象。<br>看代码:比如我们要把结果集转换成 Employee 对象，就可以针对一个 Employee</p>
<p>创建一个 RowMapper 对象，实现 RowMapper 接口，并且重写 mapRow()方法。我们 在 mapRow()方法里面完成对结果集的处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span> </span>&#123; </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123; </span><br><span class="line">    Employee employee = <span class="keyword">new</span> Employee(); </span><br><span class="line">    employee.setEmpId(resultSet.getInt(<span class="string">"emp_id"</span>));</span><br><span class="line">    employee.setEmpName(resultSet.getString(<span class="string">"emp_name"</span>)); </span><br><span class="line">    employee.setEmail(resultSet.getString(<span class="string">"emial"</span>));</span><br><span class="line">    <span class="keyword">return</span> employee;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 DAO 层调用的时候就可以传入自定义的 RowMapper 类，最终返回我们需要的 类型。结果集和实体类类型的映射也是自动完成的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">query</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">  <span class="keyword">new</span> JdbcTemplate( <span class="keyword">new</span> DruidDataSource());</span><br><span class="line">  <span class="keyword">return</span> jdbcTemplate.query(sql,<span class="keyword">new</span> EmployeeRowMapper());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这种方式，我们对于结果集的处理只需要写一次代码，然后在每一个需要映射 的地方传入这个 RowMapper 就可以了，减少了很多的重复代码。</p>
<p>但是还是有问题:每一个实体类对象，都需要定义一个 Mapper，然后要编写每个 字段映射的 getString()、getInt 这样的代码，还增加了类的数量。</p>
<p>所以有没有办法让一行数据的字段，跟实体类的属性自动对应起来，实现自动映射 呢?当然，我们肯定要解决两个问题，一个就是名称对应的问题，从下划线到驼峰命名;</p>
<p>第二个是类型对应的问题，数据库的 JDBC 类型和 Java 对象的类型要匹配起来。 我们可以创建一个 BaseRowMapper<T>，通过反射的方式自动获取所有属性，把</p>
<p>表字段全部赋值到属性。 上面的方法就可以改成:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> jdbcTemplate.query(sql,<span class="keyword">new</span> BaseRowMapper(Employee<span class="class">.<span class="keyword">class</span>))</span>;</span><br></pre></td></tr></table></figure>

<p>这样，我们在使用的时候只要传入我们需要转换的类型就可以了，不用再单独创建一个 RowMapper。</p>
<p>我们来总结一下，DbUtils 和 Spring JDBC，这两个对 JDBC 做了轻量级封装的框架， 或者说工具类里面，都帮助我们解决了一些问题:</p>
<ol>
<li><p>无论是 QueryRunner 还是 JdbcTemplate，都可以传入一个数据源进行初始 化，也就是资源管理这一部分的事情，可以交给专门的数据源组件去做，不用 我们手动创建和关闭;</p>
</li>
<li><p>对操作数据的增删改查的方法进行了封装;</p>
</li>
<li><p>可以帮助我们映射结果集，无论是映射成 List、Map 还是实体类。 </p>
</li>
</ol>
<p>但是还是存在一些缺点:</p>
<ol>
<li><p>SQL 语句都是写死在代码里面的，依旧存在硬编码的问题;</p>
</li>
<li><p>参数只能按固定位置的顺序传入(数组)，它是通过占位符去替换的，</p>
<p>不能自动映射;</p>
</li>
<li><p>在方法里面，可以把结果集映射成实体类，但是不能直接把实体类映射</p>
<p>成数据库的记录(没有自动生成 SQL 的功能);</p>
</li>
<li><p>查询没有缓存的功能。</p>
</li>
</ol>
<h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><p>要解决这些问题，使用这些工具类还是不够的，要用到我们今天讲的 ORM 框架。 那什么是 ORM?为什么叫 ORM?<br> ORM 的全拼是 Object Relational Mapping，也就是对象与关系的映射，对象是程</p>
<p>序里面的对象，关系是它与数据库里面的数据的关系。也就是说，ORM 框架帮助我们解 决的问题是程序对象和关系型数据库的相互映射的问题。</p>
<p>O:对象——M:映射——R:关系型数据库</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg1fjxgwguj31180gon33.jpg" alt="image-20200622222135430"></p>
<p>今天听课的同学应该有很多同学是用过 Hibernate 或者现在还在用的。Hibernate 是一个很流行的 ORM 框架，2001 年的时候就出了第一个版本。在使用 Hibernate 的时 候，我们需要为实体类建立一些 hbm 的 xml 映射文件(或者类似于@Table 的这样的注 解)。例如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"cn.gupaoedu.vo.User"</span> <span class="attr">table</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cellphone"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后通过 Hibernate 提供(session)的增删改查的方法来操作对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(); </span><br><span class="line">user.setPassword(<span class="string">"123456"</span>); </span><br><span class="line">user.setCellphone(<span class="string">"18166669999"</span>); </span><br><span class="line">user.setUsername(<span class="string">"qingshan"</span>);</span><br><span class="line"><span class="comment">//获取加载配置管理类</span></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(); </span><br><span class="line"><span class="comment">//不给参数就默认加载 hibernate.cfg.xml 文件， </span></span><br><span class="line">configuration.configure();</span><br><span class="line"><span class="comment">//创建 Session 工厂对象</span></span><br><span class="line">SessionFactory factory = configuration.buildSessionFactory(); </span><br><span class="line"><span class="comment">//得到 Session 对象</span></span><br><span class="line">Session session = factory.openSession();</span><br><span class="line"><span class="comment">//使用 Hibernate 操作数据库，都要开启事务,得到事务对象</span></span><br><span class="line">Transaction transaction = session.getTransaction();</span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">transaction.begin();</span><br><span class="line"><span class="comment">//把对象添加到数据库中</span></span><br><span class="line">session.save(user);</span><br><span class="line"><span class="comment">//提交事务 </span></span><br><span class="line">transaction.commit();</span><br><span class="line"><span class="comment">//关闭 </span></span><br><span class="line">Session session.close();</span><br></pre></td></tr></table></figure>

<p>我们操作对象就跟操作数据库的数据一样。Hibernate 的框架会自动帮我们生成 SQL 语句(可以屏蔽数据库的差异)，自动进行映射。这样我们的代码变得简洁了，程序的 可读性也提高了。</p>
<p>但是 Hibernate 在业务复杂的项目中使用也存在一些问题:</p>
<ol>
<li><p>比如使用 get()、save() 、update()对象的这种方式，实际操作的是所有字段，没有办法指定部分字段，换句话说就是不够灵活。</p>
</li>
<li><p>这种自动生成 SQL 的方式，如果我们要去做一些优化的话，是非常困难的，也就是说可能会出现性能比较差的问题。</p>
</li>
<li><p>不支持动态 SQL(比如分表中的表名变化，以及条件、参数)。</p>
</li>
</ol>
<h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><p>“半自动化”的 ORM 框架 MyBatis 就解决了这几个问题。“半自动化”是相对于 Hibernate 的全自动化来说的，也就是说它的封装程度没有 Hibernate 那么高，不会自 动生成全部的 SQL 语句，主要解决的是 SQL 和对象的映射问题。</p>
<p>在 MyBatis 里面，SQL 和代码是分离的，所以会写 SQL 基本上就会用 MyBatis，没有额外的学习成本。</p>
<p>我们来总结一下，MyBatis 的核心特性，或者说它解决的主要问题是什么:</p>
<ol>
<li>使用连接池对连接进行管理</li>
<li>SQL 和代码分离，集中管理</li>
<li>结果集映射</li>
<li>参数映射和动态 SQL</li>
<li>重复 SQL 的提取</li>
<li>缓存管理</li>
<li>插件机制</li>
</ol>
<p>当然，需要明白的是，Hibernate 和 MyBatis 跟 DbUtils、Spring JDBC 一样，都是对 JDBC 的一个封装，我们去看源码，最后一定会看到 Statement 和 ResultSet 这些 对象。</p>
<p>问题来了，我们有这么多的工具和不同的框架，在实际的项目里面应该怎么选择? 在一些业务比较简单的项目中，我们可以使用 Hibernate;<br>如果需要更加灵活的 SQL，可以使用 MyBatis，对于底层的编码，或者性能要求非常高的场合，可以用 JDBC。<br>实际上在我们的项目中，MyBatis 和 Spring JDBC 是可以混合使用的。 当然，我们也根据项目的需求自己写 ORM 框架，就像之前 Tom 老师跟大家讲的手写 ORM 框架一样。</p>
<h2 id="2-MyBatis-实际使用案例"><a href="#2-MyBatis-实际使用案例" class="headerlink" title="2.MyBatis 实际使用案例"></a>2.MyBatis 实际使用案例</h2><h3 id="编程式使用"><a href="#编程式使用" class="headerlink" title="编程式使用"></a>编程式使用</h3><p>大部分时候，我们都是在 Spring 里面去集成 MyBatis。因为 Spring 对 MyBatis 的 一些操作进行的封装，我们不能直接看到它的本质，所以先看下不使用容器的时候，也 就是编程的方式，MyBatis 怎么使用。</p>
<p>先引入 mybatis jar 包。</p>
<p>首先我们要创建一个全局配置文件，这里面是对 MyBatis 的核心行为的控制，比如 mybatis-config.xml。</p>
<p>第二个就是我们的映射器文件，Mapper.xml，通常来说一张表对应一个，我们会在 这个里面配置我们增删改查的 SQL 语句，以及参数和返回的结果集的映射关系。</p>
<p>跟 JDBC 的代码一样，我们要执行对数据库的操作，必须创建一个会话，这个在 MyBatis 里面就是 SqlSession。SqlSession 又是工厂类根据全局配置文件创建的。所以 整个的流程就是这样的(如下代码)。最后我们通过 SqlSession 接口上的方法，传入我 们的 Statement ID 来执行 SQL。这是第一种方式。</p>
<p>这种方式有一个明显的缺点，就是会对 Statement ID 硬编码，而且不能在编译时进 行类型检查，所以通常我们会使用第二种方式，就是定义一个 Mapper 接口的方式。这 个接口全路径必须跟 Mapper.xml 里面的 namespace 对应起来，方法也要跟 Statement ID 一一对应。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMapper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">  InputStream inputStream = Resources.getResourceAsStream(resource); </span><br><span class="line">  SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">  SqlSession session = sqlSessionFactory.openSession(); </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">    Blog blog = mapper.selectBlogById(<span class="number">1</span>); </span><br><span class="line">    System.out.println(blog);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">    session.close();</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个就是我们单独使用 MyBatis 的全部流程。 这个案例非常重要，后面我们讲源码还是基于它。</p>
<h3 id="核心对象的生命周期"><a href="#核心对象的生命周期" class="headerlink" title="核心对象的生命周期"></a>核心对象的生命周期</h3><p>在编程式使用的这个 demo 里面，我们看到了 MyBatis 里面的几个核心对象: SqlSessionFactoryBuiler、SqlSessionFactory、SqlSession 和 Mapper 对象。这几个 核心对象在 MyBatis 的整个工作流程里面的不同环节发挥作用。如果说我们不用容器，自己去管理这些对象的话，我们必须思考一个问题:什么时候创建和销毁这些对象? 在一些分布式的应用里面，多线程高并发的场景中，如果要写出高效的代码，必须</p>
<p>了解这四个对象的生命周期。这四个对象的声明周期的描述在官网上面也可以找到。 <a href="http://www.mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/getting-started.html</a> 我们从每个对象的作用的角度来理解一下，只有理解了它们是干什么的，才知道什么时候应该创建，什么时候应该销毁。</p>
<p><strong>1)SqlSessionFactoryBuiler</strong></p>
<p>首先是 SqlSessionFactoryBuiler。它是用来构建 SqlSessionFactory 的，而 SqlSessionFactory 只需要一个，所以只要构建了这一个 SqlSessionFactory，它的使命 就完成了，也就没有存在的意义了。所以它的生命周期只存在于方法的局部。</p>
<p><strong>2)SqlSessionFactory</strong></p>
<p>SqlSessionFactory 是用来创建 SqlSession 的，每次应用程序访问数据库，都需要 创建一个会话。因为我们一直有创建会话的需要，所以 SqlSessionFactory 应该存在于 应用的整个生命周期中(作用域是应用作用域)。创建 SqlSession 只需要一个实例来做 这件事就行了，否则会产生很多的混乱，和浪费资源。所以我们要采用单例模式。</p>
<p><strong>3)SqlSession</strong></p>
<p>SqlSession 是一个会话，因为它不是线程安全的，不能在线程间共享。所以我们在 请求开始的时候创建一个 SqlSession 对象，在请求结束或者说方法执行完毕的时候要及时关闭它(一次请求或者操作中)。</p>
<p><strong>4)Mapper</strong></p>
<p>Mapper(实际上是一个代理对象)是从 SqlSession 中获取的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>它的作用是发送 SQL 来操作数据库的数据。它应该在一个 SqlSession 事务方法之内。</p>
<p>最后总结如下:</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>生命周期</th>
</tr>
</thead>
<tbody><tr>
<td>SqlSessionFactoryBuiler</td>
<td>方法局部(method)</td>
</tr>
<tr>
<td>SqlSessionFactory(单例)</td>
<td>应用级别(application)</td>
</tr>
<tr>
<td>SqlSession</td>
<td>请求和操作(request/method)</td>
</tr>
<tr>
<td>Mapper</td>
<td>方法(method)</td>
</tr>
</tbody></table>
<p>这个就是我们在编程式的使用里面看到的四个对象的生命周期的总结。</p>
<h3 id="核心配置解读"><a href="#核心配置解读" class="headerlink" title="核心配置解读"></a>核心配置解读</h3><p>第一个是 config 文件。大部分时候我们只需要很少的配置就可以让 MyBatis 运行起 来。其实 MyBatis 里面提供的配置项非常多，我们没有配置的时候使用的是系统的默认值。</p>
<h4 id="一级标签"><a href="#一级标签" class="headerlink" title="一级标签"></a>一级标签</h4><h5 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h5><p>configuration 是整个配置文件的根标签，实际上也对应着 MyBatis 里面最重要的 配置类 Configuration。它贯穿 MyBatis 执行流程的每一个环节。我们打开这个类看一 下，这里面有很多的属性，跟其他的子标签也能对应上。</p>
<p>注意:MyBatis 全局配置文件顺序是固定的，否则启动的时候会报错。 (一级标签要求全部掌握)</p>
<h5 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h5><p>第一个是 properties 标签，用来配置参数信息，比如最常见的数据库连接信息。</p>
<p>为了避免直接把参数写死在 xml 配置文件中，我们可以把这些参数单独放在 properties 文件中，用 properties 标签引入进来，然后在 xml 配置文件中用${}引用就 可以了。</p>
<p>可以用 resource 引用应用里面的相对路径，也可以用 url 指定本地服务器或者网络 的绝对路径。</p>
<p>我们为什么要把这些配置独立出来?有什么好处?或者说，公司的项目在打包的时 候，有没有把 properties 文件打包进去?</p>
<ol>
<li>提取，利于多处引用，维护简单;</li>
<li>把配置文件放在外部，避免修改后重新编译打包，只需要重启应用;</li>
<li>程序和配置分离，提升数据的安全性，比如生产环境的密码只有运维人员掌握。</li>
</ol>
<h5 id="setttings"><a href="#setttings" class="headerlink" title="setttings"></a>setttings</h5><p>setttings 里面是 MyBatis 的一些核心配置，我们最后再看，先看下其他的以及标签。</p>
<h5 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h5><p>TypeAlias 是类型的别名，跟 Linux 系统里面的 alias 一样，主要用来简化全路径类 名的拼写。比如我们的参数类型和返回值类型都可能会用到我们的 Bean，如果每个地方 都配置全路径的话，那么内容就比较多，还可能会写错。</p>
<p>我们可以为自己的 Bean 创建别名，既可以指定单个类，也可以指定一个 package， 自动转换。配置了别名以后，只需要写别名就可以了，比如 com.gupaoedu.domain.Blog 都只要写 blog 就可以了。</p>
<p>MyBatis 里面有系统预先定义好的类型别名，在 TypeAliasRegistry 中。</p>
<h5 id="typeHandlers【重点】"><a href="#typeHandlers【重点】" class="headerlink" title="typeHandlers【重点】"></a>typeHandlers【重点】</h5><p>由于 Java 类型和数据库的 JDBC 类型不是一一对应的(比如 String 与 varchar)， 所以我们把 Java 对象转换为数据库的值，和把数据库的值转换成 Java 对象，需要经过 一定的转换，这两个方向的转换就要用到 TypeHandler。</p>
<p>有的同学可能会有疑问，我没有做任何的配置，为什么实体类对象里面的一个 String 属性，可以保存成数据库里面的 varchar 字段，或者保存成 char 字段?</p>
<p>这是因为 MyBatis 已经内置了很多 TypeHandler(在 type 包下)，它们全部全部 注册在 TypeHandlerRegistry 中，他们都继承了抽象类 BaseTypeHandler，泛型就是要处理的 Java 数据类型。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg1g0h43jkj30eu0d4jza.jpg" alt="image-20200622223731401"></p>
<p>当我们做数据类型转换的时候，就会自动调用对应的 TypeHandler 的方法。</p>
<p>如果我们需要自定义一些类型转换规则，或者要在处理类型的时候做一些特殊的动 作，就可以编写自己的 TypeHandler，跟系统自定义的 TypeHandler 一样，继承抽象类 BaseTypeHandler&lt;T&gt;。有 4 个抽象方法必须实现，我们把它分成两类:</p>
<p>set 方法从 Java 类型转换成 JDBC 类型的，get 方法是从 JDBC 类型转换成 Java 类 型的。</p>
<table>
<thead>
<tr>
<th>从 Java 类型到 JDBC 类型</th>
<th>从 JDBC 类型到 Java 类型</th>
</tr>
</thead>
<tbody><tr>
<td>setNonNullParameter:设置非空参数</td>
<td>getNullableResult:获取空结果集(根据列名)，一般都是调用这个 getNullableResult:获取空结果集(根据下标值) getNullableResult:存储过程用的</td>
</tr>
</tbody></table>
<p>比如我们想要在获取或者设置 String 类型的时候做一些特殊处理，我们可以写一个 String 类型的 TypeHandler(mybatis-standalone 工程)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 设置 String 类型的参数的时候调用，Java 类型到 JDBC 类型</span></span><br><span class="line">    System.out.println(<span class="string">"---------------setNonNullParameter1:"</span>+parameter);</span><br><span class="line">    ps.setString(i, parameter); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 根据列名获取 String 类型的参数的时候调用，JDBC 类型到 java 类型</span></span><br><span class="line">    System.out.println(<span class="string">"---------------getNullableResult1:"</span>+columnName);</span><br><span class="line">    <span class="keyword">return</span> rs.getString(columnName); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二步，在 mybatis-config.xml 文件中注册:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"com.gupaoedu.type.MyTypeHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第三步，在我们需要使用的字段上指定，比如:插入值的时候，从 Java 类型到 JDBC 类型，在字段属性中指定 typehandler:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span> = <span class="string">"insertBlog"</span> <span class="attr">parameterType</span> = <span class="string">"com.gupaoedu.domain.Blog"</span>&gt;</span> </span><br><span class="line">  insert into blog (bid, name, author_id)</span><br><span class="line">  values (#&#123;bid,jdbcType=INTEGER&#125;,</span><br><span class="line">  #&#123;name,jdbcType=VARCHAR,typeHandler=com.gupaoedu.type.MyTypeHandler&#125;, #&#123;authorId,jdbcType=INTEGER&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>返回值的时候，从 JDBC 类型到 Java 类型，在 resultMap 的列上指定 typehandler:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">typeHandler</span>=<span class="string">"com.gupaoedu.type.MyTypeHandler"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>【思考，不强制要求完成】 </p>
<p>如果我们的对象里面有复杂对象，比如 Blog 里面包括了一个 Comment 对象，这个时候 Comment 对象的全部属性不能直接映射到数据库的一个字段。 </p>
<p>要求：创建一个 TypeHandler，可以将任意的对象转换为 json 字符串，保存到数据库的 VARCHAR 类型中。在从数据库查询的时候，再转换为原来的 Java 对象。 </p>
<ol>
<li><p>在数据库表添加一个 VARCHAR 字段； </p>
</li>
<li><p>在 Blog 对象中添加一个 Comment 属性，字段 Integer id;String content； </p>
</li>
<li><p>JSON 工具没有要求，jackson 或者 fastjson、gson 都可以。 </p>
</li>
<li><p>在查询和插入的 statement 上使用这个 TypeHandler。 </p>
</li>
</ol>
<h5 id="objectFactory【重点】"><a href="#objectFactory【重点】" class="headerlink" title="objectFactory【重点】"></a><strong>objectFactory【重点】</strong></h5><p>当我们把数据库返回的结果集转换为实体类的时候，需要创建对象的实例，由于我们不知道需要处理的类型是什么，有哪些属性，所以不能用 new 的方式去创建。在MyBatis 里面，它提供了一个工厂类的接口，叫做 ObjectFactory，专门用来创建对象的 实例，里面定义了 4 个方法。 </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg1geydofhj30s0078dmk.jpg" alt="image-20200622225125122"></p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>void</strong> setProperties(Properties properties);</td>
<td>设置参数时调用</td>
</tr>
<tr>
<td>&lt;T&gt; T create(Class&lt;T&gt; type);</td>
<td>创建对象（调用无参构造函数）</td>
</tr>
<tr>
<td>&lt;T&gt; T create(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs);</td>
<td>创建对象（调用带参数构造函数）</td>
</tr>
<tr>
<td>&lt;T&gt; <strong>boolean</strong> isCollection(Class&lt;T&gt; type)</td>
<td>判断是否集合</td>
</tr>
</tbody></table>
<p>ObjectFactory 有一个默认的实现类 DefaultObjectFactory，创建对象的方法最终都调用了 instantiateClass()，是通过反射来实现的。 </p>
<p>如果想要修改对象工厂在初始化实体类的时候的行为，就可以通过创建自己的对象 工厂，继承 DefaultObjectFactory 来实现（不需要再实现 ObjectFactory 接口）。 </p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GPObjectFactory</span> <span class="keyword">extends</span> <span class="title">DefaultObjectFactory</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(Class type)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (type.equals(Blog<span class="class">.<span class="keyword">class</span>)) </span>&#123; </span><br><span class="line">      Blog blog = (Blog) <span class="keyword">super</span>.create(type); </span><br><span class="line">      blog.setName(<span class="string">"by object factory"</span>); </span><br><span class="line">      blog.setBid(<span class="number">1111</span>); </span><br><span class="line">      blog.setAuthorId(<span class="number">2222</span>); </span><br><span class="line">      <span class="keyword">return</span> blog; </span><br><span class="line">    &#125;</span><br><span class="line">    Object result = <span class="keyword">super</span>.create(type); </span><br><span class="line">    <span class="keyword">return</span> result; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以直接用自定义的工厂类来创建对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectFactoryTest</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    GPObjectFactory factory = <span class="keyword">new</span> GPObjectFactory(); </span><br><span class="line">    Blog myBlog = (Blog) factory.create(Blog<span class="class">.<span class="keyword">class</span>)</span>; </span><br><span class="line">    System.out.println(myBlog); &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样我们就直接拿到了一个对象。 </p>
<p>如果在 config 文件里面注册，在创建对象的时候会被自动调用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">"org.mybatis.example.GPObjectFactory"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 对象工厂注入的参数 --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gupao"</span> <span class="attr">value</span>=<span class="string">"666"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样，就可以让 MyBatis 的创建实体类的时候使用我们自己的对象工厂。 </p>
<p>应用场景举例： </p>
<p>比如有一个新锐手机品牌在一个电商平台上面卖货，为了让预约数量好看一点，只要有人预约，预约数量就自动乘以 3。这个时候就可以创建一个 ObjectFactory，只要是查询销量，就把它的预约数乘以 3 返回这个实体类。 被发现后，平台：是程序员干的。</p>
<p>附：</p>
<ol>
<li><p>什么时候调用了 objectFactory.create()？ </p>
<p>创建 DefaultResultSetHandler 的时候，和创建对象的时候。 </p>
</li>
<li><p>创建对象后，已有的属性为什么被覆盖了？ </p>
<p>在 DefaultResultSetHandler 类的 395 行 getRowValue()方法里面里面调用了applyPropertyMappings()。 </p>
</li>
<li><p>返回结果的时候，ObjectFactory 和 TypeHandler 哪个先工作？ </p>
<p>先是 ObjectFactory，再是 TypeHandler。肯定是先创建对象。 </p>
</li>
</ol>
<p>PS：step out 可以看到一步步调用的层级。 </p>
<h5 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a><strong>plugins</strong></h5><p>插件是 MyBatis 的一个很强大的机制，跟很多其他的框架一样，MyBatis 预留了插件的接口，让 MyBatis 更容易扩展。</p>
<p>根据官方的定义，插件可以拦截这四个对象的这些方法，我们把这四个对象称作MyBatis 的四大对象。我们会在带大家阅读源码，知道了这 4 大对象的作用之后，再来分析自定义插件的开发和插件运行的原理。 </p>
<p><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/configuration.html#plugins</a></p>
<table>
<thead>
<tr>
<th><strong>类（或接口）</strong></th>
<th><strong>方法</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Executor</td>
<td>update, query, flushStatements, commit, rollback, getTransaction, close, isClosed</td>
</tr>
<tr>
<td>ParameterHandler</td>
<td>getParameterObject, setParameters</td>
</tr>
<tr>
<td>ResultSetHandler</td>
<td>handleResultSets, handleOutputParameters</td>
</tr>
<tr>
<td>StatementHandler</td>
<td>prepare, parameterize, batch, update, query</td>
</tr>
</tbody></table>
<h5 id="environments、environment"><a href="#environments、environment" class="headerlink" title="environments、environment"></a><strong>environments、environment</strong></h5><p>environments 标签用来管理数据库的环境，比如我们可以有开发环境、测试环境、生产环境的数据库。可以在不同的环境中使用不同的数据库地址或者类型。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/gp-mybatis?useUnicode=true"</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一个 environment 标签就是一个数据源，代表一个数据库。这里面有两个关键的标 签，一个是事务管理器，一个是数据源。 </p>
<h5 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a><strong>transactionManager</strong></h5><p>如果配置的是 JDBC，则会使用 Connection 对象的 commit()、rollback()、close() 管理事务。</p>
<p>如果配置成 MANAGED，会把事务交给容器来管理，比如 JBOSS，Weblogic。因为我们跑的是本地程序，如果配置成 MANAGE 不会有任何事务。 </p>
<p>如 果 是 Spring + MyBatis ， 则 没 有 必 要 配 置 ， 因 为 我 们 会 直 接 在applicationContext.xml 里面配置数据源，覆盖 MyBatis 的配置。</p>
<h5 id="dataSource"><a href="#dataSource" class="headerlink" title="dataSource"></a><strong>dataSource</strong></h5><p>将在下一节（settings）详细分析。在跟 Spring 集成的时候，事务和数据源都会交给 Spring 来管理。</p>
<h5 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a><strong>mappers</strong></h5><p>&lt;mappers&gt;标签配置的是我们的映射器，也就是 Mapper.xml 的路径。这里配置的 </p>
<p>目的是让 MyBatis 在启动的时候去扫描这些映射器，创建映射关系。 </p>
<p>我们有四种指定 Mapper 文件的方式： </p>
<p><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#mappers" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/configuration.html#mappers</a> </p>
<ol>
<li><p>使用相对于类路径的资源引用（resource） </p>
</li>
<li><p>使用完全限定资源定位符（绝对路径）（URL） </p>
</li>
<li><p>使用映射器接口实现类的完全限定类名 </p>
</li>
<li><p>将包内的映射器接口实现全部注册为映射器（最常用） </p>
</li>
</ol>
<p>思考：</p>
<p>接口跟 statement 是怎么绑定起来的？——method 有方法全限定名，比如： com.gupaoedu.mapper.BlogMapper.selectBlogById ， 跟 namespace 里 面 的 statement ID 是相同的。 </p>
<p>在哪一步拿到 SQL 的？——ms 里面有 SQL。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DefaultSqlSession. selectList() </span></span><br><span class="line">MappedStatement ms = configuration.getMappedStatement(statement);</span><br></pre></td></tr></table></figure>

<h5 id="settings"><a href="#settings" class="headerlink" title="settings"></a><strong>settings</strong></h5><p>最后 settings 我们来单独说一下，因为 MyBatis 的一些最关键的配置都在这个标签里面（只讲解一些主要的）。</p>
<table>
<thead>
<tr>
<th><strong>属性名</strong></th>
<th><strong>含义</strong></th>
<th><strong>简介</strong></th>
<th><strong>有效值</strong></th>
<th><strong>默认值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>cacheEnabled</td>
<td>是否使用缓存</td>
<td>是整个工程中所有映射器配置缓存的 开关，即是一个全局缓存开关</td>
<td>true/false</td>
<td>true</td>
</tr>
<tr>
<td>lazyLoadingEnabled</td>
<td>是否开启延迟加载</td>
<td>控制全局是否使用延迟加载 （association、collection）。当有特殊关联关系需要单独配置时，可以使用 fetchType 属性来覆盖此配置</td>
<td>true/false</td>
<td>false</td>
</tr>
<tr>
<td>aggressiveLazyLoading</td>
<td>是否需要侵入式延迟加载</td>
<td>开启时，无论调用什么方法加载某个对 象，都会加载该对象的所有属性，关闭之后只会按需加载</td>
<td>true/false</td>
<td>false</td>
</tr>
<tr>
<td>defaultExecutorType</td>
<td>设置默认的执行器</td>
<td>有三种执行器：SIMPLE 为普通执行器； REUSE 执行器会重用与处理语句；BATCH 执行器将重用语句并执行批量更新</td>
<td>SIMPLE/REUSE/BATCH</td>
<td>SIMPLE</td>
</tr>
<tr>
<td>lazyLoadTriggerMeth ods</td>
<td>指定哪个对象的方 法触发一次延迟加载</td>
<td>配置需要触发延迟加载的方法的名字， 该方法就会触发一次延迟加载</td>
<td>一个逗号分隔的方 法名称列表</td>
<td>equals， clone，hashCode，toString</td>
</tr>
<tr>
<td>localCacheScope</td>
<td>MyBatis 利用本地 缓存机制（Local Cache）防止循环引 用（circular references）和加 速重复嵌套查询</td>
<td>默认值为 SESSION，这种情况下会缓存 一个会话中执行的所有查询。若设置值 为 STATEMENT，本地会话仅用在语句执 行上，对相同 SqlSession 的不同调用 将不会共享数据</td>
<td>SESSION/STATEMENT</td>
<td>SESSION</td>
</tr>
<tr>
<td>logImpl</td>
<td>日志实现</td>
<td>指定 MyBatis 所用日志的具体实现，未 指定时将自动查找</td>
<td>SLF4J、LOG4J、 LOG4J2、 JDK_LOGGING、 COMMONS_LOGGING、 STDOUT_LOGGING、 NO_LOGGING</td>
<td>无</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h5 id="Mapper-xml-映射配置文件【重点】"><a href="#Mapper-xml-映射配置文件【重点】" class="headerlink" title="Mapper.xml 映射配置文件【重点】"></a><strong>Mapper.xml 映射配置文件【重点】</strong></h5><p><a href="http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html</a> </p>
<p>映射器里面最主要的是配置了 SQL 语句，也解决了我们的参数映射和结果集映射的 问题。</p>
<p>一共有 8 个标签： </p>
<p>cache – 给定命名空间的缓存配置（是否开启二级缓存）。 </p>
<p>cache-ref – 其他命名空间缓存配置的引用。这两个标签我们在讲解缓存的时候会详细讲到。</p>
<p>resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"BaseResultMap"</span> type=<span class="string">"Employee"</span>&gt; </span><br><span class="line">  &lt;id column=<span class="string">"emp_id"</span> jdbcType=<span class="string">"INTEGER"</span> property=<span class="string">"empId"</span>/&gt; </span><br><span class="line">  &lt;result column=<span class="string">"emp_name"</span> jdbcType=<span class="string">"VARCHAR"</span> property=<span class="string">"empName"</span>/&gt; </span><br><span class="line">  &lt;result column=<span class="string">"gender"</span> jdbcType=<span class="string">"CHAR"</span> property=<span class="string">"gender"</span>/&gt; </span><br><span class="line">  &lt;result column=<span class="string">"email"</span> jdbcType=<span class="string">"VARCHAR"</span> property=<span class="string">"email"</span>/&gt; </span><br><span class="line">  &lt;result column=<span class="string">"d_id"</span> jdbcType=<span class="string">"INTEGER"</span> property=<span class="string">"dId"</span>/&gt; </span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>

<p>sql – 可被其他语句引用的可重用语句块。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;sql id="Base_Column_List"&gt; emp_id, emp_name, gender, email, d_id &lt;/sql&gt;</span><br></pre></td></tr></table></figure>

<p>增删改查标签： </p>
<p>insert – 映射插入语句 </p>
<p>update – 映射更新语句 </p>
<p>delete – 映射删除语句 </p>
<p>select – 映射查询语句</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h5><p>最后我们来总结一下：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg1h99a6lqj31f00lwn5c.jpg" alt="image-20200622232033369"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg1h9gflm6j31eg0ci43q.jpg" alt="image-20200622232045602"></p>
<h2 id="3-MyBatis-最佳实践"><a href="#3-MyBatis-最佳实践" class="headerlink" title="3.MyBatis 最佳实践"></a><strong>3.MyBatis 最佳实践</strong></h2><p>以下是一些 MyBatis 的高级用法或者扩展方式，帮助我们更好地使用 MyBatis。 </p>
<h3 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a><strong>动态 SQL</strong></h3><h4 id="为什么需要动态-SQL？"><a href="#为什么需要动态-SQL？" class="headerlink" title="为什么需要动态 SQL？"></a><strong>为什么需要动态 SQL？</strong></h4><p>由于前台传入的查询参数不同，所以写了很多的 if else，还需要非常注意 SQL 语句里面的 and、空格、逗号和转移的单引号这些，拼接和调试 SQL 就是一件非常耗时的工作。</p>
<p>MyBaits 的动态 SQL 就帮助我们解决了这个问题，它是基于 OGNL 表达式的。</p>
<h4 id="动态标签有哪些？"><a href="#动态标签有哪些？" class="headerlink" title="动态标签有哪些？"></a><strong>动态标签有哪些？</strong></h4><p>按照官网的分类，MyBatis 的动态标签主要有四类：if，choose (when, otherwise)， trim (where, set)，foreach。</p>
<p>（案例在 spring-mybatis 工程中） </p>
<p>if —— 需要判断的时候，条件写在 test 中 </p>
<p>以下语句可以用&lt;where&gt;改写 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectDept"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.gupaoedu.crud.bean.Department"</span>&gt;</span> </span><br><span class="line">  select * from tbl_dept where 1=1 </span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"deptId != null"</span>&gt;</span> </span><br><span class="line">    and dept_id = #&#123;deptId,jdbcType=INTEGER&#125; </span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>choose (when, otherwise) —— 需要选择一个条件的时候</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpList_choose"</span> <span class="attr">resultMap</span>=<span class="string">"empResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"com.gupaoedu.crud.bean.Employee"</span>&gt;</span> </span><br><span class="line">  SELECT * FROM tbl_emp e </span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"empId !=null"</span>&gt;</span> </span><br><span class="line">        e.emp_id = #&#123;emp_id, jdbcType=INTEGER&#125; </span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"empName != null and empName != ''"</span>&gt;</span> </span><br><span class="line">        AND e.emp_name LIKE CONCAT(CONCAT('%', #&#123;emp_name, jdbcType=VARCHAR&#125;),'%') </span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"email != null "</span>&gt;</span> AND e.email = #&#123;email, jdbcType=VARCHAR&#125; </span><br><span class="line">      <span class="tag">&lt;/<span class="name">when</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>trim (where, set)——需要去掉 where、and、逗号之类的符号的时候。 </p>
<p>注意最后一个条件 dId 多了一个逗号，就是用 trim 去掉的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKeySelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.gupaoedu.crud.bean.Employee"</span>&gt;</span> </span><br><span class="line">  update tbl_emp</span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empName != null"</span>&gt;</span> </span><br><span class="line">      emp_name = #&#123;empName,jdbcType=VARCHAR&#125;, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender != null"</span>&gt;</span> </span><br><span class="line">      gender = #&#123;gender,jdbcType=CHAR&#125;, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span> </span><br><span class="line">      email = #&#123;email,jdbcType=VARCHAR&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"dId != null"</span>&gt;</span> </span><br><span class="line">      d_id = #&#123;dId,jdbcType=INTEGER&#125;, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span> </span><br><span class="line">  where emp_id = #&#123;empId,jdbcType=INTEGER&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>trim 用来指定或者去掉前缀或者后缀：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"com.gupaoedu.crud.bean.Employee"</span>&gt;</span> </span><br><span class="line">  insert into tbl_emp </span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empId != null"</span>&gt;</span> </span><br><span class="line">      emp_id, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empName != null"</span>&gt;</span> </span><br><span class="line">      emp_name, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"dId != null"</span>&gt;</span> </span><br><span class="line">      d_id, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empId != null"</span>&gt;</span> </span><br><span class="line">      #&#123;empId,jdbcType=INTEGER&#125;, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"empName != null"</span>&gt;</span> </span><br><span class="line">      #&#123;empName,jdbcType=VARCHAR&#125;, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"dId != null"</span>&gt;</span> </span><br><span class="line">      #&#123;dId,jdbcType=INTEGER&#125;, </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">trim</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>foreach —— 需要遍历集合的时候：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByList"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span> </span><br><span class="line">  delete from tbl_emp where emp_id in </span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span> </span><br><span class="line">    #&#123;item.empId,jdbcType=VARCHAR&#125; </span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>动态 SQL 主要是用来解决 SQL 语句生成的问题。</p>
<h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a><strong>批量操作</strong></h3><p>（spring-mybatis 工程单元测试目录，MapperTest 类） </p>
<p>我们在生产的项目中会有一些批量操作的场景，比如导入文件批量处理数据的情况 （批量新增商户、批量修改商户信息），当数据量非常大，比如超过几万条的时候，在 Java 代码中循环发送 SQL 到数据库执行肯定是不现实的，因为这个意味着要跟数据库创建几万次会话，即使我们使用了数据库连接池技术，对于数据库服务器来说也是不堪重 负的。</p>
<p>在 MyBatis 里面是支持批量的操作的，包括批量的插入、更新、删除。我们可以直接传入一个 List、Set、Map 或者数组，配合动态 SQL 的标签，MyBatis 会自动帮我们 生成语法正确的 SQL 语句。 </p>
<p>比如我们来看两个例子，批量插入和批量更新。 </p>
<h4 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a><strong>批量插入</strong></h4><p>批量插入的语法是这样的，只要在 values 后面增加插入的值就可以了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_emp (emp_id, emp_name, gender,email, d_id) <span class="keyword">values</span> ( ?,?,?,?,? ) , ( ?,?,?,?,? ) , ( ?,?,?,?,? ) , ( ?,?,?,?,? ) , ( ?,?,?,?,? ) , ( ?,?,?,?,? ) , ( ?,?,?,?,? ) , ( ?,?,?,?,? ) , ( ?,?,?,?,? ) , ( ?,?,?,?,? )</span><br></pre></td></tr></table></figure>

<p>在 Mapper 文件里面，我们使用 foreach 标签拼接 values 部分的语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 批量插入 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"batchInsert"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"long"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span> </span><br><span class="line">    SELECT LAST_INSERT_ID() </span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span> </span><br><span class="line">  insert into tbl_emp (emp_id, emp_name, gender,email, d_id) values </span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"emps"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span> </span><br><span class="line">    ( #&#123;emps.empId&#125;,#&#123;emps.empName&#125;,#&#123;emps.gender&#125;,#&#123;emps.email&#125;,#&#123;emps.dId&#125; ) </span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java 代码里面，直接传入一个 List 类型的参数。 </p>
<p>我们来测试一下。效率要比循环发送 SQL 执行要高得多。最关键的地方就在于减少了跟数据库交互的次数，并且避免了开启和结束事务的时间消耗。 </p>
<h4 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a><strong>批量更新</strong></h4><p>批量更新的语法是这样的，通过 case when，来匹配 id 相关的字段值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> tbl_emp </span><br><span class="line"><span class="keyword">set</span> </span><br><span class="line">emp_name = <span class="keyword">case</span> emp_id </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? <span class="keyword">end</span> , </span><br><span class="line">gender =<span class="keyword">case</span> emp_id </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? <span class="keyword">end</span> , </span><br><span class="line">email = <span class="keyword">case</span> emp_id </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? </span><br><span class="line"><span class="keyword">when</span> ? <span class="keyword">then</span> ? <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">where</span> emp_id <span class="keyword">in</span> ( ? , ? , ? )</span><br></pre></td></tr></table></figure>

<p>所以在 Mapper 文件里面最关键的就是 case when 和 where 的配置。</p>
<p>需要注意一下 open 属性和 separator 属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBatch"</span>&gt;</span> </span><br><span class="line">  update tbl_emp set emp_name = </span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"emps"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">" "</span> <span class="attr">open</span>=<span class="string">"case emp_id"</span> <span class="attr">close</span>=<span class="string">"end"</span>&gt;</span> </span><br><span class="line">    when #&#123;emps.empId&#125; then #&#123;emps.empName&#125; </span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line">  ,gender = </span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"emps"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">" "</span> <span class="attr">open</span>=<span class="string">"case emp_id"</span> <span class="attr">close</span>=<span class="string">"end"</span>&gt;</span> </span><br><span class="line">    when #&#123;emps.empId&#125; then #&#123;emps.gender&#125; </span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line">  ,email = </span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"emps"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">" "</span> <span class="attr">open</span>=<span class="string">"case emp_id"</span> <span class="attr">close</span>=<span class="string">"end"</span>&gt;</span> </span><br><span class="line">    when #&#123;emps.empId&#125; then #&#123;emps.email&#125; </span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line">  where emp_id in </span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"emps"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">    #&#123;emps.empId&#125; </span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>批量删除也是类似的。 </p>
<h4 id="Batch-Executor"><a href="#Batch-Executor" class="headerlink" title="Batch Executor"></a><strong>Batch Executor</strong></h4><p>当然 MyBatis 的动态标签的批量操作也是存在一定的缺点的，比如数据量特别大的时候，拼接出来的 SQL 语句过大。 </p>
<p>MySQL 的服务端对于接收的数据包有大小限制，max_allowed_packet 默认是4M，需要修改默认配置才可以解决这个问题。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: com.mysql.jdbc.PacketTooBigException: <span class="function">Packet <span class="keyword">for</span> query is too <span class="title">large</span> <span class="params">(<span class="number">7188967</span> &gt; <span class="number">4194304</span>)</span>. You can change <span class="keyword">this</span> value on the server by setting the max_allowed_packet' variable.</span></span><br></pre></td></tr></table></figure>

<p>在我们的全局配置文件中，可以配置默认的 Executor 的类型。其中有一种BatchExecutor。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以在创建会话的时候指定执行器类型： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession(ExecutorType.BATCH);</span><br></pre></td></tr></table></figure>

<p>BatchExecutor 底层是对 JDBC ps.addBatch()的封装，原理是攒一批 SQL 以后再发 送（参考 standalone - 单元测试目录 JdbcTest.java – testJdbcBatch()）。 </p>
<p>问题：三种执行器的区别是什么？Simple、Reuse、Batch </p>
<h4 id="嵌套（关联）查询-N-1-延迟加载"><a href="#嵌套（关联）查询-N-1-延迟加载" class="headerlink" title="嵌套（关联）查询/ N+1 / 延迟加载"></a><strong>嵌套（关联）查询/ N+1 / 延迟加载</strong></h4><p>我们在查询业务数据的时候经常会遇到跨表关联查询的情况，比如查询员工就会关 联部门（一对一），查询成绩就会关联课程（一对一），查询订单就会关联商品（一对 多），等等。 </p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg1hw2a9v7j31b60qegv7.jpg" alt="image-20200622234226756"></p>
<p>我们映射结果有两个标签，一个是 resultType，一个是 resultMap。 </p>
<p>resultType 是 select 标签的一个属性，适用于返回 JDK 类型（比如 Integer、String 等等）和实体类。这种情况下结果集的列和实体类的属性可以直接映射。如果返回的字段无法直接映射，就要用 resultMap 来建立映射关系。 </p>
<p>对于关联查询的这种情况，通常不能用 resultType 来映射。用 resultMap 映射，要么就是修改 dto（Data Transfer Object），在里面增加字段，这个会导致增加很多无关 的字段。要么就是引用关联的对象，比如 Blog 里面包含了一个 Author 对象，这种情况下就要用到关联查询（association，或者嵌套查询），MyBatis 可以帮我们自动做结果 的映射。</p>
<p>一对一的关联查询有两种配置方式： </p>
<p>1、嵌套结果：</p>
<p>（mybatis-standalone - MyBatisTest - testSelectBlogWithAuthorResult ()）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据文章查询作者，一对一查询的结果，嵌套查询 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BlogWithAuthorResultMap"</span> <span class="attr">type</span>=<span class="string">"com.gupaoedu.domain.associate.BlogAndAuthor"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"bid"</span> <span class="attr">property</span>=<span class="string">"bid"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- 联合查询，将 author 的属性映射到 ResultMap --&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"com.gupaoedu.domain.Author"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"author_id"</span> <span class="attr">property</span>=<span class="string">"authorId"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"author_name"</span> <span class="attr">property</span>=<span class="string">"authorName"</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、嵌套查询： </p>
<p>（mybatis-standalone - MyBatisTest - testSelectBlogWithAuthorQuery ()）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 另一种联合查询 (一对一)的实现，但是这种方式有“N+1”的问题 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BlogWithAuthorQueryMap"</span> <span class="attr">type</span>=<span class="string">"com.gupaoedu.domain.associate.BlogAndAuthor"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"bid"</span> <span class="attr">property</span>=<span class="string">"bid"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"author"</span> <span class="attr">javaType</span>=<span class="string">"com.gupaoedu.domain.Author"</span> <span class="attr">column</span>=<span class="string">"author_id"</span> <span class="attr">select</span>=<span class="string">"selectAuthor"</span>/&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- selectAuthor 定义在下面--&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 嵌套查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAuthor"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.gupaoedu.domain.Author"</span>&gt;</span> </span><br><span class="line">  select author_id authorId, author_name authorName from author where author_id = #&#123;authorId&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中第二种方式：嵌套查询，由于是分两次查询，当我们查询了员工信息之后，会再发送一条 SQL 到数据库查询部门信息。 </p>
<p>我们只执行了一次查询员工信息的 SQL（所谓的 1），如果返回了 N 条记录，就会再发送 N 条到数据库查询部门信息（所谓的 N），这个就是我们所说的 N+1 的问题。 </p>
<p>这样会白白地浪费我们的应用和数据库的性能。 </p>
<p>如果我们用了嵌套查询的方式，怎么解决这个问题？能不能等到使用部门信息的时 候再去查询？这个就是我们所说的延迟加载，或者叫懒加载。 </p>
<p>在 MyBatis 里面可以通过开启延迟加载的开关来解决这个问题。 </p>
<p>在 settings 标签里面可以配置： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。默认 false --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--当开启时，任何方法的调用都会加载该对象的所有属性。默认 false，可通过 select 标签的 fetchType 来覆盖--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- Mybatis 创建具有延迟加载能力的对象所用到的代理工具，默认 JAVASSIST --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"proxyFactory"</span> <span class="attr">value</span>=<span class="string">"CGLIB"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>lazyLoadingEnabled 决定了是否延迟加载。 </p>
<p>aggressiveLazyLoading 决定了是不是对象的所有方法都会触发查询。 </p>
<p>先来测试一下（也可以改成查询列表）： </p>
<ol>
<li><p>没有开启延迟加载的开关，会连续发送两次查询； </p>
</li>
<li><p>开 启 了 延 迟 加 载 的 开 关 ， 调 用 blog.getAuthor() 以 及 默 认 的（equals,clone,hashCode,toString）时才会发起第二次查询，其他方法并不会触发查询，比如 blog.getName()；</p>
</li>
<li><p>如果开启了 aggressiveLazyLoading=true，其他方法也会触发查询，比如blog.getName()。 </p>
</li>
</ol>
<p>问题：为什么可以做到延迟加载？blog.getAuthor()，只是一个获取属性的方法，里面并没有连接数据库的代码，为什么会触发对数据库的查询呢？ </p>
<p>我怀疑：blog 根本不是 Blog 对象，而是被人动过了手脚！ </p>
<p>把这个对象打印出来看看： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(blog.getClass());</span><br></pre></td></tr></table></figure>

<p>果然不对： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">gupaoedu</span>.<span class="title">domain</span>.<span class="title">associate</span>.<span class="title">BlogAndAuthor_</span>$$<span class="title">_jvst70_0</span></span></span><br></pre></td></tr></table></figure>

<p>这个类的名字后面有 jvst，是 JAVASSIST 的缩写。原来到这里带延迟加载功能的对象 blog 已经变成了一个代理对象，那到底什么时候变成代理对象的？我们后面在看源码的时候再去分析，这个也先留一个作业给大家。 </p>
<p>【问题】当开启了延迟加载的开关，对象是怎么变成代理对象的？ </p>
<p>DefaultResultSetHandler.createResultObject() </p>
<p>既然是代理对象，那么必须要有一种创建代理对象的方法。我们有哪些实现动态代 理的方式？ </p>
<p>这个就是为什么 settings 里面提供了一个 ProxyFactory 属性。MyBatis 默认使用 JAVASSIST 创建代理对象。也可以改为 CGLIB，这时需要引入 CGLIB 的包。 </p>
<p>【问题】CGLIB 和 JAVASSIST 区别是什么？</p>
<p>测试一下，我们把默认的 JAVASSIST 修改为 CGLIB，再打印这个对象。 </p>
<p>【问题】 </p>
<p>1、resultType 和 resultMap 的区别？ </p>
<p>2、collection 和 association 的区别？</p>
]]></content>
      <categories>
        <category>mybatis源码解读</category>
      </categories>
      <tags>
        <tag>mybatis应用</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis源码解读</title>
    <url>/2020/06/23/mybatis%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h1 id="MyBatis源码解读"><a href="#MyBatis源码解读" class="headerlink" title="MyBatis源码解读"></a>MyBatis源码解读</h1><h2 id="带着问题去看源码"><a href="#带着问题去看源码" class="headerlink" title="带着问题去看源码"></a>带着问题去看源码</h2><p>分析源码，我们还是从编程式的 demo 入手。Spring 的集成我们会在后面讲到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream); </span><br><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Blog blog = mapper.selectBlogById(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>把文件读取成流的这一步我们就省略了。所以下面我们分成四步来分析。</p>
<p>第一步，我们通过建造者模式创建一个工厂类，配置文件的解析就是在这一步完成 的，包括 mybatis-config.xml 和 Mapper 适配器文件。</p>
<p>问题:解析的时候怎么解析的，做了什么，产生了什么对象，结果存放到了哪里。 解析的结果决定着我们后面有什么对象可以使用，和到哪里去取。</p>
<p>第二步，通过 SqlSessionFactory 创建一个 SqlSession。</p>
<p>问题:SqlSession 是用来操作数据库的，返回了什么实现类，除了 SqlSession，还 创建了什么对象，创建了什么环境?</p>
<p>第三步，获得一个 Mapper 对象。</p>
<p>问题:Mapper 是一个接口，没有实现类，是不能被实例化的，那获取到的这个 Mapper 对象是什么对象?为什么要从 SqlSession 里面去获取?为什么传进去一个接 口，然后还要用接口类型来接收?</p>
<p>第四步，调用接口方法。</p>
<p>问题:我们的接口没有创建实现类，为什么可以调用它的方法?那它调用的是什么 方法?它又是根据什么找到我们要执行的 SQL 的?也就是接口方法怎么和 XML 映射器 里面的 StatementID 关联起来的?</p>
<p>此外，我们的方法参数是怎么转换成 SQL 参数的?获取到的结果集是怎么转换成对 象的?</p>
<p>接下来我们就会详细分析每一步的流程，包括里面有哪些核心的对象和关键的方法。</p>
<h2 id="一、配置解析过程"><a href="#一、配置解析过程" class="headerlink" title="一、配置解析过程"></a>一、配置解析过程</h2><p>首先我们要清楚的是配置解析的过程全部只解析了两种文件。一个是 mybatis-config.xml 全局配置文件。另外就是可能有很多个的 Mapper.xml 文件，也包 括在 Mapper 接口类上面定义的注解。</p>
<p>我们从 mybatis-config.xml 开始。在第一节课的时候我们已经分析了核心配置了， 大概明白了 MyBatis 有哪些配置项，和这些配置项的大致含义。这里我们再具体看一下 这里面的标签都是怎么解析的，解析的时候做了什么。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>

<p>首先我们 new 了一个 SqlSessionFactoryBuilder，非常明显的建造者模式，它里面 定义了很多个 build 方法的重载，最终返回的是一个 SqlSessionFactory 对象(单例模 式)。我们点进去 build 方法。</p>
<p>这里面创建了一个 XMLConfigBuilder 对象(Configuration 对象也是这个时候创 建的)。</p>
<h3 id="XMLConfigBuilder"><a href="#XMLConfigBuilder" class="headerlink" title="XMLConfigBuilder"></a>XMLConfigBuilder</h3><p>XMLConfigBuilder 是抽象类 BaseBuilder 的一个子类，专门用来解析全局配置文 件，针对不同的构建目标还有其他的一些子类，比如:</p>
<p>XMLMapperBuilder:解析 Mapper 映射器 </p>
<p>XMLStatementBuilder:解析增删改查标签</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2mz0ztjcj31oi06k7ac.jpg" alt="image-20200623232353388"></p>
<p>根据我们解析的文件流，这里后面两个参数都是空的，创建了一个 parser。</p>
<p>这里有两步，第一步是调用 parser 的 parse()方法，它会返回一个 Configuration 类。</p>
<p>之前我们说过，也就是配置文件里面所有的信息都会放在 Configuration 里面。 Configuration 类里面有很多的属性，有很多是跟 config 里面的标签直接对应的。</p>
<p>我们先看一下 parse()方法:</p>
<p>首先会检查是不是已经解析过，也就是说在应用的生命周期里面，config 配置文件</p>
<p>只需要解析一次，生成的 Configuration 对象也会存在应用的整个生命周期中。接下来就是 parseConfiguration 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">parseConfiguration(parser.evalNode(<span class="string">"/configuration"</span>));</span><br></pre></td></tr></table></figure>

<p>这下面有十几个方法，对应着 config 文件里面的所有一级标签。</p>
<p>问题:MyBatis 全局配置文件的顺序可以颠倒吗?</p>
<h3 id="propertiesElement"><a href="#propertiesElement" class="headerlink" title="propertiesElement()"></a>propertiesElement()</h3><p>第一个是解析&lt;properties&gt;标签，读取我们引入的外部配置文件。这里面又有两种 类型，一种是放在 resource 目录下的，是相对路径，一种是写的绝对路径的。解析的最 终结果就是我们会把所有的配置信息放到名为 defaults 的 Properties 对象里面，最后把 XPathParser 和 Configuration 的 Properties 属性都设置成我们填充后的 Properties 对象。</p>
<h3 id="settingsAsProperties"><a href="#settingsAsProperties" class="headerlink" title="settingsAsProperties()"></a>settingsAsProperties()</h3><p>第二个，我们把&lt;settings&gt;标签也解析成了一个 Properties 对象，对于&lt;settings&gt; 标签的子标签的处理在后面。</p>
<p>在早期的版本里面解析和设置都是在后面一起的，这里先解析成 Properties 对象是 因为下面的两个方法要用到。</p>
<h3 id="loadCustomVfs-settings"><a href="#loadCustomVfs-settings" class="headerlink" title="loadCustomVfs(settings)"></a>loadCustomVfs(settings)</h3><p>loadCustomVfs 是获取 Vitual File System 的自定义实现类，比如我们要读取本地 文件，或者 FTP 远程文件的时候，就可以用到自定义的 VFS 类。我们根据&lt;settings&gt;标 签里面的&lt;vfsImpl&gt;标签，生成了一个抽象类 VFS 的子类，并且赋值到 Configuration 中。</p>
<h3 id="loadCustomLogImpl-settings"><a href="#loadCustomLogImpl-settings" class="headerlink" title="loadCustomLogImpl(settings)"></a>loadCustomLogImpl(settings)</h3><p>loadCustomLogImpl 是根据&lt;logImpl&gt;标签获取日志的实现类，我们可以用到很 多的日志的方案，包括 LOG4J，LOG4J2，SLF4J 等等。这里生成了一个 Log 接口的实 现类，并且赋值到 Configuration 中。</p>
<h3 id="typeAliasesElement"><a href="#typeAliasesElement" class="headerlink" title="typeAliasesElement()"></a>typeAliasesElement()</h3><p>接下来，我们解析&lt;typeAliases&gt;标签，我们在讲配置的时候也讲过，它有两种定义 方式，一种是直接定义一个类的别名，一种就是指定一个包，那么这个 package 下面所 有的类的名字就会成为这个类全路径的别名。</p>
<p>类的别名和类的关系，我们放在一个 TypeAliasRegistry 对象里面。</p>
<h3 id="pluginElement"><a href="#pluginElement" class="headerlink" title="pluginElement()"></a>pluginElement()</h3><p>接下来就是解析&lt;plugins&gt;标签，比如 Pagehelper 的翻页插件，或者我们自定义的 插件。&lt;plugins&gt;标签里面只有&lt;plugin&gt;标签，&lt;plugin&gt;标签里面只有&lt;property&gt;标 签。</p>
<p>标签解析完以后，会生成一个 Interceptor 对象，并且添加到 Configuration 的 InterceptorChain 属性里面，它是一个 List。</p>
<h3 id="objectFactoryElement-、objectWrapperFactoryElement"><a href="#objectFactoryElement-、objectWrapperFactoryElement" class="headerlink" title="objectFactoryElement()、objectWrapperFactoryElement()"></a>objectFactoryElement()、objectWrapperFactoryElement()</h3><p>接 下 来 的 两 个 标 签 是 用 来 实 例 化 对 象 用 的 ， &lt;objectFactory&gt; 和 &lt;objectWrapperFactory&gt; 这 两 个 标 签 ， 分 别 生 成 ObjectFactory 、 ObjectWrapperFactory 对象，同样设置到 Configuration 的属性里面。</p>
<h3 id="reflectorFactoryElement"><a href="#reflectorFactoryElement" class="headerlink" title="reflectorFactoryElement()"></a>reflectorFactoryElement()</h3><p>解析 reflectorFactory 标签，生成 ReflectorFactory 对象(在官方 3.5.1 的 pdf 文 档里面没有找到这个配置)。</p>
<h3 id="settingsElement-settings"><a href="#settingsElement-settings" class="headerlink" title="settingsElement(settings)"></a>settingsElement(settings)</h3><p>这里就是对&lt;settings&gt;标签里面所有子标签的处理了，前面我们已经把子标签全部 转换成了 Properties 对象，所以在这里处理 Properties 对象就可以了。</p>
<p>二级标签里面有很多的配置，比如二级缓存，延迟加载，自动生成主键这些。需要 注意的是，我们之前提到的所有的默认值，都是在这里赋值的。如果说后面我们不知道这个属性的值是什么，也可以到这一步来确认一下。</p>
<p>所有的值，都会赋值到 Configuration 的属性里面去。</p>
<h3 id="environmentsElement"><a href="#environmentsElement" class="headerlink" title="environmentsElement()"></a>environmentsElement()</h3><p>这一步是解析&lt;environments&gt;标签。</p>
<p>我们前面讲过，一个 environment 就是对应一个数据源，所以在这里我们会根据配 置的&lt;transactionManager&gt;创建一个事务工厂，根据&lt;dataSource&gt;标签创建一个数据 源，最后把这两个对象设置成 Environment 对象的属性，放到 Configuration 里面。</p>
<p>回答了前面的问题:数据源工厂和数据源在哪里创建。 先记下这个问题:数据源和事务工厂在哪里会用到?</p>
<h3 id="databaseIdProviderElement"><a href="#databaseIdProviderElement" class="headerlink" title="databaseIdProviderElement()"></a>databaseIdProviderElement()</h3><p>解析 databaseIdProvider 标签，生成 DatabaseIdProvider 对象(用来支持不同厂 商的数据库)。</p>
<h3 id="typeHandlerElement"><a href="#typeHandlerElement" class="headerlink" title="typeHandlerElement()"></a>typeHandlerElement()</h3><p>跟 TypeAlias 一样，TypeHandler 有两种配置方式，一种是单独配置一个类，一种 是指定一个 package。最后我们得到的是 JavaType 和 JdbcType，以及用来做相互映射 的 TypeHandler 之间的映射关系。</p>
<p>最后存放在 TypeHandlerRegistry 对象里面。</p>
<p>问题:这种三个对象(Java 类型，JDBC 类型，Handler)的关系怎么映射?(Map 里面再放一个 Map)</p>
<h3 id="mapperElement"><a href="#mapperElement" class="headerlink" title="mapperElement()"></a>mapperElement()</h3><p><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#mappers" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/configuration.html#mappers</a></p>
<p><strong>1)判断</strong></p>
<p>最后就是&lt;mappers&gt;标签的解析。</p>
<table>
<thead>
<tr>
<th>扫描类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>resource</td>
<td>相对路径</td>
</tr>
<tr>
<td>url</td>
<td>绝对路径</td>
</tr>
<tr>
<td>package</td>
<td>包</td>
</tr>
<tr>
<td>class</td>
<td>单个接口</td>
</tr>
</tbody></table>
<p>首先会判断是不是接口，只有接口才解析;然后判断是不是已经注册了，单个 Mapper 重复注册会抛出异常。</p>
<p><strong>2)注册</strong></p>
<p>XMLMapperBuilder.parse()方法，是对 Mapper 映射器的解析。里面有两个方法:</p>
<p>configurationElement()—— 解 析 所 有 的 子 标 签 ， 其 中 buildStatementFromContext()最终获得 MappedStatement 对象。</p>
<p>bindMapperForNamespace()——把 namespace(接口类型)和工厂类绑定起来。</p>
<p>无论是按 package 扫描，还是按接口扫描，最后都会调用到 MapperRegistry 的 addMapper()方法。</p>
<p>MapperRegistry 里面维护的其实是一个 Map 容器，存储接口和代理工厂的映射关 系。</p>
<p>问题:为什么要放一个代理工厂呢?代理工厂用来干什么?</p>
<p><strong>3)处理注解</strong></p>
<p>除了映射器文件，在这里也会去解析 Mapper 接口方法上的注解。在 addMapper() 方法里面创建了一个 MapperAnnotationBuilder，我们点进去看一下 parse()方法。</p>
<p>parseCache() 和 parseCacheRef() 方 法 其 实 是 对 @CacheNamespace 和 @CacheNamespaceRef 这两个注解的处理。</p>
<p>parseStatement()方法里面的各种 getAnnotation()，都是对注解的解析，比如 @Options，@SelectKey，@ResultMap 等等。</p>
<p>最后同样会解析成 MappedStatement 对象，也就是说在 XML 中配置，和使用注 解配置，最后起到一样的效果。</p>
<p><strong>4)收尾</strong></p>
<p>如果注册没有完成，还要从 Map 里面 remove 掉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MapperRegistry.java</span></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!loadCompleted) &#123;</span><br><span class="line">    knownMappers.remove(type); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>最后，MapperRegistry 也会放到 Configuration 里面去。</p>
<p>第二步是调用另一个 build()方法，返回 DefaultSqlSessionFactory。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>在这一步，我们主要完成了 config 配置文件、Mapper 文件、Mapper 接口上的注 解的解析。</p>
<p>我们得到了一个最重要的对象 Configuration，这里面存放了全部的配置信息，它在属性里面还有各种各样的容器。</p>
<p>最后，返回了一个 DefaultSqlSessionFactory，里面持有了 Configuration 的实例。</p>
<h2 id="二、会话创建过程"><a href="#二、会话创建过程" class="headerlink" title="二、会话创建过程"></a>二、会话创建过程</h2><p>这是第二步，我们跟数据库的每一次连接，都需要创建一个会话，我们用 openSession()方法来创建。</p>
<p>DefaultSqlSessionFactory —— openSessionFromDataSource()</p>
<p>这个会话里面，需要包含一个 Executor 用来执行 SQL。Executor 又要指定事务类 型和执行器的类型。</p>
<p>所以我们会先从 Configuration 里面拿到 Enviroment，Enviroment 里面就有事务 工厂。</p>
<h3 id="1、创建-Transaction"><a href="#1、创建-Transaction" class="headerlink" title="1、创建 Transaction"></a>1、创建 Transaction</h3><table>
<thead>
<tr>
<th>属性</th>
<th>产生工厂类</th>
<th>产生事务</th>
</tr>
</thead>
<tbody><tr>
<td>JDBC</td>
<td>JdbcTransactionFactory</td>
<td>JdbcTransaction</td>
</tr>
<tr>
<td>MANAGED</td>
<td>ManagedTransactionFactory</td>
<td>ManagedTransaction</td>
</tr>
</tbody></table>
<p>如果配置的是 JDBC，则会使用 Connection 对象的 commit()、rollback()、close() 管理事务。</p>
<p>如果配置成 MANAGED，会把事务交给容器来管理，比如 JBOSS，Weblogic。因 为我们跑的是本地程序，如果配置成 MANAGE 不会有任何事务。</p>
<p>如果是 Spring + MyBatis，则没有必要配置，因为我们会直接在 applicationContext.xml 里面配置数据源和事务管理器，覆盖 MyBatis 的配置。</p>
<h3 id="2、创建-Executor"><a href="#2、创建-Executor" class="headerlink" title="2、创建 Executor"></a>2、创建 Executor</h3><p>我们知道，Executor 的基本类型有三种:SIMPLE、BATCH、REUSE，默认是 SIMPLE (settingsElement()读取默认值)，他们都继承了抽象类 BaseExecutor。</p>
<p>为什么要让抽象类实现接口，然后让具体实现类继承抽象类?(模板方法模式)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">“定义一个算法的骨架，并允许子类为一个或者多个步骤提供实现。 模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤。”</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg2ngkhjv1j31fc0ga7fi.jpg" alt="image-20200623234043164"></p>
<p>问题:三种类型的区别(通过 update()方法对比)?</p>
<p>SimpleExecutor:每执行一次 update 或 select，就开启一个 Statement 对象，用 完立刻关闭 Statement 对象。</p>
<p>ReuseExecutor:执行 update 或 select，以 sql 作为 key 查找 Statement 对象， 存在就使用，不存在就创建，用完后，不关闭 Statement 对象，而是放置于 Map 内， 供下一次使用。简言之，就是重复使用 Statement 对象。</p>
<p>BatchExecutor:执行 update(没有 select，JDBC 批处理不支持 select)，将所 有 sql 都添加到批处理中(addBatch())，等待统一执行(executeBatch())，它缓存 了多个 Statement 对象，每个 Statement 对象都是 addBatch()完毕后，等待逐一执行 executeBatch()批处理。与 JDBC 批处理相同。</p>
<p>如果配置了 cacheEnabled=ture，会用装饰器模式对 executor 进行包装:new CachingExecutor(executor)。</p>
<p>包装完毕后，会执行:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">executor = (Executor) interceptorChain.pluginAll(executor);</span><br></pre></td></tr></table></figure>

<p>此处会对 executor 进行包装。</p>
<p>回答了前面的问题:数据源和事务工厂在哪里会用到——创建执行器的时候。</p>
<p>最终返回 DefaultSqlSession，属性包括 Configuration、Executor 对象。</p>
<p>总结:创建会话的过程，我们获得了一个 DefaultSqlSession，里面包含了一个 Executor，它是 SQL 的执行者。</p>
<h2 id="三、获得-Mapper-对象"><a href="#三、获得-Mapper-对象" class="headerlink" title="三、获得 Mapper 对象"></a>三、获得 Mapper 对象</h2><p>现在我们已经有一个 DefaultSqlSession 了，必须找到 Mapper.xml 里面定义的 Statement ID，才能执行对应的 SQL 语句。</p>
<p>找到 Statement ID 有两种方式:一种是直接调用 session 的方法，在参数里面传入 Statement ID，这种方式属于硬编码，我们没办法知道有多少处调用，修改起来也很麻 烦。</p>
<p>另一个问题是如果参数传入错误，在编译阶段也是不会报错的，不利于预先发现问 题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Blog blog = (Blog) session.selectOne(<span class="string">"com.gupaoedu.mapper.BlogMapper.selectBlogById "</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>所以在 MyBatis 后期的版本提供了第二种方式，就是定义一个接口，然后再调用 Mapper 接口的方法。</p>
<p>由于我们的接口名称跟 Mapper.xml 的 namespace 是对应的，接口的方法跟 statement ID 也都是对应的，所以根据方法就能找到对应的要执行的 SQL。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>在这里我们主要研究一下 Mapper 对象是怎么获得的，它的本质是什么。</p>
<p>DefaultSqlSession 的 getMapper()方法，调用了 Configuration 的 getMapper() 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">configuration.&lt;T&gt;getMapper()</span><br></pre></td></tr></table></figure>

<p>Configuration 的 getMapper()方法，又调用了 MapperRegistry 的 getMapper() 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapperRegistry.getMapper()</span><br></pre></td></tr></table></figure>

<p>我们知道，在解析 mapper 标签和 Mapper.xml 的时候已经把接口类型和类型对应的 MapperProxyFactory 放到了一个 Map 中。获取 Mapper 代理对象，实际上是从Map 中获取对应的工厂类后，调用以下方法创建对象:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MapperProxyFactory.newInstance()</span><br></pre></td></tr></table></figure>

<p>最终通过代理模式返回代理对象:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br></pre></td></tr></table></figure>

<p>回答了前面的问题:为什么要保存一个工厂类，它是用来创建代理对象的。</p>
<p>JDK 动态代理和 MyBatis 用到的 JDK 动态代理有什么区别?</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg35rjp601j30gq048dgn.jpg" alt="image-20200624101405063"></p>
<p>JDK 动态代理:</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg35rv0bd4j30nq0g2go8.jpg" alt="image-20200624101423155"></p>
<p>JDK 动态代理代理，在实现了 InvocationHandler 的代理类里面，需要传入一个被 代理对象的实现类。</p>
<p>MyBatis 的动态代理:</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg35spwtenj30ne0f476h.jpg" alt="image-20200624101459654"></p>
<p>不需要实现类的原因:我们只需要根据接口类型+方法的名称，就可以找到 Statement ID 了，而唯一要做的一件事情也是这件，所以不需要实现类。在 MapperProxy 里面直接执行逻辑(也就是执行 SQL)就可以。</p>
<p>总结:</p>
<p>获得 Mapper 对象的过程，实质上是获取了一个 MapperProxy 的代理对象。 MapperProxy 中有 sqlSession、mapperInterface、methodCache。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg35tbjh37j30r004m78r.jpg" alt="image-20200624101547188"></p>
<p>先记下这个问题:在代理类中为什么要持有一个 SqlSession?</p>
<h2 id="四、执行-SQL"><a href="#四、执行-SQL" class="headerlink" title="四、执行 SQL"></a>四、执行 SQL</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Blog blog = mapper.selectBlog(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>由于所有的 Mapper 都是 MapperProxy 代理对象，所以任意的方法都是执行 MapperProxy 的 invoke()方法。</p>
<p>问题 1:我们引入 MapperProxy 为了解决什么问题?硬编码和编译时检查问题。它 需要做的事情是:根据方法查找 Statement ID 的问题。</p>
<p>问题 2:这里没有实现类，进入到 invoke 方法的时候做了什么事情?它是怎么找到 我们要执行的 SQL 的?</p>
<p>我们看一下 invoke()方法:</p>
<h3 id="1、MapperProxy-invoke"><a href="#1、MapperProxy-invoke" class="headerlink" title="1、MapperProxy.invoke()"></a>1、MapperProxy.invoke()</h3><p>1)首先判断是否需要去执行 SQL，还是直接执行方法。<br> Object 本身的方法和 Java 8 中接口的默认方法不需要去执行 SQL。 思考:isDefaultMethod 判断的是什么?写一个什么方法，它会走到这里? 这个是 Java 8 接口中默认方法的示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">default</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"GP"</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2)获取缓存<br> 这里加入缓存是为了提升 MapperMethod 的获取速度:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取缓存，保存了方法签名和接口方法的关系</span></span><br><span class="line"><span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br></pre></td></tr></table></figure>

<p>Map 的 computeIfAbsent()方法:只有 key 不存在或者 value 为 null 的时候才调用 mappingFunction()。</p>
<h3 id="2、MapperMethod-execute"><a href="#2、MapperMethod-execute" class="headerlink" title="2、MapperMethod.execute()"></a>2、MapperMethod.execute()</h3><p>接下来又调用了 mapperMethod 的 execute 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mapperMethod.execute(sqlSession, args);</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg367vzctdj30jk0cyn5z.jpg" alt="image-20200624102947618"></p>
<p>apperMethod 里面主要有两个属性，一个是 SqlCommand，一个是 MethodSignature，这两个都是 MapperMethod 的内部类。</p>
<p>另外定义了多个 execute()方法。</p>
<p>在这一步，根据不同的 type 和返回类型:<br>调用 convertArgsToSqlCommandParam()将参数转换为 SQL 的参数。<br>调用 sqlSession 的 insert()、update()、delete()、selectOne ()方法，我们以查询</p>
<p>为例，会走到 selectOne()方法。</p>
<h3 id="3、DefaultSqlSession-selectOne"><a href="#3、DefaultSqlSession-selectOne" class="headerlink" title="3、DefaultSqlSession.selectOne()"></a>3、DefaultSqlSession.selectOne()</h3><p>selectOne()最终也是调用了 selectList()。</p>
<p>在 SelectList()中，我们先根据 command name(Statement ID)从 Configuration 中拿到 MappedStatement，这个 ms 上面有我们在 xml 中配置的所有属性，包括 id、 statementType、sqlSource、useCache、入参、出参等等。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg369bsc1fj30hk0foqbg.jpg" alt="image-20200624103110454"></p>
<p>然后执行了 Executor 的 query()方法。<br>前面我们说到了 Executor 有三种基本类型，同学们还记得是哪几种么? SIMPLE/REUSE/BATCH，还有一种包装类型，CachingExecutor。 那么在这里到底会选择哪一种执行器呢?<br>我们要回过头去看看 DefaultSqlSession 在初始化的时候是怎么赋值的，这个就是我们的会话创建过程。</p>
<p>如果启用了二级缓存，就会先调用 CachingExecutor 的 query()方法，里面有缓存相关的操作，然后才是再调用基本类型的执行器，比如默认的 SimpleExecutor。</p>
<p>在没有开启二级缓存的情况下，先会走到 BaseExecutor 的 query()方法(否则会先 走到 CachingExecutor)。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg36abstc8j30rq08878a.jpg" alt="image-20200624103208406"></p>
<h3 id="4、BaseExecutor-query"><a href="#4、BaseExecutor-query" class="headerlink" title="4、BaseExecutor.query()"></a>4、BaseExecutor.query()</h3><h4 id="1-创建-CacheKey"><a href="#1-创建-CacheKey" class="headerlink" title="1)创建 CacheKey"></a>1)创建 CacheKey</h4><p>从 Configuration 中获取 MappedStatement， 然后从 BoundSql 中获取 SQL 信 息，创建 CacheKey。这个 CacheKey 就是缓存的 Key。</p>
<p>然后再调用另一个 query()方法。</p>
<h4 id="2-清空本地缓存"><a href="#2-清空本地缓存" class="headerlink" title="2)清空本地缓存"></a>2)清空本地缓存</h4><p>queryStack 用于记录查询栈，防止递归查询重复处理缓存。flushCache=true 的时候，会先清理本地缓存(一级缓存):clearLocalCache();</p>
<p>如果没有缓存，会从数据库查询:queryFromDatabase() 如果 LocalCacheScope == STATEMENT，会清理本地缓存。</p>
<h4 id="3-从数据库查询"><a href="#3-从数据库查询" class="headerlink" title="3)从数据库查询"></a>3)从数据库查询</h4><p>a)缓存 先在缓存用占位符占位。执行查询后，移除占位符，放入数据。</p>
<p>b)查询执行 Executor 的 doQuery();默认是 SimpleExecutor。</p>
<h3 id="5、SimpleExecutor-doQuery"><a href="#5、SimpleExecutor-doQuery" class="headerlink" title="5、SimpleExecutor.doQuery()"></a>5、SimpleExecutor.doQuery()</h3><h4 id="1-创建-StatementHandler"><a href="#1-创建-StatementHandler" class="headerlink" title="1)创建 StatementHandler"></a>1)创建 StatementHandler</h4><p>在 configuration.newStatementHandler()中，new 一个 StatementHandler，先 得到 RoutingStatementHandler。</p>
<p>RoutingStatementHandler 里面没有任何的实现，是用来创建基本的 StatementHandler 的。这里会根据 MappedStatement 里面的 statementType 决定 StatementHandler 的 类 型 。 默 认 是 PREPARED ( STATEMENT 、 PREPARED 、 CALLABLE)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (ms.getStatementType()) &#123; </span><br><span class="line">  <span class="keyword">case</span> STATEMENT:</span><br><span class="line">    delegate = <span class="keyword">new</span> SimpleStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> PREPARED:</span><br><span class="line">    delegate = <span class="keyword">new</span> PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> CALLABLE:</span><br><span class="line">    delegate = <span class="keyword">new</span> CallableStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Unknown statement type: "</span> + ms.getStatementType()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StatementHandler 里面包含了处理参数的 ParameterHandler 和处理结果集的 ResultSetHandler。</p>
<p>这两个对象都是在上面 new 的时候创建的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.parameterHandler = configuration.newParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class="line"><span class="keyword">this</span>.resultSetHandler = configuration.newResultSetHandler(executor, mappedStatement, rowBounds,parameterHandler, resultHandler, boundSql);</span><br></pre></td></tr></table></figure>

<p>这三个对象都是可以被插件拦截的四大对象之一，所以在创建之后都要用拦截器进 行包装的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);</span><br></pre></td></tr></table></figure>

<p>PS:四大对象还有一个是谁?在什么时候创建的?(Executor)</p>
<h4 id="2-创建-Statement"><a href="#2-创建-Statement" class="headerlink" title="2)创建 Statement"></a>2)创建 Statement</h4><p>用 new 出来的 StatementHandler 创建 Statement 对象——prepareStatement() 方法对语句进行预编译，处理参数。</p>
<p>handler.parameterize(stmt) ;</p>
<h4 id="3-执行的-StatementHandler-的-query-方法"><a href="#3-执行的-StatementHandler-的-query-方法" class="headerlink" title="3)执行的 StatementHandler 的 query()方法"></a>3)执行的 StatementHandler 的 query()方法</h4><p>RoutingStatementHandler 的 query()方法。<br>delegate 委派，最终执行 PreparedStatementHandler 的 query()方法。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg36f8f6e5j30ei02y75v.jpg" alt="image-20200624103651041"></p>
<h4 id="4-执行-PreparedStatement-的-execute-方法"><a href="#4-执行-PreparedStatement-的-execute-方法" class="headerlink" title="4)执行 PreparedStatement 的 execute()方法"></a>4)执行 PreparedStatement 的 execute()方法</h4><p>后面就是 JDBC 包中的 PreparedStatement 的执行了。</p>
<h4 id="5-ResultSetHandler-处理结果集"><a href="#5-ResultSetHandler-处理结果集" class="headerlink" title="5)ResultSetHandler 处理结果集"></a>5)ResultSetHandler 处理结果集</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> resultSetHandler.handleResultSets(ps);</span><br></pre></td></tr></table></figure>

<p>问题:怎么把 ResultSet 转换成 List<Object>?</p>
<p>ResultSetHandler 只有一个实现类:DefaultResultSetHandler。也就是执行 DefaultResultSetHandler 的 handleResultSets ()方法。</p>
<p>首先我们会先拿到第一个结果集，如果没有配置一个查询返回多个结果集的情况， 一般只有一个结果集。如果下面的这个 while 循环我们也不用，就是执行一次。</p>
<p>然后会调用 handleResultSet()方法。</p>
<p>【作业】总结一下，MyBatis 里面用到了哪些设计模式?</p>
]]></content>
      <categories>
        <category>mybatis源码解读</category>
      </categories>
      <tags>
        <tag>mybatis源码解读</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis问题总结</title>
    <url>/2020/06/24/mybatis%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>spring源码问题</title>
    <url>/2020/06/21/spring%E6%BA%90%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="spring源码问题"><a href="#spring源码问题" class="headerlink" title="spring源码问题"></a>spring源码问题</h1><h2 id="1、如何统一配置文件的标准？"><a href="#1、如何统一配置文件的标准？" class="headerlink" title="1、如何统一配置文件的标准？"></a>1、如何统一配置文件的标准？</h2><p>BeanDefinition</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//SpringIOC容器管理了我们定义的各种Bean对象及其相互的关系，Bean对象在Spring实现中是以BeanDefinition来描述的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinition</span> <span class="keyword">extends</span> <span class="title">AttributeAccessor</span>, <span class="title">BeanMetadataElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Scope identifier for the standard singleton scope: "singleton".</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Note that extended bean factories might support further scopes.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setScope</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String SCOPE_SINGLETON = ConfigurableBeanFactory.SCOPE_SINGLETON;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Scope identifier for the standard prototype scope: "prototype".</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Note that extended bean factories might support further scopes.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setScope</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   String SCOPE_PROTOTYPE = ConfigurableBeanFactory.SCOPE_PROTOTYPE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Role hint indicating that a &#123;<span class="doctag">@code</span> BeanDefinition&#125; is a major part</span></span><br><span class="line"><span class="comment">    * of the application. Typically corresponds to a user-defined bean.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">int</span> ROLE_APPLICATION = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Role hint indicating that a &#123;<span class="doctag">@code</span> BeanDefinition&#125; is a supporting</span></span><br><span class="line"><span class="comment">    * part of some larger configuration, typically an outer</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.parsing.ComponentDefinition&#125;.</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> SUPPORT&#125; beans are considered important enough to be aware</span></span><br><span class="line"><span class="comment">    * of when looking more closely at a particular</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.parsing.ComponentDefinition&#125;,</span></span><br><span class="line"><span class="comment">    * but not when looking at the overall configuration of an application.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">int</span> ROLE_SUPPORT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Role hint indicating that a &#123;<span class="doctag">@code</span> BeanDefinition&#125; is providing an</span></span><br><span class="line"><span class="comment">    * entirely background role and has no relevance to the end-user. This hint is</span></span><br><span class="line"><span class="comment">    * used when registering beans that are completely part of the internal workings</span></span><br><span class="line"><span class="comment">    * of a &#123;<span class="doctag">@link</span> org.springframework.beans.factory.parsing.ComponentDefinition&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">int</span> ROLE_INFRASTRUCTURE = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Modifiable attributes</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the name of the parent definition of this bean definition, if any.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setParentName</span><span class="params">(@Nullable String parentName)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the name of the parent definition of this bean definition, if any.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">String <span class="title">getParentName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Specify the bean class name of this bean definition.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The class name can be modified during bean factory post-processing,</span></span><br><span class="line"><span class="comment">    * typically replacing the original class name with a parsed variant of it.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setParentName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setFactoryBeanName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setFactoryMethodName</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setBeanClassName</span><span class="params">(@Nullable String beanClassName)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the current bean class name of this bean definition.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Note that this does not have to be the actual class name used at runtime, in</span></span><br><span class="line"><span class="comment">    * case of a child definition overriding/inheriting the class name from its parent.</span></span><br><span class="line"><span class="comment">    * Also, this may just be the class that a factory method is called on, or it may</span></span><br><span class="line"><span class="comment">    * even be empty in case of a factory bean reference that a method is called on.</span></span><br><span class="line"><span class="comment">    * Hence, do &lt;i&gt;not&lt;/i&gt; consider this to be the definitive bean type at runtime but</span></span><br><span class="line"><span class="comment">    * rather only use it for parsing purposes at the individual bean definition level.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getParentName()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getFactoryBeanName()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getFactoryMethodName()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">String <span class="title">getBeanClassName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Override the target scope of this bean, specifying a new scope name.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #SCOPE_SINGLETON</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #SCOPE_PROTOTYPE</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setScope</span><span class="params">(@Nullable String scope)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the name of the current target scope for this bean,</span></span><br><span class="line"><span class="comment">    * or &#123;<span class="doctag">@code</span> null&#125; if not known yet.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">String <span class="title">getScope</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set whether this bean should be lazily initialized.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If &#123;<span class="doctag">@code</span> false&#125;, the bean will get instantiated on startup by bean</span></span><br><span class="line"><span class="comment">    * factories that perform eager initialization of singletons.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setLazyInit</span><span class="params">(<span class="keyword">boolean</span> lazyInit)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return whether this bean should be lazily initialized, i.e. not</span></span><br><span class="line"><span class="comment">    * eagerly instantiated on startup. Only applicable to a singleton bean.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isLazyInit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the names of the beans that this bean depends on being initialized.</span></span><br><span class="line"><span class="comment">    * The bean factory will guarantee that these beans get initialized first.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setDependsOn</span><span class="params">(@Nullable String... dependsOn)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the bean names that this bean depends on.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   String[] getDependsOn();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set whether this bean is a candidate for getting autowired into some other bean.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Note that this flag is designed to only affect type-based autowiring.</span></span><br><span class="line"><span class="comment">    * It does not affect explicit references by name, which will get resolved even</span></span><br><span class="line"><span class="comment">    * if the specified bean is not marked as an autowire candidate. As a consequence,</span></span><br><span class="line"><span class="comment">    * autowiring by name will nevertheless inject a bean if the name matches.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setAutowireCandidate</span><span class="params">(<span class="keyword">boolean</span> autowireCandidate)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return whether this bean is a candidate for getting autowired into some other bean.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isAutowireCandidate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set whether this bean is a primary autowire candidate.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If this value is &#123;<span class="doctag">@code</span> true&#125; for exactly one bean among multiple</span></span><br><span class="line"><span class="comment">    * matching candidates, it will serve as a tie-breaker.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setPrimary</span><span class="params">(<span class="keyword">boolean</span> primary)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return whether this bean is a primary autowire candidate.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isPrimary</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Specify the factory bean to use, if any.</span></span><br><span class="line"><span class="comment">    * This the name of the bean to call the specified factory method on.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setFactoryMethodName</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setFactoryBeanName</span><span class="params">(@Nullable String factoryBeanName)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the factory bean name, if any.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">String <span class="title">getFactoryBeanName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Specify a factory method, if any. This method will be invoked with</span></span><br><span class="line"><span class="comment">    * constructor arguments, or with no arguments if none are specified.</span></span><br><span class="line"><span class="comment">    * The method will be invoked on the specified factory bean, if any,</span></span><br><span class="line"><span class="comment">    * or otherwise as a static method on the local bean class.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setFactoryBeanName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setBeanClassName</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setFactoryMethodName</span><span class="params">(@Nullable String factoryMethodName)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a factory method, if any.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">String <span class="title">getFactoryMethodName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the constructor argument values for this bean.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The returned instance can be modified during bean factory post-processing.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the ConstructorArgumentValues object (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">ConstructorArgumentValues <span class="title">getConstructorArgumentValues</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return if there are constructor argument values defined for this bean.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.0.2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">hasConstructorArgumentValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !getConstructorArgumentValues().isEmpty();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the property values to be applied to a new instance of the bean.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The returned instance can be modified during bean factory post-processing.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the MutablePropertyValues object (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">MutablePropertyValues <span class="title">getPropertyValues</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return if there are property values values defined for this bean.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.0.2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">hasPropertyValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !getPropertyValues().isEmpty();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Read-only attributes</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return whether this a &lt;b&gt;Singleton&lt;/b&gt;, with a single, shared instance</span></span><br><span class="line"><span class="comment">    * returned on all calls.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #SCOPE_SINGLETON</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return whether this a &lt;b&gt;Prototype&lt;/b&gt;, with an independent instance</span></span><br><span class="line"><span class="comment">    * returned for each call.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #SCOPE_PROTOTYPE</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return whether this bean is "abstract", that is, not meant to be instantiated.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isAbstract</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Get the role hint for this &#123;<span class="doctag">@code</span> BeanDefinition&#125;. The role hint</span></span><br><span class="line"><span class="comment">    * provides the frameworks as well as tools with an indication of</span></span><br><span class="line"><span class="comment">    * the role and importance of a particular &#123;<span class="doctag">@code</span> BeanDefinition&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #ROLE_APPLICATION</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #ROLE_SUPPORT</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #ROLE_INFRASTRUCTURE</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getRole</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a human-readable description of this bean definition.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a description of the resource that this bean definition</span></span><br><span class="line"><span class="comment">    * came from (for the purpose of showing context in case of errors).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">String <span class="title">getResourceDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the originating BeanDefinition, or &#123;<span class="doctag">@code</span> null&#125; if none.</span></span><br><span class="line"><span class="comment">    * Allows for retrieving the decorated bean definition, if any.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Note that this method returns the immediate originator. Iterate through the</span></span><br><span class="line"><span class="comment">    * originator chain to find the original BeanDefinition as defined by the user.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">BeanDefinition <span class="title">getOriginatingBeanDefinition</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2、IOC容器最顶层接口"><a href="#2、IOC容器最顶层接口" class="headerlink" title="2、IOC容器最顶层接口"></a>2、IOC容器最顶层接口</h2><p>BeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在BeanFactory里只对IOC容器的基本行为作了定义，根本不关心你的Bean是如何定义怎样加载的。</span></span><br><span class="line"><span class="comment">//正如我们只关心工厂里得到什么的产品对象，至于工厂是怎么生产这些对象的，这个基本的接口不关心。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Used to dereference a &#123;<span class="doctag">@link</span> FactoryBean&#125; instance and distinguish it from</span></span><br><span class="line"><span class="comment">    * beans &lt;i&gt;created&lt;/i&gt; by the FactoryBean. For example, if the bean named</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> myJndiObject&#125; is a FactoryBean, getting &#123;<span class="doctag">@code</span> &amp;myJndiObject&#125;</span></span><br><span class="line"><span class="comment">    * will return the factory, not the instance returned by the factory.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//对FactoryBean的转义定义，因为如果使用bean的名字检索FactoryBean得到的对象是工厂生成的对象，</span></span><br><span class="line">   <span class="comment">//如果需要得到工厂本身，需要转义</span></span><br><span class="line">   String FACTORY_BEAN_PREFIX = <span class="string">"&amp;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method allows a Spring BeanFactory to be used as a replacement for the</span></span><br><span class="line"><span class="comment">    * Singleton or Prototype design pattern. Callers may retain references to</span></span><br><span class="line"><span class="comment">    * returned objects in the case of Singleton beans.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean definition</span></span><br><span class="line"><span class="comment">    * with the specified name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be obtained</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//根据bean的名字，获取在IOC容器中得到bean实例</span></span><br><span class="line">   <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Behaves the same as &#123;<span class="doctag">@link</span> #getBean(String)&#125;, but provides a measure of type</span></span><br><span class="line"><span class="comment">    * safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the</span></span><br><span class="line"><span class="comment">    * required type. This means that ClassCastException can't be thrown on casting</span></span><br><span class="line"><span class="comment">    * the result correctly, as can happen with &#123;<span class="doctag">@link</span> #getBean(String)&#125;.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requiredType type the bean must match. Can be an interface or superclass</span></span><br><span class="line"><span class="comment">    * of the actual class, or &#123;<span class="doctag">@code</span> null&#125; for any match. For example, if the value</span></span><br><span class="line"><span class="comment">    * is &#123;<span class="doctag">@code</span> Object.class&#125;, this method will succeed whatever the class of the</span></span><br><span class="line"><span class="comment">    * returned instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no such bean definition</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeanNotOfRequiredTypeException if the bean is not of the required type</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。</span></span><br><span class="line">   &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, @Nullable Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Allows for specifying explicit constructor arguments / factory method arguments,</span></span><br><span class="line"><span class="comment">    * overriding the specified default arguments (if any) in the bean definition.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span></span><br><span class="line"><span class="comment">    * (only applied when creating a new instance as opposed to retrieving an existing one)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no such bean definition</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeanDefinitionStoreException if arguments have been given but</span></span><br><span class="line"><span class="comment">    * the affected bean isn't a prototype</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the bean instance that uniquely matches the given object type, if any.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method goes into &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; by-type lookup territory</span></span><br><span class="line"><span class="comment">    * but may also be translated into a conventional by-name lookup based on the name</span></span><br><span class="line"><span class="comment">    * of the given type. For more extensive retrieval operations across sets of beans,</span></span><br><span class="line"><span class="comment">    * use &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; and/or &#123;<span class="doctag">@link</span> BeanFactoryUtils&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requiredType type the bean must match; can be an interface or superclass.</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> null&#125; is disallowed.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the single bean matching the required type</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if no bean of the given type was found</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoUniqueBeanDefinitionException if more than one bean of the given type was found</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> ListableBeanFactory</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Allows for specifying explicit constructor arguments / factory method arguments,</span></span><br><span class="line"><span class="comment">    * overriding the specified default arguments (if any) in the bean definition.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method goes into &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; by-type lookup territory</span></span><br><span class="line"><span class="comment">    * but may also be translated into a conventional by-name lookup based on the name</span></span><br><span class="line"><span class="comment">    * of the given type. For more extensive retrieval operations across sets of beans,</span></span><br><span class="line"><span class="comment">    * use &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; and/or &#123;<span class="doctag">@link</span> BeanFactoryUtils&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requiredType type the bean must match; can be an interface or superclass.</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> null&#125; is disallowed.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span></span><br><span class="line"><span class="comment">    * (only applied when creating a new instance as opposed to retrieving an existing one)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no such bean definition</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeanDefinitionStoreException if arguments have been given but</span></span><br><span class="line"><span class="comment">    * the affected bean isn't a prototype</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 4.1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Does this bean factory contain a bean definition or externally registered singleton</span></span><br><span class="line"><span class="comment">    * instance with the given name?</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If the given name is an alias, it will be translated back to the corresponding</span></span><br><span class="line"><span class="comment">    * canonical bean name.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If this factory is hierarchical, will ask any parent factory if the bean cannot</span></span><br><span class="line"><span class="comment">    * be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If a bean definition or singleton instance matching the given name is found,</span></span><br><span class="line"><span class="comment">    * this method will return &#123;<span class="doctag">@code</span> true&#125; whether the named bean definition is concrete</span></span><br><span class="line"><span class="comment">    * or abstract, lazy or eager, in scope or not. Therefore, note that a &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">    * return value from this method does not necessarily indicate that &#123;<span class="doctag">@link</span> #getBean&#125;</span></span><br><span class="line"><span class="comment">    * will be able to obtain an instance for the same name.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether a bean with the given name is present</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//提供对bean的检索，看看是否在IOC容器有这个名字的bean</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Is this bean a shared singleton? That is, will &#123;<span class="doctag">@link</span> #getBean&#125; always</span></span><br><span class="line"><span class="comment">    * return the same instance?</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Note: This method returning &#123;<span class="doctag">@code</span> false&#125; does not clearly indicate</span></span><br><span class="line"><span class="comment">    * independent instances. It indicates non-singleton instances, which may correspond</span></span><br><span class="line"><span class="comment">    * to a scoped bean as well. Use the &#123;<span class="doctag">@link</span> #isPrototype&#125; operation to explicitly</span></span><br><span class="line"><span class="comment">    * check for independent instances.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether this bean corresponds to a singleton instance</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #isPrototype</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//根据bean名字得到bean实例，并同时判断这个bean是不是单例</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Is this bean a prototype? That is, will &#123;<span class="doctag">@link</span> #getBean&#125; always return</span></span><br><span class="line"><span class="comment">    * independent instances?</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Note: This method returning &#123;<span class="doctag">@code</span> false&#125; does not clearly indicate</span></span><br><span class="line"><span class="comment">    * a singleton object. It indicates non-independent instances, which may correspond</span></span><br><span class="line"><span class="comment">    * to a scoped bean as well. Use the &#123;<span class="doctag">@link</span> #isSingleton&#125; operation to explicitly</span></span><br><span class="line"><span class="comment">    * check for a shared singleton instance.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether this bean will always deliver independent instances</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2.0.3</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #isSingleton</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Check whether the bean with the given name matches the specified type.</span></span><br><span class="line"><span class="comment">    * More specifically, check whether a &#123;<span class="doctag">@link</span> #getBean&#125; call for the given name</span></span><br><span class="line"><span class="comment">    * would return an object that is assignable to the specified target type.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> typeToMatch the type to match against (as a &#123;<span class="doctag">@code</span> ResolvableType&#125;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the bean type matches,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> false&#125; if it doesn't match or cannot be determined yet</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getType</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, ResolvableType typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Check whether the bean with the given name matches the specified type.</span></span><br><span class="line"><span class="comment">    * More specifically, check whether a &#123;<span class="doctag">@link</span> #getBean&#125; call for the given name</span></span><br><span class="line"><span class="comment">    * would return an object that is assignable to the specified target type.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> typeToMatch the type to match against (as a &#123;<span class="doctag">@code</span> Class&#125;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the bean type matches,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> false&#125; if it doesn't match or cannot be determined yet</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2.0.1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getType</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, @Nullable Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Determine the type of the bean with the given name. More specifically,</span></span><br><span class="line"><span class="comment">    * determine the type of object that &#123;<span class="doctag">@link</span> #getBean&#125; would return for the given name.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;For a &#123;<span class="doctag">@link</span> FactoryBean&#125;, return the type of object that the FactoryBean creates,</span></span><br><span class="line"><span class="comment">    * as exposed by &#123;<span class="doctag">@link</span> FactoryBean#getObjectType()&#125;.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the type of the bean, or &#123;<span class="doctag">@code</span> null&#125; if not determinable</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.1.2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #isTypeMatch</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//得到bean实例的Class类型</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the aliases for the given bean name, if any.</span></span><br><span class="line"><span class="comment">    * All of those aliases point to the same bean when used in a &#123;<span class="doctag">@link</span> #getBean&#125; call.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If the given name is an alias, the corresponding original bean name</span></span><br><span class="line"><span class="comment">    * and other aliases (if any) will be returned, with the original bean name</span></span><br><span class="line"><span class="comment">    * being the first element in the array.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the bean name to check for aliases</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the aliases, or an empty array if none</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//得到bean的别名，如果根据别名检索，那么其原名也会被检索出来</span></span><br><span class="line">   String[] getAliases(String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring源码解读</category>
      </categories>
      <tags>
        <tag>spring源码问题</tag>
      </tags>
  </entry>
  <entry>
    <title>乐观锁、悲观锁、自旋锁</title>
    <url>/2020/06/17/%E4%B9%90%E8%A7%82%E9%94%81%E3%80%81%E6%82%B2%E8%A7%82%E9%94%81%E3%80%81%E8%87%AA%E6%97%8B%E9%94%81/</url>
    <content><![CDATA[<h1 id="乐观锁、悲观锁、自旋锁"><a href="#乐观锁、悲观锁、自旋锁" class="headerlink" title="乐观锁、悲观锁、自旋锁"></a>乐观锁、悲观锁、自旋锁</h1><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a><strong>乐观锁</strong></h2><p>乐观锁是一种乐观思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。</p>
<p>java 中的乐观锁基本都是通过 CAS 操作实现的，CAS 是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。</p>
<h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a><strong>悲观锁</strong></h2><p>悲观锁是就是悲观思想，即认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会 block 直到拿到锁。</p>
<p>java中的悲观锁就是Synchronized,AQS框架下的锁则是先尝试cas乐观锁去获取锁，获取不到，才会转换为悲观锁，如 RetreenLock。</p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a><strong>自旋锁</strong></h2><p>自旋锁原理非常简单，如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗。</p>
<p>线程自旋是需要消耗 cup 的，说白了就是让 cup 在做无用功，如果一直获取不到锁，那线程也不能一直占用 cup 自旋做无用功，所以需要设定一个自旋等待的最大时间。</p>
<p>如果持有锁的线程执行的时间超过自旋等待的最大时间扔没有释放锁，就会导致其它争用锁的线程在最大等待时间内还是获取不到锁，这时争用线程会停止自旋进入阻塞状态。</p>
<h3 id="自旋锁的优缺点"><a href="#自旋锁的优缺点" class="headerlink" title="自旋锁的优缺点"></a><strong>自旋锁的优缺点</strong></h3><p>自旋锁尽可能的减少线程的阻塞，这对于锁的竞争不激烈，且占用锁时间非常短的代码块来说性能能大幅度的提升，因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗，这些操作会导致线程发生两次上下文切换！</p>
<p>但是如果锁的竞争激烈，或者持有锁的线程需要长时间占用锁执行同步块，这时候就不适合使用自旋锁了，因为自旋锁在获取锁前一直都是占用 cpu 做无用功，占着 XX 不 XX，同时有大量线程在竞争一个锁，会导致获取锁的时间很长，线程自旋的消耗大于线程阻塞挂起操作的消耗，其它需要 cup 的线程又不能获取到 cpu，造成 cpu 的浪费。所以这种情况下我们要关闭自旋锁；自旋锁时间阈值（1.6 引入了适应性自旋锁）自旋锁的目的是为了占着 CPU 的资源不释放，等到获取到锁立即进行处理。但是如何去选择自旋的执行时间呢？如果自旋执行时间太长，会有大量的线程处于自旋状态占用 CPU 资源，进而会影响整体系统的性能。因此自旋的周期选的额外重要！</p>
<p>JVM 对于自旋周期的选择，jdk1.5 这个限度是一定的写死的，在 1.6 引入了适应性自旋锁，适应性自旋锁意味着自旋的时间不在是固定的了，而是由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定，基本认为一个线程上下文切换的时间是最佳的一个时间，同时 JVM 还针对当前 CPU 的负荷情况做了较多的优化，如果平均负载小于 CPUs 则一直自旋，如果有超过(CPUs/2)个线程正在自旋，则后来线程直接阻塞，如果正在自旋的线程发现 Owner 发生了变化则延迟自旋时间（自旋计数）或进入阻塞，如果 CPU 处于节电模式则停止自旋，自旋时间的最坏情况是 CPU的存储延迟（CPU A 存储了一个数据，到 CPU B 得知这个数据直接的时间差），自旋时会适当放弃线程优先级之间的差异。</p>
<p><strong>自旋锁的开启</strong></p>
<p>JDK1.6 中-XX:+UseSpinning 开启；</p>
<p>-XX:PreBlockSpin=10 为自旋次数；</p>
<p>JDK1.7 后，去掉此参数，由 jvm 控制；</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2020/06/20/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="18013639d5d3a0c12b41d345eb7737851450ed4bd8e20605ee23196375f034d5">daf65b6296bf51695c9d442396077baee3f0609447dc0007c815328c5776ecd1de62b87958cfce1def09c44b18554b7757739ce42ee8c02824d1bf276aaf9ef23f64870602f490b595fbe1b747504989842fd3f1bc8fe9d84a3a715a8e9d83b3251edfc2ed04cc067fbe74a0f5f0aecc023070d3c2888f2e9ad57814c2a6c1e1df73f7869a65a1a255541972c5e626d8b3e268f691ecd37129c5914cfb1e098674ad16ea38fea697b6b767514abd1c1639cffe31a99c579d239dd9d33145273810abbaa11dd5171c24a9328a3ba2e1d36a72fe808e9b5e70dbc0d7541337e95f0b3fdb88270cec9ae3f663ef87f4a64796f3565e0ea7175d09a04593100c1871fe8b20381fe73bde95d3ffc7a5abab020e9e9ff44c3b2d32e672e67b9c873f1100737c6c81ac66c3799787c6b1787d11f75be950f9f070cabcdda242041efcc84096113d52cec5112bb7bca43d18fb6e90f6f6a4f2b79b36ed2cc690d7d604e9320dc5bd545995d11141cdca586a925c26b641dde9be348925b3b068f63cac2255236b599ccd95d3bbde78a449da9d660064907defdf5c6e1c28579bedc728330ec95deef54ac4861b2b58b14a2c953839457592e8cf95d2914569c8be942d2701d17b27b0ca41b10aa7b11d9d38f99788e43bfa148cd32934d1c4efaa21f37b84d7b2dc0564ae6714396073bc01442b1d0e06aa7ecc8cdf70b974014c1678f6b37a55f9443580ad7cbfae7e3ee3e77eef52fbedd8de1988e1b01d81916b7693e17178a0164b5f159910dcaa1d5c435bbd2471fe057f30a5c63166a8dfdc9dc0144c8e2eb7465878de49593c03fe637dcc3d02c200f2a9bbe85d74ec8ff937e4ff03e8a38da0f2a48cc7812339a956168825d48d1c7ceb45821652a0aaef460d746986be2e77fb4a4e50b5b1a8103597decf6e1060b1e112fd296fb60d3b6958ee819da74b32761e6a8bff2dbe0e1b08837ae60b9569054d07dde41db6e2ad19a791a5876e0a9a6748d5b0816e0ac44aac032206a5e774118abf5a5d9f657d236bf8d0900bf0741b329c308b1b436785ec3d2cec78f4a2046c51db4c32840ad1aaea0ba988919a281ce9dc701e7d8b4e835fbc62c57ca44bbb1d9b270a05579c654a5af53b03a28ebfb487ad5e8888955b970828b42054184f72ecc1d09d163596959bff9d1b6114f805f7278995da6cf5de604d2bd37a641b0ee5171485bc8a103558ba0ad3e894b81c58e82adb72e131a41b57893aa1739669c277e4c4cacb2f1c15444d7158de1ef43499d4eb11f42e9c4027ec41a023f5a64f901477690857b86f16c38d1432a5c7ccf8f40563833bbe9ec31032ea1f44b5754f6bd11ec2cac9023b7ece3e7bdb1a448397fbec636f8cbb6c672642c01f81d4b1f623255a372003cf67120062c78e969602b4e764c69c0cfbb9e84f436830efac24da2bd7eb5d5967a12d25bf79939ae4d95cedf1dbdbc587cf518b28f6f55f9c89d5f8d9bf523dbf4d73e94fa30a6f82f7d47f5601b62e5e02719cfcef34900d2079e5a4dba9533036719fb0692e45d54641f552401147bd5248a5af21117b424aa83947ba836bb9853a15e6658ee7d2639217fddac39e8f5d3af8961bdd9de178846b53ff2205f22533dbe9eaf860e9ce3540427909ea38cb5635ee499318d4a78804a455d700e458e74bfad57e53a1aeff2387aa3e3dafb53104ffd2c4ad80f05ee4dc3768ce94e66968f04f413e0ad8e5f9b79e26d0b44323e420f463080ab2a412e48cfca16898eaf8c1e9f3e65904a3bce46540fac36e91e74559fb477306202a8144b4e4f1fb40b22ff371835abe2cbfad8309b6646e3354b3a98066584f616fdb76e7d42157a81b8bad0c2a96398bf1baeec1766b12b55f23ced60864888353dcd17d65bcac2d632343541bd87dd9be20c16545a573e8859d734d4ba70f1cd9cd204323d7c00f181ec3de9cd8e3879a2957f52b100a8435b38fda4450e616d82a52a8cf020fba7ae76d558dae702d49b6955dee2b364ffc3bebac058944b262b99c0a73f17aed2bb7c6ca9a58db400b51f569460e71eb3aab280c04d2e737afce6077a80b822655b330a1d52b8da51603d0831d9390c8ef744e0b4b179c5db4063ca55f420819717cecb5e74fb2d240e189b26ed3c3d33da5895e5dbbc1a25d4621347939f372f470a6f2d9858e48720a7bff8440621e6b04a18f0dc3547dd7b8d6f5442b075acdc00d6368c03dbb6c22cc76572414920eac6af84c1275a7630151d8712a44b306831f26bf1aaa551bace1a0b76a052cd9132c36a4ebf0f40ef5b4d229779ff93b41be9a47738c863509f3603bb34191c1ffa9200958f32225fa490dc8d1a11f775d6c8d6bd116e9b0b5374632012e090e22c2e59c2736f4af6498ea67529e085c4eb8df770344bd60fbcd35b6eaec9160b50c973a4d6a066b40ad61aed8985712f0473ed62ac8262e81a4520b1585edac023ac38221b5923b2f60910824533735fe70881f7ae390fe6e4445c1fa95b5d829d4fdbc156632a35db70752b4881921f609a46f03b6463060058ec10b5fbdf1b650fc3607d64f3620067425e1fddbcfec8c7ff18bde7f58224422dc92d48aec4a71226b2e9502c83df19c6ef96dcf70afb6cd66db306085b5a0a9df7695a52926b69f6dc3b70384eb3006ef9971979ae4f25b7390e91d822fd947819bbdb7a5c6ca8154c16fb814e368a020371489f016acd3ec45841835f8cdf8314c7a23e0b09b1380de870cb45637f206de8cf5604af574d9f476fa615d1d637f78b5d1294eacd6be0ce2e0a56ff833546b2ec839ddc5fd7e49fdc374708de085b3828d3b3d7b03c372e6f385237d0b3a372ac78efa902bfaa8447ade425888f9b9bf42c32ac2ac47cc8075cdb98f15bc41acd6232ab12b65fa3dcc59dfb0787ef2e78650f881d3eb49db438d56b41387aa9856aaf90c91aeb0983a5bb1a48a2576fcc08417dd69b3cf2121f0a05a17f46decf65a44c63e1d12ae6da93c806273ef38a4b0e4637ea27394ac079177ff78ef8d3c00d961e90e302bef973a361439dbf46774e52af78cab184155280b716cc342f3dcf416cfb69b6c5f99b5e862f227196468b04acd6c0e36ddd30c507cd4b5c59bbcdf59e111398879d55f5ed1acf26a514e57c2b1243b6bd33f87befe87a07b7d25242fa517ff811fe7fb0dd6875a5c2e2c7f1ad722d86278e09d35623f3d47123d13a072626befc0cce516b56e4fd85e0b3edd3fc86df8df2a4b80c9422ec41296465fe3bed6bd81fea048fea63006915e3f7d55bd3481d403c7648901bd58e165b1103f51b6067024fabf17b613429500adb7886b4a84467c7ec5a7854f517ea86bf23d63d777efdcb743516f1bb6265ca50db49afd2ffcd2f3578d10d0db498d2b8e961fc77d37c967d0e685c66de4952815c6cb488d3db8d98e848b821ff6df81c5921a43770e0e80aa83f6771dbf8c653ac738495ba26a257b63bedbf46af053b29c261fc0e0d718213d6685d2d3ba68c0b5dbb1e257acd47db883e8e4e1e6e3d26af7a890b25467a8a3824076ac0ab438e3f93aad096865cbd156faa07a6ebc3e8fad5c3ceffda95713bb2b63a58d8225042d3e2936f2b65dddcfbbabe0e76f2e56dc713889890c08be630ad0dcc9da183fdc222590baa4634d178f2426d068079121ca1913fee01a0b6b12570caf1e9889cbde59dcd2f0a420c4256013612031c4058b5dc41fe11c86427878768bf5c3e3f8bdaa8625a0b8c7d0a6b02dbb56bbe925a6c2a092628018fcfc48f614d3e40a678fc021e8c23b4598d27289e5491a762e74b2ee948216a0a6b7f47c3b88ec6d9ebb9c12a808d8693d977af1bbea4a93501fc1cc6920dad324ddcae97b2a19e1c1eef0eee0a511f64721858e23b438d56470769a516b6f1d1aac6808ff1b44468e4655b0d1062c2062bc0dafbb6cd7f20f3fdc618ada3834d2f71265aa2f487e9f56dbe0ca3ca2857e3333d6040deea1c51b96825ce4caa69f6dfa5dbabf5c254061ca9f99c99cf2bc21b7b1ff6a6751b4c87b013cc9cffa10a3c3123f20dc9acb25fa16f4e5020146d55451b17afa6ab553ea5c01ce44ae252b3147ce8df768277b0306969c20606cb0c31c30bf7a16ae2103b0613263a36c0521aacb403e309208200fc5e9b9b33575d67c013b2351e57257878b3ecb483cf32b6ae8fb5159d164c71c13ba840e9162685316282b96d7551bc28fe4773e28879cd4f91669440e3e806f5ae37c9e2807b7d7dafc6abebf1f900d9e04f35d4afb2f846a7c2991d58190918a7228e4b69ce6db5a25469c4d564cbf6dbb67e93946463258e603fd12be80a1d43d7082b7248c7d173b15f3603806bb119972031f9df5335cef2886e13da5a7d106096b62e6a4dc014b088e7a5954dbc04426c8c4b01d9708c824045fc69ddf9e0ec0807f872a69e875fa3568c22212c0bf6e74df68e83aaac9b3602728b4170f7805a9d1911646b0364fb8edca34de8de5f63c26dc118965110bed682cb75fe333cf45527909aab8884d083fb6e6073917be777b9ea244ca26ec5f355fda42500e0137e8e659d12a7d0d897933a86095b789daa3b562d4065dfe21f9d4682cee9c1ef5d77d1d4e30b2b8d97e3eb6c96de578bb37eb9bec8f650f8d95d68da223a7bc398f3a1546bc05720a9c66fd0a793b9eb53ee29aeda6d2b0ac595c1c0e73530748e02615d0d28995a50d869c56d12c1e627f4282f8106efda3787c1ef022b69577f5d17160508b4ed5da0445d3757ea1ddbbac16479fbfd79b47a535904a5b708565c67a11271753e2305f57ed1149a45371ae8ee74843bce4ed19dc16dccabc515e162dfdd6e0c0251369164f5d3df189f3dc5906212b1353499b6f0eb088dd954eac7f710193643856bc4e22079b7753f736070684108ea5a60bc78851124b5f9a71d91753b64c0b5ab8f6dd107f6aa18b558dc5d2fbf291baeee8d1873ae19b921860b54ea58c058f7d61b5a70b6c9aa2acb260d66722bb14211f3651eaeb3dd457a449b58157673545d0c9ac2199808f3434646d5cc2e73ed181c88d68a088ee3e2802e36d9bf2742dfbf30fb85290bc842bbe3137647fea7a12918ed482edebccefaf92c9aecb58663f8899c28dd3ba6cf294b871560337d9c7250977734787fca4e3359d5efce48bb2755558ae5f9573483f7ceff92bd9b6ed531dd618318b218752eab190815ac0aae2c8e945c03f40e4ee2fde3aa8aad7f986780a7855f6d1ff945b7e3b27a0c9231373636674f1da79807f694ea1994182c3dc7dac43c3a3ba84f246c00295baed77cb21c2eb809882ba1e50defcbf3ecc39b9e2161dd0139bb8aaf0f6fafbb3b65688625c9dbc80159b0b1f3e37bddaf5f3bc8f7ff69dc59fdbc27c9904f18b11f6a378c15981ff26ac92a9406b6579feabc1af35b2bb3f916f0d8a2c93f97914d5a2aaa1834969d4dbc6d399d2d0b7dbe2dc334c1eb03cb16c20522a75652e1b91afba7b7eb3fd1ec3571c6fbcda52bea7e5ded0404ac7e1ee0437090b6fdadc9faedb0f78fccad45a203f33c011d8b0659cc47f3b4d8f1eba47b23dcf07cf68fbca0e492d42c4b00b628b3af71a1139de897de16e286478b9ffef7eb6a43c4a4fb1b45e937ea331b9b94d95e1c3a410088bc65454e9106e4abba904f7805bce34ec95e0b39e80696cbf112dc3eed6790713a3a6f81ce7be03d1e50b551c218e6d6aadcc5aa3b84785ad064c1bd5a6d6c16c488bfd20d3d22bff194e4abd37458c05f51ba713bc653f6f2f1acf103123f2247ea1d1a9d28ab596f576337b8c11e509882de298cece92b9f183fb4937a42b1a8b5a8da6f211b7f70ff78543381b1fc7ad64ce1c742ace7c4c25070823fec1b77da64a18ab64810b939bf7bca72a85b27f0a8fa5a9b6108227b7aa9502a01fe5afd3878a35a7330bf857154263ca92aa8af9ba88f9a8ace841f27330cabdb4ac5b21508a28ca2223e7ff2cf49c254386057903a7fbaae7392df3a74ae64b0f148a1b5cf3b82ffb5b3f6e696dd30dfa071c90cfccf1b779618a81294c0f1b013fba369bb2f2d2aacddc72d2ebb7a7e80e9fe4efe8f6e557b0250b49e7ddb7e9d9946f91a3be52233f671198e212b14fecbcde14a79b08aa34a116d0eb82d53d4016e64c1a6fe67ef12cd1b0aff950333e806b89c32d9cbc50a23c471a7f1b2b021f5780e51f8eb5bf0d63ea5ca35a4ec7bb8c10d30537985c2feb229558a1e852033fb47657e466d86f8f8594bbe2492d958c1b0a756b1edb81cb76862d2b86fe2b465a8fcf79b834f42440fc497b20739758902276b0f9ee80dcb6a4ae4991426a4dde6decdce3bdcd1adb7cc2c69a0fb46febd694d5e42babd38e80072d0b413851f36604ebeace9b33a74ce8c7668077fa406adbe1806fcbbae9e890b6ea2f11916174a28ae3631287a069f01d8738635a165e237fa4cde37601270a0132d882fb702085995908b44963f2389a7a2e663e8242fed19b4db31c3d5cdc68bb5fad0491a08b4a30a99cb57e14404616bb5830edaa8d0a799462986cb4173917a28878397f194f45caa93c2e5b2cd8cfee364c46dd1483fe5ada482e9a3bf4e674a77ae7fa5aad90ee2ccd298b2914bcb7fa955bd361c5068168106c289321c41ce07939cabf7808854d986ff6fc79dcc21d0c327abe9566afd099831e9938182654cb72445954a5fba3d683891fbb558dc18a345456aeb0274d5af602ac8966793e238568cc0801a548d9e2b8a57c1d9d6607f954922598336ba1cfbdb6647cdfea2ce3572f1ce34eb06aa1fcd551a4266528f99c05f2b645e36f395131514a77a2c6df2f73ff2b74a4b75540807743f86e34516ee98c982c0e94ef5483eae234d442f50557dfa2ed67f986842a7769b013cca3f89261b2ed24e77bc8c2f331a6d125976ebe26ca9f7c0f43d3233b63e1c55ce2569ab66aa78ef50199d260f378e2f7614eb0d3194aa96d170db0b312111e6a63ce70701e178a1066acba0193bd46a1ad491e180dd0e2293679aaced4760a550b47f4375d99554b4ce44cd0bf5c172e9d62b22af9377a995ca452ae92d2e1fae66e86558ce77876dac9b99a74c0ad5bd51cb90161d55231bc499c245cb7e0bb75354904a00fa5570c720b4ef58973076efd5070e8a8458a35394a09315ef7d9cc7292a0ef8c1821ec33623d51b843115eb765490d86eac00d3d26f3f8280e41d27f04b0ff7efd5cbca2c45680a72022278cc8fcd3e9d43d016d7bad37a543dbd236be56b0f837209347a65481ac0f6d5bfa0e529a10816a1687ddb19b32a89ea5bcc905a705b26a71540a830fa010cacc2e0a76d86ba007013835edd089386abd7d35fd8a1ab80ad6ded23c51bca1291233762afebfccae8e03223bf10fce079e1811f507f19feec025298490fcc53d5d6a88fff9a951bd4c16e8efac51e73e58161aeb08ccdec28dc924b0dda5295db52b1ec1b84035527cafdd334798da6e3da2d4561365fa45322c298ef16c91edc69fed341d23401fa121c5e98e7cb479388b8d1ba3d250bbc2a1a0f363b546cde55b780feadc85b9d3a894f3219dfff7bed2aca0830170326481cbe91e862c256ca819d9ad42c8755921dc15673efcb0624bff967691b085b8fe2318452e2d7d230aefcd96435db8ba69a34c8a62c2f2f501e763073b6ef71767841d39170f36f65b7d73fd1a133b994d7176c32a95cb40565bc732bce5c77e4ae06d28b9547c9c491e9e2165f888ef5019e731668c2e575072e19dec36295faad680433514f8d5165153ca3538f57d4a62da0f204afc8a589f500bd33f5806b31104bcf6eb82c37cd3545299aa057503ec96c4332260780a3d75b6436c4b12e93fd678ff56f3cd414354a9233f12d3e40184fdf16f794e1214a740658b14d1925c4404b13253ef6bea85c815929d954821449f41b4162372fbb17faefa4d31f7da516e4650dcdefd845acb1016d05543043021be42b840859f1cfb1d78c06df99d76509999d70452595bb31f4fbcce7d78c40ea46284e8c491d3a304880dea6e624a1d1a05aec9205fb88d938488bb0284db86a2fe7a639a3b6f2ebb5bd3df14c90aa420993228b4987f7df131b3076be7f70974dcb88ed75d67ca49a3e483b90e6cd5823268c04aa107ce37b56a80a8201b8c0f79023897187613bcbeb9d4b62cc42e9817af43895bcb02c11a1f7721c2b25259cb3fe8d7bfbc4c93ab05284519d152c2997607e601d4276b3a475f5381f4405082191d27b879dd8a5feac7181300fac1369d348b5212be310538eb209efeac175f5a0ecfb69095282d600f43ec0fefd87ba26fd9b266ffd151c0fd965ae2c33907253508122dfa75fdf443aa2fcbee5e7baacad7a3159f701291ef04464d6cca3d10781d24e79ad681c7b26ab33c6d0a32c4c616d25e419947cc0c291e618c19bc7d9e27b0b433d63590fe13c4b9763484c486794aef3f11ec4d7091a4e5e7d7a24fd93556098d1d2c8cd2d0ce4ecf5a988b1daab60e8f7088e0fc4065124bb32daec805159a9ff871800bad6d6aafb38c2a9b08c8f2b71d754e799086b8d9b04e00ab6cbe27c53e747ae129cd2661147cd00a4e6b1398c284675d6a07a99f88c5999c61d8bdfe2900d4eb7af57dbf31f7d593a27c1408951d44bc03351284a8de468289207a5e764ee2e830c85b79b5d724b83ab099aa34dc6c9de48b289558725ac7cf9b2e7ee9c19a367a4f7ef8cd31dc8d5c352eb1ea535c625ecc885ad03463d16ae84a58d57021fee788b21ce5361173da22335315e50d10accd92bf8f8c9a8bae3e267461e7efe2702a205ccabd636c8d41d1e5700a583bf515a3a233c76ef13255acfd73be26ce593edbeb1f799a16a6ac43ee07159b59dfa9caa1240ca2cbcc8dfd9a3bbf242ae84fcbfa64c648af8455760b62c7e5706e7f6eef64c5f7e2249a4313f87a0e1ae220166c6c878ed4b3568c16f1c421f0ff75e59a7d68156c0b78c40b4babc3e4e048ed1a96ea67fe5e0dd97ebe5f2e277ef1c50395d2c92e2a40cae86910b736078bb51e4affa77b8d29098ee49e054e4bb690eeea49cf7b43885bff931713843a14798e25f148668f978b675b033718aff6070a60fff9a59be7983f5d910fec585f91fd13ffba17a8912bce0d7de28f8e2c0ff8dd7408610e346498caf304617a787c14ba960963413efbea6efdeb918e9190d957afe216a1cf255735ec1bfe2525829813692b4c7bf25852d5cfa71b49e350b80179fa82f82f2ce336bc719816bf36e8bf6ee937e8bac6c1ed897af1d0ebf6463cf91b4d495e2b10c8974332e42c82f37e461e07a721cd3ba6eba2e70397e006e2add429c5f54c15963217ada7ad7bc7a3133ad0502663ae8448d92b71193a5bea88ffd2a9869a754c69df18a10d34b17798718e9aeb365cb318ccdcc50b4cd982cf2d16abf94c37df3a77fc483dbd81ebfd275881cf9029b26a800bda1ab011f8b29fec44ff8a506960d39c8e1abbc9dee422f82733615d0dec001394f774b5a88c4d7f8a4bee7287b4a9beba4fe99d1d0b62062b134053055e2d8b52655ed33d3c0b44fc1124cb3e10ebd50d095bb5c25a91babcf4289fccc8edb49ad100a6818ec6c65ba7ae8fed5a3e3deba008c41ff211138b77d9a45457ef84b8936fbb55d59a5b7848cff3ec148ced76e6218c7afe9fcfb1106e6ae49bac765b16aa374b76114a523910cd59076acc3d78da6e90475bf45c23ec98986b2ac4c586e4f5eeee90158b1c60e34cac2f685b13b1b547bd240d6bd98c8820d086721d526875da7e75f9ffc2d6f92c406233ee02f32c8fbdc72be4160dade6a58f0a43e4d181d82cef321b78f4a682957b572295df38b72bd8c223b5c6d867fb3d93f5ad3488f19c0318775502184ec8eb63fa5865e49fb5e93009fb171659327a296da3c4cb9c5fa59989f1a1060d96548bcf6e1693f48d771a7d06c0991b5f780886e20c474608272ff618bd2a203de30a700d9fdcf663de7bdc7ac36e9c241ea56cf73750a92c3afec97cac80bad99dd8d542430acdfbae3b51d0d86d2912e2fd9db601dce280021c465c2bd8530e7d3c3cdbfb19af9b9c2d118405c2815c9468728ea3aaf2e2b58e4036ae6cb5cf7a374d1e40d3462b9d364daa72d1d8d228e45a701ce99ddd742867c2a121e74f10a9f8d1673814ebf97851cf1eb2816be4f74892d9dde78970a7f7bb163db08c2bdfdb71241a532839e80a7d7842a697f39475012ed0cb8082edec4b9e2e4c36d78946f55f8599ec2030679becb8d5532d864e616719105a85fa4170200a3c2e94a0c3bc5c0a25d7cf2b2193b6b4acee48461182842bcb64ae8653b8780af4aa3d7b0a957de9f4327516d4cb01a1b3e454f04deabd810cc3417a44c91aee7caecd51882b2731a9d9e5f25d2a08ffb0e02f1a7289118e0293c999886cf0425c82cc05c1af30eec0f587424c3d3ab9a5988f232ede734ae806074c31fa04ef68aeabb23843366462fb454c7cd6c2bb7e7f01420124a8be43ba1dc40119bb8aa2681ec31221e9e05a45eb6a78562f2e9857777d4949b3e6a5aa8acb2419458ddba25133acd944c80b580b8674a802a30e7dcc4b71451fefe46f6d963581a394e93b60a6a7a4a1cd591200b1672e8183c6ee49680dd32616183ee5c436cc49c9806b8b9a724d9d18f631dc80d14296cb1def25665dfedba4739d00341e3b6498a1a79b26c2081e9bbe3349d9304415c86ca0db3980a340db60358d0bc01c24fcf7f82687c83bb81d821fef46ec24b97eb81d6b648f14b1fa3d98c2d188ea832ba79501af6c9e0063051ea00a1329f2dae6c2dbfb36631fe1a1a339cdbb194f842c64c8526748c24d671d9ceb399a651eb4536b4b8169eb073d703037b7b60e71e41e8da5cfc7ce370c855e347e091288f63224ab80a9cf2134f06724cc9bfc88e5a7b110fb89d268f0d72483adc6463bab78ec436424115608260210cd1cf738d55885e5a71075f356afe5c115d5d4193bf70e93a7c3cc3be87bfe76a2cc878bcf1338af4ac1b97a7412030d4680f39f4ce47265d92ac4b3bb03cb8e729a4fae65474a45bd0418e1dff538333cf389aa8ce0f18272f970fc4b2f43b61e50d492bb25c385c2c42e9b9713b13b5f393bd11d56c2b6fc9061cfc82072ece0fad550552b6ad771700a3ef701529ff13623e34f4899c567ede463accbfb035062167dd6d9ad17c61a554167cdaf89ae3e955c870cd8b3df37e3962f23950ada769338ba5213ced247abff437abae83fd7b08b91679a5777d959a2a19287ba7e2eef24cb3b44ee784fbe07d1da4d85b5f29ce3add0beb037b387cfd8e438b71708113f440e686163e9f565b636fa9df10692c2676a61fe8d434f981c823905cfa66db188ef73bdabe5383206606819b210ebfe4b749a7eb0e68ec09ffac628dc7169067be42216ad5fd32955cb0c1a8dae719c55f1ef04362af4dda5291dadd48bd7638af5f5839710f167333e0ad18a47be37b364549efa34e3562619c10e6ff4d1d547110dd422cee4f2dd6181330f1dc1e96878b47aff7f0b5e43cbc6372225ac5c1109d3d18b42d1f3b0b2a86f39684a7659628dbc8cc271edda23504c755cf43c1f8cfae278aef4be44f180f17d453b3b9e845b924bf5ab9c4ee09e71a848dda7106318cc2ec72f9f2603753132f5e4d4e9132db88fde8595d91d8fa38f4d9156ae65cf34b937a828c70f02453c291b6c92f6765300539ac7e425640ab7b0711542e78dd0c3948fd63499f2c1551791b38f593a5441ba719abbae03e3501a8a84e94f4d35a7d9362c6fe7d213081b7287eab95766369476f87f558d02be6788b2d7bfc87af8631a0be9fa52486f4b421d2cfb0fa3eb248347ee2f753ef467bf297b475772513c6810f153ac813cb482b53cf7d8faa0f73fc80e85b0272d27d8e74ff4843379066332bc893c6a80795027e5d9c6ad6901456824bc2ffcaad87ff1867d306db51b206a3e517fef4629c15e91bb13d24590953f59017b8aef7e357e02f980ccb81528320890721197530054732ee7f9d3035452d7ba0b586707bb4520ba54e3443412058205e4ec3a914c66dfbdcc0de3a7d96a211830933e4e3c7da4c27ce7d0fc4daad18aaabe32782fcb28388d347d995b3238c7d7fd39ca98763d9a68c570a2e253d11742ab7f3aeb90c69f5915b6a2745ac13e44be5a5e00f03728b57281a8a02d7ab17ed6b64c776169d38d35269c8675874222da6958f890c2aadf7f24311b4372219a899ad0819d2cdf0cd491312006a0b0b527182fd95ab3f8fde4c4364961c31b2d1f05a6faed25f063fc9ae245fd3d645acf574a2ee642c03155586f543cc22959d3debf73159929bc7800fa3f3f26a6e736d2578db0ce8bf0900bf0d98301763ba618c543517da44daa8fdb7c2bb8f633653b23d9c3f02c24a889bab53b9f22ccbdc2a93c49d45ab66b1af835783b89855505acbcde8834f59d2daf58ace883c1ef485bea5d9f7eb6f5927d1ee3ad4c5b55a56d278e830bbcb54858d7760f48d19aaffe22aea1cf94084c0af39642580d1f168a0fd412716ae2c7e4755ee000936453729665120125236e1f17abb80ef6cb5c77fd69651c1fe8a528036114aa499a8273a038dcb41d03831b77c9447a48ca23a79dc0f011a5a5a16e5ee23e04902dbd002d66bc5ac4078d9cd9f2e9c35fede5744a28b73d6940b6d521f38219aa8d20cd95abea886f1120dadc1799a0c34dd65c57d869bced92001c39c0bd9e159800409c521e67ce0c2f09aabe50024abb32a231aa6be1f7cf7e0d8dd5988fc45308d761360fdf02e118cf192866f7e5be088fecb2599a1f2090e11519bf48a8c8caf83371f4ca9f9512778ebaeddebd0c756544eb3981ad6e989163d3b0275da23ccb787e8d81c00a583c103529c3ab732d9e3869cc244a27577827a1cc2d3e819cc3b0081da08665c156f43cd141b22327c1ce62f390eb4b6375c18a5110d102a9cd7501f8a7f60b3df4dc0c6e135b196a94f7b20a503d46c04a089eceaea1dd44315b61444a11dff991b6622058a5a5965cb2bcc58314621e54ada5b062167abf6c92f06fa3b76befeee5f064944fbd554bc4c462ebb96bc4d2547e4d73adceb570b2f81e9c63759e7ca09b23e202ff3b601bd95afab4e7e2b362f1da1cb3c2b7ea8b84b630487352d71c6fce1a05e43d72b6069698f70392a87a4967cca7863e70de3bcad452bcf55d8d055972dcb4780b3180ecf311c21576bc00fbe558ec5f01934c9a81be7317347d4ddd11740015a4dcab3dcfb6b230e91c6ed242bc6b0d10e70e310af6a50b9556098e706c8f822999d04570f28e2977bf7b016313a011080278e3356b6cfde7704cb7f239e38465364d226fd6aa4865b1cf8ab13ee3f9a0ba5f9dce5a0b6bfad32cd2da2400cfbc42c9bb6e6d46058fb35f2be44c31464a696fd860c9183092cabe43b08eb5ad9503c0034d4c96690da3afcf489907c8a4cee97eb377d2f450dfc2c2373ed9308d9e5270dfc634bccb36ba3954b12bc36057b10044a0054bad368e9d4fd7c2105ae9317c5ea0d0d0eb18464d45f6e5c5a0e03fa9689b18d4e0d2746f8dec396b8fd584a69f16634a58ab31b0d22caee8c893290b73f8097d8ae0a94c8ce379be9a108322a53be707407c0680ef1256c5eca1ceea295cfb6bbc96c12c8edcc8981af3857f611848966e95d925d75daa18d44ce0975ef3af0b67de67a066d49d57d18c8933bb8c1fbf2cdf14019d442caee8fa893af2b939f730ec9b53ff62c8391ef9b0e4c1b269c276367e62d2a9a0cb9e39206cb463a0885f00ca3f6373b62d5f95e6a2ca34683243a557779afbf6e8ab8428cd00cdd7aacc58613a28cb539b77d1c374334c81421d2093d4eb11c3d20a5efcf69b1adfd0e07d1e76e6334be31ec72f6403041cbf09e26ed1c819061ee591b46f1f4ef75e6a809e8d757fe6e1e3f2dc9bec89e7ee70b4d9496c86af4b3cc3fe288a688a74c1b34674011bb897d1ef70a3380c497c3cbc4c1da617c6500c84e795d159fcf2bf7a2f2b618a9b072de5e0068ac6e599b49163eb107b91f29c29e501e450af91d829d864e55f67251453a4aef910c738769563253598fcaeb61a429ecc95ace3545acb19029c0bdc16f36f13d76e4a01a15ff203c7e1bf682660f1c859bb5a58a42612379dee32eac918d7a61f58899b1fc50e097f1690161634ef35c372a2ba04501935ce9df3d76912665aab6458284567a95bb77f09f159c014755285e6e3c92015be3546afb333d0668c14e95e47b86b5c67daa3048e9f78f68065c3dd0ff1f3e61181b2d71a1cd4eb7a23f97bbc4b45b477a1399d45deb67f9f99c2c3a84b80e0e780d7c7fc4f129e2555559cbe3f796f8b179389faf3773ea614671531ecb31fb4e2826f4c8e4a3c9b5cc2054869aacd0cc47216f1ee63a2c938d5e525fdbe24903b637fa4b95b08f69a2c57d255dee37b4a9e3b79455b0a8c2f7f7e34e1e6013a859b31d64749c1a6ca09d20321cd018988e36bf970b33939344d9773630d1932293de789b4d7427adab4df41d15e77d3705f3fb93274bbb8108c329c703bb955560888491d9fcb8cb9be51036e22ce161f234b5091376b38ddf42decebe8a153385230ee664f159400bafb14ed62e255177ec3d69697245c8a801b8e5fad0432c49b236351ba40bf9956ace33bddf5f91206159b064873620c88855a238ca8d7a36148f9f6a490559e084e4e33b501f4d7d924a3f5ca53f93c374d0c65b23f75ca0d71861bd69933ee86ae4298134a5f0011704357ffcdde84ac61329a8bb106130a6268d2c9fd87c383deafc9cb4ca46c0ff0a7fd4d5d7b0425877153c0d76eca8c142ab797c4a9b66a766c6ba3a11b725b7f6e6827e9f6865c9d03ead34bceb66ebdb5784f112b00501c716a8a5ed9d8c9bff6a2dfcbc5ecb0e3516840bf68d9bfd27b3cd4b62640c2bbc35335fc95585d62bf256c45d664ccae2d26bf9b8309e3a185262605fe803500acf46c9c1111d0e81579711f5b20738953bdb9bff9260a41228d2f90ac66c9369bc7339b1bfc073158150104534fc4b1b19badefc14e159fe66449faca312154ea868e874c2a097ba1a0b3b462f65376a60b232f23281a29e2d7b1b79658e2cb4cd8961bb18103c3f5121d0c43182654ceb20c96556c38a7ce07c020cfb7a022f1561fa49ce0bd1c25ffd8ec6e365c7762e75e6776195e2570c3eddb5d4761e5e6436f3a4913d88db9bb87effd63d061eab28ec29ffc268c9776d3daf2d4f9212b604e6f184251c33925141aa661139a5338d9d63267996aedbbe1d2341af6162470b541069da6de20b5bc404978e9d54250f9fc2be5d5295b5ebb9c40c06a5f7ded54412d7cdfc60e5c8ca375bafb89b57582279848eed820c72da82122e01fb7c4162deab82b649f48acccaa9b435abf4b295d8ee3823ac8700498674f505757a77ddfe2475b93d08984a348988f80451225b0a9355d1a95a9bd9103de4aaca9d8b73bf0b29c9035e3e878e50976166bf1a2bdd85f8ee9be91077d61e8cb8e5e5dd75daa9c229ab91cbf8acd1d7dc2a355468be82e2ceab98eaad96d330634dae5b1907cc7e34893d4d5cc879668695e146c889774650660823d4568fe663158b816308075324a0196114438bd539cec4e42fdbc453e45bef048c569faf63f9e85696fdd2cba9e5f28709c6c31fa642603c40aa1abb1b53285f1348bb71dc716ad522f5d7b1d18be7027a946d653c05d2122412825cc943c5a183d58d624b604abae05103ac576278d9c12a8731f0a64123c7e4635450890a5175c8226b6b0db24547d172abaf03f696fb046dd29a380697da92514defcd49634edff08983cc59682f7cdb61292fba100b462893a96e24124ca2eb86ada9542a88cef89202b63ee8df50f872e033d84b1411017e4736da160ba046842d5447c862fc836522a010c82f69fbe08e2cfcd5cb0403860cc86b2867043d6f68417e29def549c3f86531ef903dfec914f6d418f5e1f48701044ccc405293cd864c81370bea2f9d2eb9ad117d1c7723c4c24f0541449196fc2cac963fd95543150fcffc42f3e462a64e91f471bc4579fb35fcdcba3fc0b5a423800eefa5a9b640aba5014633a829417de52c768263744118d24cb373fa112d5046181fdef884bbe07d75c0d4ff825892118329ce30cab3104c3249e66d72441c774ec9068d4cdb115fb9440a494293d434ff4ee8d70a032001b4a4e722a617dd8aa7d7e60171f8390ee7821f327cbd4736e177a7d9ccda4981b09fd3c309e0f81e2a31fc835ba71449232fc0a5cb8219393a5cf9a3d737f879161e1ed82b4ff4654bc08873b536659ca3264d374a0554478553d3411bcf23c6eb69ee115068551f2390fab60367c103851e633049083c40d83b68259690fbc360d851181f858367e29783208f5563cda209e5ff0c4b4450f58999aa6beaddf7f133ca6650da09df0d08ea28bef686470c2a65907f41991eb4373a338e5faaaebfbfe7f36c4e3a67e929275d5fd7fa1fbca7dbe394478c709d8d15589e4d6c32d590724d9e42cc65642b22c2f29c2ef12cc19927917db24ed3094194a8aa8005ab5c380f5a74502baf208df3eee23509fe981240702c19e2fa33d42bfd1be19b551af743dacf04f549afcde933df47852399cc19a38d3037e605b997238cf1c2bd8e5aa7d24a6af120cc825adbf60a5987d9c9dc404da69058ad29350c9920419b70cc602d309e07c2765bcef1151a94af29abcf11a849f268583e4557d1b4b2477723112f5ced37886440d8dec2b05c9c4288a3fa0c9cbc7f901ea9905818812cd5c7e74f511fba5941de9110e46a9bc8362138afe6d68738b4d04cb711734fc59ae37e018c8dca208ac88bee2682b456e26b0c626c3e71574abd71e60c2df36c89f74ce17ad85ab2ade4fd3e429d154d3b091a483771cc99d4ba72d646e2e4ac2dd54dcd453c1c8ec9266cbc80f5c965328b100ae516e35550734b937afc38a54feec0736dd5430768ce330e3f1882f63379f91cdf424618d2c573c81074d2a32b3ed89d6482c790abc5731d389fe072dc5b47aed56724dd3433e0d012dce618150a7b9caafec4bb0830f4ca0480b79b80b847f883b4709a8709e92de3256342b6e536dc3f5c9f3730ce85eed533817b0d9dc4b5397157cf98310c0671678a625f323b5afc67f8fa32ff5b6a8791d46030c87ad78048bc84c9dc75ba0a87ae03d134b928feaf6885096aec4f6e0f0540526c672fb9878e3dc3a6ab157217000f98618d3b37d0bb1bda667eaa6f934a646dff3040229211ef1cd4f4c0df32f1174eb0199fb58c769e8690d04655ec969a20f2ff43cd4bee11d62149b5137ddb49aeabd12c30fe2625864daaa0c61b312fbac9e6459f30f6c34e8371546867fb2dfa5c5989e82d8cdfd56e5a87cf293d61ef14a9e7231bde204bdbe2ac6b027a0b7780fbc0e9d43be766df698ee6913a671fa9bb7d8ca91fab1a655658ad0f8f18b6bfef8040b79e9b831525d21b8a551bc0c5f409cd74450490d7b2b72d2a14467269d4efcbdacac083ad51f37fd131ec421fda9425b8445aa69c69040461e5e58c03ac7967fe125133767a7a808d3b918271cbbc3a2a59e1a8a189b381c53e89fe4f8452f147eea4847a57e8d503384a7569c895349a682cf1b0aef780f8fc2086a7fdb34e4afdc304afb689c225b56de206de3c029a3331324d73eb778ddfdf072125e020758e038f3fd07a2a33700f31f09aa5c38e3c356812b3f41d4d624509a14a66ddb6210c61bf8a635d71b9d4128e3d3abf8b15b787046083ee871d3e47c01b7732c5f57ab6fa5ffa0596695268539d4979d633f481a6a5826ce528a870f17c3fb93eb4c74c817869919dc193501ea9e1ebd521eced2851087f51df53d6babd41420b5353ec102d838f888ce47793c9edfc980ce322adb7368369dc4982b1f6c52b432a63339a86174c1b8056ee0d48027435ea02f8a3f27cadb12b4bcb7566512386757d64838680e0574128b87c7e1d871fe02cdc6fc23088dd7898f2616eb3a3a0d6c69ab1f0e759d67e79b1477b3ce5558d9fadc933e76aba7a250b4fecab8bf99539940f9452f1aced3f71db5ae921d711e0260eb63f9edab57ed63ddb3bd8b2fd92eb0e175fb957a005c598561a29f91e4673dd02474e469146106acb3d9b4a3c0583d53090870455450c86a291f4349c97cbfbc492a71524f4a55342fb724744171099ae1279b59d39d6d54a61ff2c3e2b171f869e9bae8ea9c941dd89d95207747ccb0c4f9d9b78b603d3beba825684a0854fd03259b1304c99a5792ce2796c0b1050ba206a9ebe23a49d411081b12799e63e6263e959fb41e9c531f927b83103d1fc8f3fb03d7bf564c116f076558732946a5fe598388d889e3fb2d3790d5e2670fd92d1204157bfb3290d50c2f12f25f2bde33e3b3a7d65f0de60cd165e4cffc7abf354aa1822fa2ec26e12f273dc92dde09c6488fd06c840eae2719ef690a16fb427abe6a56f87074aa1f245d3f9578db3ba1d2938426dea688ab4babfb6ff46e7bc6faa6d28b1aabcfa1c1583be3b94d3fa1d9270f11c2a833f801ff8a9eaaf9b18ee53d1d97c5ce92d534068151c00cb9e06f02568ef493b469b1688354c9f719fdbb0a8faeb361b41af41cf95566487b9699269ef0d536ed0ba4127c7643d14154dbdafc98eb47e8cf3089f72b705b88192d2fb9a14ffcd2849f9435f0b94a503cb71a62af24775145daf1e8a638f5ae6e03d82459a8f06ac5b728363f63467d208d95b312bd9b3db0a92b87d9ff0b2a8748da27286c0cd1458f5a429e44e3f07fef6f7e66031d6ee63a801a9b4406e4671900cb37722e5b4bbf14fa965084d348abbf00d9b808656bb562cca5e68492f89e623592520e2763af8c3297364b945ccd8c45aefb958d26adfbd7f931e8d7a42896d9a796dc78ffa3c16b4b79a7f6d38b0386849325292a4fcd929f6e1fa5fad67c1a8194e5f4626eb67f23484f049c46c37e48f386cb77a1264a73d6f2e9aa3302e3a1b022c8b4f4d4b9e8f5b9b762c7f25f59d06050872e4c6ecbeb590ef4f3efaacac3d9887fc7207dd36f0e5be9ebd9909281f6a0e102876ce131d91cc299e9cace8fcf4dae15c694add8a9a66ecd07651f88c59c06ecd7922cc976a4c29da78fd9bfff6577a585a23e63642645a8f71bf70347bf35a049b0e1a5481eacbcff4a7086f3c5e4d9a3a5bb69ea832ac7e09d535c825da6dfe76771cc66ec3c72c485e240c0d1ab40afeff0e947790e6a644a4cab4b44c868e0d5cdabcd258a54c3487ddff4f243c24ac6f208314aadea0d3e14ef675aa16412e3658ffe4ac7224f4501d591a209a31b81534e87d9baea3305f67906ae90c995fd78e3b595f96d8305fe680b9c78d9c0bd675af38aa3e505119cc9925abc4d1aa835a55ff27bddb879fcda2b7b464bcddcb1f46b05dbc21e3bc0c97e8add07ad1d10becd1161be0d8da9fdc1dbce23213ec6355fb13c901c055279ae5db04fc97d8c9f126bc864ec7667be4279d2ecd4dcdd1cd685f7b58612e4d4bb23a84c4557be9a226b8566fc706d66e80144bd7b1ab693aba0209f16d23bc7736abe866436ea349acf5157bd0fd61b3d0962a57a2c3d2538761d367ff79c65d5fd2cf0be2ad76ec0f0a83c8b543139680c66b5a927d7cdf1a3eda0d9c62d51992d51105d11c7dae3cf0e39f73c77bf5f0a29f0421d06c3faed7c467043c87b41bcf818055fc7739cd9da5b5ac8b11d177ea68e1fc601f32accfdea1ec424a8a885fb74429ba1218d7101f1328585b701be77470e5c9a2e290866b5c04ee84fc5b3ad4c8665493cb4caace15885d6c3a41d74254df6c2bee8055ca218f02d44ee33fbe4f01c9a184d1cd4309dd81b8fabf5bd5c761e1407ac7bc6e1290ccc5f36e7b042bd7a43642e479f27e34f77a04f403b36693f20beda5758d08ded8afab2dd6b14fc77c40c69dcbe10aa8e0da918c1f5b7539a468747ef0625359f56a3eb547a22f47dd192848c4773a8c392741ee792f1fcffdbc978b3b71588d8a54182cf5ba126c442c6661721e9ac2580a14f1b47140c4e2a7e16a5a1e9059e03f8d77a7f2af684195ceec539a83664a91b23645394b6cce772a4d03e7a97c1a81602be9ec0fc9b33b600d9fa633d790a1598864318ecbb98dfd93ac0c12d766c4a95f72c54f82883b29d342d6729bd23e9315429cb976b97ca060f5d7a736839e4124576e766d8064b802683277552f9acc5b009948208ce722a14a50e306d503ff59269d7025e712edc8a2f5bc2bf02984239f6b06078ce8265712aab1f17b65989a827c71737d1a8a1fbda42101cb25e9e149f4177a2ee2953fe4e10f6d7a399a097f24a4727ed85f142a47dba8586a451c4884f6ea9a28d6b84e61dac906bae71febd79a1ab0a8775348d00ea63475402bbddc27bcf78e973d406f13d906e98401d0b70e4ed001f2c23270f09e2b3cf245c724fbe4be3483831c13227279cd3ebbbd89e31e6d5472044d3790544b843b76eb7c8d73df40c30edef6dfe4799e8063adc2fe3f077f578830dbb565c597d5ecc451071660f1abc1fcc26ee68bbd292d4fc51fc3f95ea9dfd685ab221cf0c4c454791b940572fecd9556c10326f71a8a394dd55a0f0c1ce01b18077b2f9c622f9c56396f72eeb2f564c10520b20abbaa03c1835a6111dbfd3b147161f85dc647c027ff2c86c91521549cff571cf8c95cc1afba859fb0da5abdf318cb97234064e72383578036c979119841b1e8d2cfe213a7bab2cae21fc13c4caccb0f30b6df659596ff65119ec762c02cac6984fcdbd09774d96da47f7d43823bc9d02c896cd34a00ba692e4a61e826e40d5e1f70e4d5500046cc6099783ea9b069662c7937855c46c7fc3152a15d130545c30e6d85534ab1e531fb45b0dea8528a8b692fde3e07e5943f4e2a3cdb8ca0309eaa4136e6f41c3a23be06838be4a162b42b8a3f2260d3b5285ca42eae978ea9bafebfdfbd3d3279e9764f0938b23d3845dda88d154999d72462f3dc08af9b3d42238116f7229dbb7da18474b16910504b041846d8f970f296903f6bc451d3b6a41a0c94da2a228751948e06d4eb287ab783e96c89ef7c89b72d2c835f0660df4d98a72575a4d8c4f895a711dc46e5851ab89916254a37fff13ecc8d2bfbd4d7b41c501fa7d7038e36ab6d0c5cd54d65f4ff056f6172af8bdfd6719d2519a2cab98ac09b695954104635c09090c8c703be6272d03165eee130e20f59fa121eb3338a8632bbc767071c2e5c804783685b8515cf2396efde9600924c8e901eab37fdc2cce68eb67d3ca2d48b179161143eb31ba085258bb9312274f7888dff9a83ebbf4ee600286556cd7561ddad2c780af70b4a0c8a3b2b772f0ed4793bea82244cbf0fe0f7cb14e934e536523f4fa48e21f139b1f65b051483b0f36f20fda7a12a07859726729d454d15fce0ffbb904d8c93afc8e5a608cae1712ac9f291314e7f8b74509bade8e42a1feca6185421666c34ae85cfac087136627ac42d9f48a11191831fd7d7959328ab648b3614bce0a621f6beac21b4445d1b4943c6ca864b84912cff6ff15e833bdbeeb358cc2239a884f67d04985cdc2dc77278dd6baa0001a86eb8f2dd070033fee3bb9948433be085e21b9c565d084ed7a59cdfa17ffdd1588d2b91647b5e4c368dbec2220374a71c3c3fc8f252fdc3f8c46a7f3920a09798116c14c1086a65be1077b3d754e14a3fbc869464658b31c07b55078106dba08028822cc9bb4c28ab226fd4b4e3db792f0f8071d6c1e7e971e860b30fae844aa83f1c2d32e5f0a2bd014e774b1bcc8fe5fe4207e4b5d888890b6df0d358acbdb1f4f9756b4403716687c54cea143dfe645663181c2058150bb476a7a8689fb2bc34ec72235bfd4524d0166d71af75de6b4b131e76e3036b271ca79a1b3c7d0fc11fe5a989734ca7a98d19063f6f3d56b56915b3e37439a1d651a92becc09db8a143f3a4b3252d6b424fe6d019a44fdfea9346521dcfcf2134b04963c690e28e64318022c6091c6f7fb7f3329cd6c7150db00d4908413af86e2f6f7265f08d340890c3f19c6ee27e015f6078d9c8818e56e58d44f665ffb4a4b61972daed52d5fdc3f3e8e1eef0ca810dbf5b514367aad44534e50c5dc7dd051b71b575082cd3c640d80ed35187fbb58b773fe67d6d4fa9be0611665f1e4d3e50ccede1456155408771776738148a9575316709548e3ba3b8478148f2af92772dd275a8e04d4b2f6060750ce1077a5be44082e577cdabebfb6cb0ce4264d416d7c090d75887f1450c78ad8e4c159c42f0e57259d91ebd449f1516e19b9744c7989f4493b72c329e59108506f3f8f531e6c15f4fcb37ca50fb5e0d664f9f5f1f44f5818573e6d927a7e5c9018ba98f42a386bffad24a50b0e39019bd232d7381c6e2fa2f7947de8087c42162fb5903e12729502ad06d922e5b88eb49a36b3175fcd2dfe482202df4d2162685ff9e049c658c73436299126bc7e568402fa733274ce46668e4fea954e83b0cfbb2e90a4ad0ea3e9f7bb5046fcf4a19afec16935157f11c41090e848311c4a1fed70784d90b24973974ae37802f7ea55fbd7e4afff9c5b27b100220c58c7c32cac5664eab1c1ca3f2a2f0f255165b9072a95a0e47b74e33989180f53268b0d0f0c53f95baab51c56bea287303542f8291a3357256718171f07848631b2281db942a4ed9c90ecb093089757c38a4b28d7dd40570d0ff137d376f9689d12eb024b24a53751b002a14d70934617deef7ce48e7090096bc2ab6203b7cadf3405743ad91d02fd769d42b258d6c5efd024464b7b2ecff944d28dc6356c325e170056c30bc991775045f0eab649fdd1c2ae541484844a593924e0bc2d6e1f4ecfcd9c37d628f15ad72c88294654a47b50965349c90464f1227c18fdb9f842be37bf8142622d9b2a502233ae9ffaa88b3595374dee59bdc6145cc93a2d7b31598ee61bd433126b55a395757d76f7a186f9124d685940fa45fb865dc9fdb71e6cc944c841e72b1c18a80a15aeadd268c695dfb7ad360d406137e68b5a7b529191fba86bf11612e773f10c019529d86984d4192697b7eb289dfd7bb542b52cae2f88e3809b193c9b078bfa4c23449c07a447a833c80836a1ad6466a1da28acf5456c9c6a79eda7d00066ea31086dab7676bf68d30c13f3080a154d6817afa3d39b015a4087e7fbf25eacfe3793cf51ad43ad65952b96e54d489f3f6c439b91a01e7301262da991227cf7d2d7647ca65caafc3da3abd93a7252e0567f36a86cbcd3bb86c58d356fb361c1d3eaacc71cf0a3296954e427e8894cc1106b200ca9b8f0f1cba4bd109356e03b675420742dcbd43ea295a943e6fa37122eb21f38bce7d92745c8d48e765b03a23bdcf4374bd8ca444544ebcb61ade06080c749f5f6d7fd59ddab38d87443c452daf662a7256364064902b69048db84621a818004a364a5a1f7c2591f547636ccca7ee17c492b22adceb602c95af7da20a6dc42f151f885804076751365274925ae993ad78718ca1ab749b326a6754521242cb72846c18bad8ac9f1e31e665f88dcd1200324654419ad15ad2e8d17963d9e67ea5383b2b096586e8a016c29f296b8a7ecba3df06e557f9d337d0d7977033ccc1a181faf06858c549a65043dc9ea041900525173a519aae5db071c11e04d121d73de867e5c64339f164802962e42f722daff2c5b9fe39a459c4755a707e3c7d169d1ef46f834582582cf00b7e4575b1f7ee6b5551d800ab1ef5893c9934df588ed9e784fe6a82d7ce30b2b7ae521cebf2c3eb87888d66d5ceadd6c47ce621cfbe137612138c5b962a7b22ac601401c226a55609750423428d2eaa4c7a995322abf2dda8807398dbaf154f79fa5b5db6c50b8724849512fc2a04277e996efbf2f22795bf9ea4c21edc13c5fc0f7bb42e110297e15eac8a0d193d513ea7de5dc66f764fa199832e597712f482f9465b8834dbb5acc31ebd2ab837108dfb0352dcdcded93677738aead74c39b69ee5579bf514bc9b70e83d08b8b39d7a6cbafc3ed31db498a379c748cbc9cbf3eb3ee310d89869f66e3202798b8f75c264427c9e526812172ce8ba0d1edae4cbbcea247d24f9e46ae8edae374ec858570f5dd3a78124bddc677bb7ea95b96acb6fc73800d855803e9730cb63eef1fc1127f5f2e65165309569e7154e693c32ad5c92b971b5f7f604b03345d6303245188a6f301c2f58ee8872406a1cd4ba12fb00c53cbcc4684d29ffe6eb3dac27e1afcfeb9a5a14829e77edb56802f2f786b73dde2ff6443bc523448f319cd94df52ff4d469e9f80953a5f1a02656d0d9b1eb0a69d8da62eb339a56282824bd66655ede112c91285657f52fdbd26f152043ea06bb0d895d6f798c58fccd406a1e46972352a2442f4d474c118d908219ac095de23f4a0433f92a66aba3e544b67cf6abae14e149b65c624d6e33119545ff6d807e87d68272fd6c825d6a63c859357ca889564b52b15afb50592798894ca064a162ea76d2d0e6b7e19a2cec197c40a70768b5584ec10365c0deeae81065654ff4c4f083b9fad39ad48e149c7dbdab0916f67a4876e82329bce4a873016deb3e4ee61a6e30835b7c1cae181a75af570b7fea7cf23cac33e08c0fdecd178179a70ea76f7d7a07c3c9b7cd3b163bad0e1df20bd94646e0e4bbdb4028227f3249105ec4a26ddb7c6e57ca0275c8692457deae65e8a6805363558e37c821997e1eb462840a2d119654eb53c7fcf47cd864498139ee9f94f67a2143e53fc87bbbf262f0b8447ae4376ec87bbd7909eb11d20596d897bd2750829fa52d90c7500b866159fcbd8f652da8bb2c0e29b31566a00f70ff3c228deed9b9cc1f5430e9b8fe78cb18f34ea39d2bc54ff7a19ecec0c1029865efa402e8f3f16c3f802f39e0bb2a0ed4d943b235ac3b010f7184d05b22146c2a761f210e9a60af5680c635e98a3269b965a6e3952d73295bc754ea128a10cf530d856f8f94b5cb84ee1fda94efec50b24193ecf2f192f373e4305c67acc622884c974f9d3303e87b365bb9093cd1fad29680f71a39e26a0e5e1854d45ebed1489fd127105349d39a2475daadfc831c5f61108f2c78293882823558924c775ca70c3253f9f213f5609134fffbabbcd31d3e5f926779093082a26fb9ebabfae4d4d3253752323c18dad343cc5c888ac2db95ca10cb36a0c2a8f1baf4f849b1d4301229c756ffc2a53aceb07bdbd741766010724031aca626e48aba69d3f04b6194a29451097b4fb5fd203d567f5e6b3f18fd71f3022c21a96b14281d8b4df1d58c9c0b0bd3513148234f38a059ef5655914437f9b9093206d878364ec031dd9373b46f809a7d1d526f9313792611b181f0020f0d2fdce2c6e1e7d90702903aef1495beced7f8136cf4efac3226cda360b573be12717bc969504cb29c672a8ee5a23a2401863793835a63d4212a56f744a2c7cd9330ca56efbff79e9e079f137bd9cc23bd590d31d601986fb1a74314e73cd4bc18e1050e09b1d431e567be524dd55c3711ebf5cbc5854ee5170cd2dbbcfc3fd3ab9bb40aaf538d3978dda12d0e446055e1bdb291af5bd8e4ef3aee1e1c35bebee3064a98fa3c6400104e31914e9fc336236c84bf51840f9c460aae84f4b138826e3b06b07a756931750b81ec8be0ff04c48fd2b8dfde0cbedab72083a15fbeef50d5779878bd2653c831519c52e58e5bfb0190d36b6dc73b368b067621a156f1c4f65639a503850bb5302fc44e0872d6163304a3dea34f02a1dbd9ee121356989bc6beb7625fc2a83825e33e1ff7af4695badb716e35d9680e6e26568f3d98dd531e2aa7bd2d1dddef66eaeef7873796407144b64b8a197b34f3b2601658d99b19a9d256ff3599bb16cce2bece3a33b18a2646c26fe7867569c55c7ef6b372d94e6ffc647a2255e2238d556a4f176f7a10526e6cad3f6e834c46b6c8935b7e874b0a1e35722ae61a6f534d3792f775e54dc3180ae07b21abc64581170e9c131f5f70efccdde031593e8151614d8fc41ee165fce348c44d4a6b47cea0953a0aa78f0fc0e938ec483525de918cda4bfd51c3c3de72ade02933f5bb62e132c60b465ea920c34e8bf4f41fc6218030b04b8929a5f1454c736848b8441e87e7a75cf30f97895e4e52592ea45996e88c550e768580c874d4d36024264771363558809556ff5a0ce61beccee5d06a955c184189cade47f11a322fe552835aa1a42b335a34e53c0f11d854a1c646f8c46056970e2ae047516a2812464f5e9efc192d499fdd725fb0ab24d1c9436324ab7a4c57860e0393017dc12e2d9b35e40355c7914eea994ab5c36428877ab47d6b41b51ddc72f151622a0963d69de32cfb735607bf53a8d5545d58bb7be62bde3cb9d89e248831e83e6d28fb551bfc280e660552f06bb5275d6d8d2ffd2f6ef6277f58d1f210590291ce85c47806c2219bfc08c82f8fd3f5b8912a795802d4973a1c81832afc9b4dc2b1ae915a8f606f2257e1782094cf0db3c2f92a0f7bc35f4abccd040f885ebc0886a1f61d07b61fb0496b8ec6ab408052184c13f50ecd0dae305547d3d484f966f5f170af7d41e8666874497afe6e47177df0e3e2adf94ec07c79de1cbf5b49513d22c60fa58bbda559a6b471de063d4c7288baea800235c1ae41d45f61641c1c2d2d1afbddaaefdf0254f78f3ace44f1334476cd9c383bffddc05b1a67b6a0e036b31420e09a29708d65853e572cb9e84c824b35000fee8d8d8365cb6e2f0ca37ee682d18a167e3721ee5df08c231f098455b18e9da3ccc4275ba432aeb59d852622d6f9edf49edd0c00fabc6b920dce4ecb48ca7abfd448eadaf79cc668c84c0bfba88fa7a143818b33e7486332e3c5b7084240fa7ad1d4150d7a2addf4ee3c0dc2c0e8e50b514503c5cecff13afc0a76b5e051fce232f4fc311c9af2d7eb4d8df046a0c45ff5fbb7640212ae5ae5c671750fa6f635736a6f6bc2013c9b101673623f9d7a6f456136ba604def34880d0b7d9f6e695f960a6a6c2b1f58f40a4dc74af7b3bb79698d5c258b6ca5717d4b7819e47f8255cebb257e8aaf58d784c23c5a250460fac71152cfb62db586b149311bf19a431a3f37bd9b772a744503b9a016f0fd314c2ec4b6f9f4f56dc0957fb7d039fb0df12ba69c16f17313b795860e74a0633551d92fde7602e17e375d0fa8c381afae5feb2db52f7ef249fbbd4527993aca0534641dfb16b7912fd4929298e57b8ea1e500858de5593a75f9cb12fa6a44aef6b59ca465143af231f0abd0517d8d830e3f1308fd623e64a4d66ffb7f4c30d33bd9723932fd47097a17e1a881fe65eb66d6eae1238e6bcb051c7df03ff930f122fb67e213261b5a3a2bcebb3fb657190bc1290e30d3a4ef422fcd1a397c24e7755b6215d9d1aebe7b719f70401dff489713058e63dae70bea8037827da62cc61537ebcb8721df30a4d6f557b1b003c23bdc90b23881d9e219898dbef72af811664ed7eb64ed430f17e32ebf94f3e79084a4c969b33e02369a4a0e623a2b1b1d5e591dc8f86de384caa2554071dc4c3e52d69edbae12102700fcbcdc8400237ff5ab57d4dd42db3a0488556d423343ad7493ca087e9e81ef2e1641c3e32e24f8b086c93ae019534405f90e5e6f4d251ded4f742d6d9d329e85a1e6472931d2c5c7a7b2ee15b0087f4031cbc715d09539bb36b8f5af746faddd2a46b84bc102933351393f5540536c245f2252439a8bdc9463f765ec9594869b64c68c9e6172b28a6ddad7d26e4d8221dac8f9d3841b7a82433ca46af526c73b7d337dc8f79caa54638a54d7bf28519541f1578d51b90b0331cb21342b238c9e6a42ee0283e8b9e76960ac2164375f82da12d0869ccfa94f4565a37873587fc5f12e7b9345e671dd2c6cbfd103f958aa107679b844b59e9fe703ba3287f29ffd972c3b1cdec3f8e89944e335af34f8e3e01259476c32d8163cd5007a5783fe0680d742a92475a93075beb0557d32b2aeb098eebb40fd6cddacc2d067da0316119475bdc6a092e6b5897d42bd6d9077fe77378c8f39f280bf98dfd177d320b12deafcc389c92f0d0252797f8b8d89d7b6845b5d079c2013cca7f7ed893393508a9c039dd8b8b4810de69834f6ae1fe06c9aea52aecd1e77c770e8d21d41d48207886321e9a1142611fb37752eaf8f08f43beac124219cb73f4987198f51e8d888c0272dab155a255de84ed74fbab16d70c602368eed542f9596c1adfa991632f4a0e1eeb4d1cee845d5c2abbd46c1a75042bcda9cfc3735d76406ea0881512895de8f391fc08e9d2c6c6c6232091e9909c2f66fd0b7d4f9ad3b48a7900837b252729d24202ffd18aff5add358bfa51d5c93e67e6bd62216ec42a72194c0fac15ef94aa48d5f5e8e61140de971fb8e844eae44867722fd73787297fedcba1e18ba3e50adb6a7074b1a3ff530a75fb00020903874eb81003a31484058b0612bf3a3d47eb7652e842076f2a5582a161ac202ddd981de79d0dada2fac1569d5e61ba1f7cbfa1c1ab683d346e106c663f66c74e692ec5528ace0ec90c8efae7a623847e3ba87747a5661ab38292488a643c3816ebb15e1e7dcb294c9b667b2873c7197367fc32d9e7a1e64d3052a13dc80fda9a6b2cc0078f544eb4ca3687059fdd8bcf139c23c48e3218de77c96c97d7a43d59ddae350ce4e935f9f5592cf89c99784cb3d38b146807365b5e83c0833409585647f59c374188916a418f251a9edb74bbe719b8273fb0fc8665a88bceb9dfd625df784d75ccf7b50d7656f56060f378845f4d7fb23a697a0a8f81ff74038bfc4998043d8b4355dba18117604b411e828c7d120165f813e2d900c73e8c9ac39de063d332a2f39946a416d8ce559228ef43a53b572256b56152add318f1ff1be32ab3a25ae6a4108395fbed4bf758244a96859d1c82bfc4078ed9e23710ed07d514b2240c2caaa2dcd3168940ed041c9abc7f9ad9759ba93e5fb3bb6cd5d41644f8e16a191a3d3cf6e80ff80361ab6eb633c23931cc8d766feb1da3f7fbb7b4891f25d29920cf53a68e8ea133a3dc6893833f131024cf3f084df67ed803e3e6575584a403f2835b81e730a85792638be4f251b8e801dd91a129029d22e1941104fe54a5f3caa5bc0e0f6310f8a92be0781b9c41e7b9f2e5f079d18dba6bc2a92cbc6a268bcc42bcbfb0c11113566b014157a2b0ca758451ae43283d6fcddc0f6e911466956b07d7aeac62735cb45750d69cc4b8aab5bace5b527dfa93b49c1a27fd7776b451cdd52a32fe19ef27be4a41bfe318cf7ec8fc7fc079faa392a31c15bf9abd56fd91d06a5d3e746c6ff3da95270eb10dad6691953468907717f298c81932127abc422ccb8099c961911809065fb45516b216df001302b80fb27d5e2a835161aae8ea778a638189585e1b9c5160fc45b552c87c43341b0dcaf84426ff9bf7dc3b7f59640dd6323f9bedfd61796bf13f0d5bbb7a1665da1eb9b3cfe5b5099447e788b9e8561a6bb1fd149f84703f59f77863b30a5edb361bece42a44aabd385e3b5487439de984bddebd7ad69dc41036a982aa6e1d0bd2a777eba1a48ab96d232d205c326ee7b233088f6dccd4d1a1612f06b4926ed4d7f33656c91c2cff1942867a08af29d228585b37fecdb504674e89d0281986bc6fba0d0f82578e2fca49085c8800da0bf3ad0d9d5e07315bb6c1860ce486349bc1ee9912e8030887ed362f6ce33c71656b27e18ad6c1b28d00b1838a64a5304dc7aa3ae4c47e4c4a4ff970c31edd8fa564df7bf049ac2c7d57b6ccc4eb0e14292ee76b2db5326554d7fca35aa86746383b5aec05a52099e634da2974db4d7e9e25dd935bd209525670ef2100ee8b7b155acfcbd0e0dabe10ffe10e0880c59ab21473f866db1a1f8bb71016b8d4b4f2c20f5b17e83bd45aa5655b9d62490a35f83ae9c8ec74905df17fbd1977ddfdb3310103d7913cf9c090d0a823f39324782f2ad0c9b1d07d9fcdb32c0b6945e5c68388b6c5cfd48c58e551c7bb0cbd9877945c53c63d585dbdd7e7219400616328c88e21be415c820a5b4570e63520f94ee56508b74a0f221d371a5098989704f6e4e82e410f4a7f0403ffbde3447343e3c4d0b3188a6d16cb8d0efe2f1bbe56162bfa77145a0698ec39ae657b3c1dd942b3f1d119fd79a47dc05262784ec9d2068ee5d787289d691e34e56c6d7042034ab2ae8c1c93beb6475793df308e0fb3cef8e4e727b2f27ed8d03ccaf2ddd5b3d4d0a2f34dfdce892e27d4e6793276da75ae29c6cd4e78ba8ca07d61b0656da20934bbab744700455cfcc2081e585d4379b431c9bb15d0a973f2771101f7fa4283acf0d5d1ae7b06d782c5c925508f79019f4f0d41a504f8ffaa3da601b105ec11938347c6614c3c7b21ff2db97771f68a15bfe354220d92f013ff4111bd102d7f329213d24b81b7cb48777efb0cc15a02662625dafaa4bfd91711d3998ec9c2f5beeba55c3460c01247bb0864d9cca39a23a53eaa1c411c7101844e7ca1b55bb46607ac0a823a83c37b5f8ae42b5477981cfb25c1fd6101ec59f11042f9fd1fe3134efc0aae2e0fa22ef0584e59399054387920dfebc286f47ca27ca1d3366fe5546eeb50a046c6a41c3fcaaf339485168dd458644e576fb97535cbce33c64eeb4c567a801ba92b6e5c9054030c703dc8c6567eb7c891ced8fed2dd53c49deea57f99114bff1ee0ca955d9dbffebdc71b7198a6ac810c11b0124ce431700b92ca38f36249e59500f87ebf4d9d4da1018895d302a0cbc1ac7f5dfb270b86136a7f248b4c5e45f11ac6241ae141e17022a4e8a8bad217b11d94da102bafa48fee4f2b59247a1ca20c063e4521c6e71de7825458abf61759a7ab623ace80940e92c3089eb9a43bd846ff27ae5bcc6e8c13e3bce2d9ab78778062dd8b75344478661a14ec12bccc56a78d47a80c2cf98514355701f8df4e90f6aed75b8c94c2074ae871db43aa8e36e05f71bdf08d2d47b3f46b531a42f7a35b38da627f1259bed74c189d3361107f975c9787bbfcb7b48eef62623d3f2229e0a3f74483aa87948379c2e8db4b05acaedc42fde4dff77898c946078462cc2251c54c02681fd9fffa4226d4f6b39990ab9529a393eb62b75b5f5d255cd164890db6fa7ff052dfc0b48468a026036d568663d75739f780d2c9ab0df5c22ffd3d289386931dda397189a0b1fb221bd8c4a6dd1f3dc63764eaf4560108a26cdaf44ec70c2bc2a358a78b71de67966ee6f2105b0daee208b584fa05494b13e40ed118b9ecce17854dff39e00665fe93744888ada17590460ba199b7282d772800019ff69cf2279d0e7e16c203d3ef9bd4628e68cccc26af715b9b97232bfdfe00c3fe4b8371f38c31acd5b2a4becdebe740b164c1bc50cc531b38e563949b938c8cbd8e66f472aae1e11850e8684ada9cae2240b19c1c382b50af566745da42819c19ef10d3420b8145173a96782e117a298da747dd381b5275e8de872a35468f4d0d088aa5700f1295a11d31b36ce60dcc11c8dfe43b3839353a50a0cf1473d2cbc0d30d6021c8b0cfb867a8c0bb2ec624f420e0886c55c6c88ce15b74cc28f6d78cb3af7435df3fce244e83ac172c9df1387a2b5814115084901ddc98691a4d1c44eb5ca875b425e77fa0b13c6b906020ecd56c2f525ccafceaaeace3489bdd45a4600f95f5b639253add2216cb1e49f13ebe89f36af7637def8d46ecdeb94c9da9f9f7409c5ceb32cb994beb26d41f7c728874c3fd304fdc34249c968ca2177d5751083b732b9d7134d9b26189749cb1825f353dcf3a4040b33d21c225e722a247d8264e2a2e261a191a7806da7b3f03125bed48e871c048b2181931b04ee294deb2e7bae5218a6ccd47ef2c237ec1e1669d16421ae5043c1d4c09da829a1ab99b1569f5e7a2af19d9bfa75000150965f3b416b37ea638b1652b6b6cc5626f19e517ea649bf9903913940351f6bb865fbe809c75738d2925d28bb0209de9cc741b60f532ce9b62bbfc28d0a83c00672f8be6d95bbd563f162c54b08765d5e49335f7f36229850b5f5deb5581e1e8a8af1c04828875a1cbfd9a15071398a99221794acbabee67da4ee32db6c5b7edf6723adaaf1b2e995ff0969d8e6caf45dbce66b88eb4925d035153ae32198d79da1b25071b7880e9ab7f1d35e620292c42fdb5bc40d693e72edf1e364f65a33cc06f0aee10b60828d1730e45382036e4ed7493f830198caa56649ac9d015af9709ad5a8ff90a454b56a1b1f97804d224fc9a650a98b3fdf8c050391e3dfb921caf6f7878b91a7f6634acc9ad6f2e4d229f70fe60fa78bf33186a12533acdb1491f791f7c15efb311bd3117c64e1744fd87904d0cf1f6fb0622a34644ca5f89a71f3ac179b1c0be1f1d015f47634310381f07d99888e8b0367ee786ae2ec8b30e2eab898e25d5d9a95feed1ad2774fb9a8bab049497de95ae3747038123251f4bb5d062e3790a3ddb9684e0df91bcc457edab6fadbeac8602ca286b6030fbfc7ddffa0e0b821057d03aec8461cee62ea300b866f54a5c2cb9f3e59a1032db5e0e944f8c6f9f64b685a7f44a74351c356725be8e0ee1a6d94abc32d83fc87d03dd424f2d18b4e7c9e48897bd886cd447e51e52d9daeabd502c334f172b1f75ee96255e8ab1b503b98942c8462a3e74f5ec78717a2606d9f7101f5e4f65c635db7a6efa98d368deb59bb5ffe56bd014227e6ad19b217a90f5c6fd8938bef21feb145e4768853eafbe49a9f998461041ff7ab9693c8d03de814ced83d9685636cbd83f168a96fa304bb36767a34887acbef855253b20f3b47c6d02a68cbd2301372c9bb7f6656ebb5876a01b8dadb5f59c8ce95551725ac1a909a53ebfcf5dede0f7e5bbad8ba6a087bef770a0b0c89bb5141465838b9179c4a5635b9d79e3ca6b75ed8cd3ef04dccf14c6f7ddab176d2fd95f253118f22380a9e96fae947b9d14b7bd246b4c506e37a3966bd5657666869107e6280dcc7ac9baf571e1c09ba8857f30e95a96687df6c035b8feefd9ad2c90bb1fa52854c0e9b17d369acd82b8ed78d2e7e0bbc49f2b5d62c5c2c47a4c3bbf21238854f7a767e95bdf6bb6f58f8e95c3c76068a2106ca1bb2858eed24e5762fcca4e304ce9ea2bfddff728dc967483d1bbe77129ccedf153c11cfc67d3ca671a81097b6adc3ee9b163f3d60ad260ea2c068ba141c5a08ae964a3895c7845d0a1ad66013db1892c718ca32eba09484281b0d73e190ff037137604dbc59ebe48fa86607d091970531aedf4fbfc4eb28acded4f45169c0fcc7a078cefb6865864ee422e942ba899ab8d7d3f9a6f2110e0fd34386306d48b9f139832b9cbc5a65bbfb4bcc602ec82b0600ddff125c878909291d022bafad1f4ee1bcecaa6921a04636c0afdb2cae30c52f255e2ecd94509698b28e3058a6e086a3483813b5e63949d7188f0503b891b9f37d085c0f106aea1dbff6d390bec6a0b1433a009e0f39e7ab26417fda81157a0addeddc3b0141ddc062b38811df7aaba9c702c4f188c6440b41e615e562e1fda73b2a0a8f809043124b0e6b322acd887a25e8533f80cd6a62299d6606784466ca58f46d995f8fb6cb500681ce55c3e2b76ce48c1a24c861382202bbbb6051de43c3a7a1238cbdb7a7c908f2ae1747c45371b97828ee8c47405defa7865bc8380e1db39d355b19866e9a2ed221fae161add37ceeb6e053cddf093cab054f321803b9b43e6afe2b0aa82acbf95571d5c0523459f4bbcca55e7d97990afcfa72b2cb6668f890862cf2cb0a92ebf17ed0fd62a5f7abcb8c736208e0c9101720daeae1f8b8930084b3afc320e4104096c20536f2368a34b2d2d84076bc7ba2f8ea786fb3510088177fa0998b8ae06889021c5a1a6e0b20f598d2249aad016d1abe5215d2d69d49c4b2235e524910c5588a9c02fc2fa65419cfa46c718e9b5358f5845cf46eafdc5260b60a6412a9f4bad7fb070ad160acdd88cc68512dbbff84b5b0b320e5affc11b31acc7a0b94a6f98ad27eaa907fb59aa3c489f3a53f1cf530161d814e6a7eaccf62ad4eab207654063e1e1c546f6361e5887de255d31216d9c4198e126f494c40a0b306e11ea68aee6d408ba2644678c2935b8baee3b36ab5ce1807531ce2328917f4000d2bef994ad84b36d3504ccdbcad1f355f820bd0ea6e74c96fcf4d0a0520158737bbfe05346a6f0b6181c94d30896ad79b410f474431bfd86e8be7454e556286fd1d03d3339198677ce8ce43fc2aa6eef8bded0414eb32252b4e3c577d78fec49f907e767039634d1779be9a980685dfabbb7f2dce7a09f0d3fd2b8998bdc2a491e0ff5aedededdd313d0a8185ca4d12c6a71cfa14769e3baad88713f40503985939288f698705f041c36775881f577ea4eacf6a5dcc0ac619fe1d4cc001a2ed6ebe26b0b496893eeff39982e5d4b14264a0642c3c71d02bfdf99f58db633e6cd6a17cad892b35a696372dccc1bbe32ad9b0b22a3ae298d19a59a81c0332cbca7319ffed52d23e7eb858990619f7412fcb4a3b77d0e7477daa613b80217deb646d834bea6a73d37708c35be28058bb9774c2e6b8654f57212e2eba07f0153b62f3ce496f49e45fbeb6943d99eb7e2098c1610822dd36b88f114c1e6f41041a3fddd410a33066f46781fa9efb1273d1958c60beec3aa6609fa2caeaf3b9e7c5db5550995e1e11c497714a68702b4515e39b8a2d5bae339bcf248443a76b844a53b0e5fad98deae4069463fac0e1dfdadc413742b564844158b2e3d8e79502ea3074271e818d3d54b18225d05ba210f438e9f7e31c6c5e2d3af4493426a8b73ba64028f10bf1c8f577832deeef3f11f3de813826815db0e543ea3be88d3cd2653547c1213930f27da62bdf54bcac9218fcca5f274eee7655a72dec584e1b84e5683839c60febeb454aeba1ecc339c65c365470ff08e664edc60527e0479da5d2be86e3ce2ffacdb7333dc87cd8a924e263b8d22b0a9d611b1880a7d9e1086debaf83d61c8a81e96ce8b4c5c86e1b70fc6e0fa7a858b1de067870560e296a35c4f49589898f8fa9494ec50b5582c81e9341f15333d1b226b34c8c51668a88a021e54e533e89590e9f644434b8d32248fa43c79fe3df9d11ba797c9beec9ec1c60a800203748cf35f8fabe98da85b5bc4ebce96a866542a71bc1f04a466cc6ef69fc8050b7d63aa865c924d75146636269a3c9b330b056abafebf02e55e7d53783fb94182f6cb59f3935b949aba9d82c6ef1e5b6d78063fd06d51c84362ca1854b5433808dba002b475bd8cfbb977e346313b4fbde5e42f3df4478de6c3858e886884c29d7bb5d893441dac067e6a9d9651917d83d3fba6ce29357fd0a10bfe83fbedd3642cbed8525d5915d27d23d435e831b0e41b5871a6eb47529d8c5ca275941958ee072228cac12bcbf4f3891f8d14b8cf6d357c8e29df7c93a49e7c7dcd338ea80b181173b2cd11bfcf88461775501345143faa41b95e357061f97fbcad05984c26f993398064df86c76e8f7fbcb5c7bbcbef8c8150794db1ae118e558af723dc78039986278e264031c6bd8d62fdee199b2cb4996dccd5274b762e1c03ef3f9b5898caa4c4ffba50deea570a6a5214cb18806092aecaa1e9d62313bfc51a8591e7c091eafd7c4d7f7d876cec27277907c7129332a9d00433d0e44babe342d951ff55c6dd0b876425f78dce73c5eed5b75628b986a61ba97abc882aa5a03524bcf08506c45dffef862949c9bc46769fa1dee9200803c0d0157299db64b187f93add3dc149c7a78acc72ac0874cb9af39031c09ca83e775a4fee194d671293c879aa48794bca9d17a15604b9af6791588913241fc94c9a8fddcb8e9535b1addbcd7cbfa27a08cf243a25a8f911f62dffd2d978e78bdf7f5d9829ee2507cad64499c36f8b705f6e4ea5590feeaa4dc92d59ee1685fda9208718b4c57de6a7d926a63c6edbf4c4905950c275f1d0ae8fc891af92325742d5872bfeb4b488a7627477459f9debf251cf90d6ce9b8759dd3725857d0acad4b418bc410787ac84141f30d02a170ba4e91b3b851e0e6631a7893ccce71e79297eab0fbf060dab37536f578891d0dd8fe26e801825769de3b2df20842c65bb7f03ef1cbf81c4d0251cbe1640c0033ab94f6fda84baf3b779279890ce0bbb9be66f306e4b41d1d7ed08fa321a9323d0d2b217c8ca903ebd6002d3e59c53eb4cd33d0db1e2e091729627ce7c337963d1f7eb937e8be06a2b2d562737f21e12f75330e7364030fffadd78b8ce7e2d1a0c773abf6a1f82ed4004640afdf8e754a911dc6f007632dfa37b8be8ade88b7342d06927fc7c9cb164af37a63c733ce89c0368bdd7e69eb46846f364958116bbee8bbf1f500005fd7616ed492ff11bca7f62944394bc8f99c2997f349ba1eac16ebeafa26afb7a3ebf687266034dc9ef0c93119517261a9a33ce57db5670fb508825882579a689d03fe307406d0a860d7de43f4347d714bb8cd55f0f0315f03b48b482df5c4a2a5bb1cf0fcb31280708f7c4973ab017bcebe57323af92d257a6efe6a96dad66c78b3d39cef595443436701141e9f0d11a6817c47214d2709fb99dfa7729b4540378992adae3181220291e4b8ff6c2db8a81cfce28bf5c1172ca6612ecdba2824a3165637241cba67c22a26f190ddbd65a83ab1a92133501b1fe9e0bb702d936e6cc0931cdaf7dae6387a517c73b516623e75772a36c5a0969eed3333eef89c5fb332f944c950a5dc70d399109730c2cb45faa65fc2303e623ad8d271ea55174686fc6bf8ebb583a25c51aded17e8a934bdbab2714f4e3a3eaf417449e32796870d99e3226363b6d5f40f963ae2e1e756870f69ca59091b8bc3a1f639600d996eb7b91332c25d630dc056f2386068ebd6de188bc2d4051d4a0531f8924903a9c1016835eb8198a29d330a0988029d8a796d37fa49d0d68b0e77d846f64e6749f0ead64f9c26c9e007b50681dd1467dcac44a4a082835b3a43059564e0a86ad2b80682f3ba6e78b0998ca854a12293960e1a5cf621c73847281dab995757bfe609fb6a788c3651326cc0d462020a8902b656dd402ed1fe334fb192345fdc2ce507e16bcf731ef765a4e034174cd1725e421c32461b10efa7315c0210978986650c51d650458b8f7138df6b2ad5f9e7841852144ef153da270f24f93c95667699b04758dfeaf984e473a2a4413f6a589741457f9e41d0ab11ffc99413b10ebd0bd1d5a66e739902287f2b72ac1bfcfc9609844e22a8aa3e306f03f7fc4fed4623145651284a39ac4ee588bf63557b951e0d3e5a87bfdf39037502d2455da2ad4aeeac55a6138d17a3e83d36e7d6a237c3392f4da5035215dd5d3b2a8922fb7c06ec8785c84e9130435f1ffb3cf78437e01242cd6451ba458c31d8db751e36f27960000291cc380f2ff7010fae02fca12c02a482c384b6b733c7df0f6e0e13a0e48d23d7dd75cd2d568274c751b3fd63399057c76d18b1f5368e8fda89de586f724913eca3bcd47e4f61fc420561dd9c52283a1a047d45750d06eed81f38c626bd7c97f5ce3d8923ecbd32182efcafb68c04242d86373bed58a18070fa93e9b1689e80b68eb82064d301222975caaf40b94e464a0c5fafb303382682d9ccb2c654164e52e20ab1085664221fd5463f1af31eaa027604c75893bfbd369f9aaadccf7c717bb55f012c340739337ece6d154d14a784456e1a6fad4ef348e22a89428e27cbd9258b0a1a5e9a0925fde493a861b558cb0df1dbf72d74651530ca770d511276b5620dc1557c6ecf2e0b4f2f6f8c7c10cdf3bbd7d6f0b91b30bca9cdcf8745698c0e1d206d663346bbbc03217cec688a9467aa9cc3a74e2aa75732bf05e07d8858ebfe684ec1f7747e9f17538102eee2c538a39020ce3a168816ac739bc42c7a3474c897d02772bfd98a4048276d61a0232fcd848c65f5bddf34ffae935501b88dbbf6f87704db4b07711550b907f075ed9d1e27593e7d03b9d5dac069e92d9c66a3add815909184f7e5c7843f9a1aee33a095daeb3ab5e1febbbc4ae2366120bebb7cf8e65446f075ee1a297c8aeb6410b1b309d8267273e99cf0f66217ccea6aee5111cdad8c9b02878f3b48900fa40371cd8eee70cf731d95ca2a487bf014f77157fe95036e38f9b89c79205b9d1b110143015dfc672fc21d5d50f56f4cda2cf28ccfbacf41303477bccd7af06b8aefbe12ac60d4b08f7dd3825ff8c14d151cf938782bad96904c08b3c292556ad5ac055d3d3ef0c8befaa5d51d155f8b89a64872ca6aaf8ac6114eb3c8e23e46f13fa6345635b96fda7c04705ab4e342699570c18d594dfc6be6ea72817639949bc1fc4791a4e069956a2067f735092921c977be9b68b99e2eed323ee7455eb28cb46bca43a655a93924ace8804eb6dd84883e5fcc0f68e4a4d119ade5bd7e977f2023c6301df329bdceb37c2a3565335e1a255bf3424b8eaed3eda9e83983ee99639bfdf402aad8886f231c727f0fcec541d494cca78c1815605ca627440320a35f2967fcfdd85bec67203ba7be36dffc4306d505e107d21</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>偏向锁</title>
    <url>/2020/06/18/%E5%81%8F%E5%90%91%E9%94%81/</url>
    <content><![CDATA[<h1 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h1><p>Hotspot 的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换ThreadID 的时候依赖一次 CAS 原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销操作的性能损耗必须小于节省下来的 CAS 原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>公平锁与非公平锁</title>
    <url>/2020/06/18/%E5%85%AC%E5%B9%B3%E9%94%81%E4%B8%8E%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81/</url>
    <content><![CDATA[<h1 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h1><h2 id="公平锁（Fair）"><a href="#公平锁（Fair）" class="headerlink" title="公平锁（Fair）"></a>公平锁（Fair）</h2><p>加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得</p>
<h3 id="非公平锁（Nonfair）"><a href="#非公平锁（Nonfair）" class="headerlink" title="非公平锁（Nonfair）"></a>非公平锁（Nonfair）</h3><p>加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待</p>
<ol>
<li><p>非公平锁性能比公平锁高 5~10 倍，因为公平锁需要在多核的情况下维护一个队列</p>
</li>
<li><p>Java 中的 synchronized 是非公平锁，ReentrantLock 默认的 lock()方法采用的是非公平锁。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>共享锁和独占锁</title>
    <url>/2020/06/18/%E5%85%B1%E4%BA%AB%E9%94%81%E5%92%8C%E7%8B%AC%E5%8D%A0%E9%94%81/</url>
    <content><![CDATA[<h1 id="共享锁和独占锁"><a href="#共享锁和独占锁" class="headerlink" title="共享锁和独占锁"></a>共享锁和独占锁</h1><p>java 并发包提供的加锁模式分为独占锁和共享锁。</p>
<h2 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a><strong>独占锁</strong></h2><p>独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock 就是以独占方式实现的互斥锁。</p>
<p>独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。</p>
<h2 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a><strong>共享锁</strong></h2><p>共享锁则允许多个线程同时获取锁，并发访问 共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</p>
<ol>
<li><p>AQS 的内部类 Node 定义了两个常量 SHARED 和 EXCLUSIVE，他们分别标识 AQS 队列中等待线程的锁获取模式。</p>
</li>
<li><p>java 的并发包中提供了 ReadWriteLock，读-写锁。它允许一个资源可以被多个读操作访问，或者被一个 写操作访问，但两者不能同时进行。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>分段锁</title>
    <url>/2020/06/18/%E5%88%86%E6%AE%B5%E9%94%81/</url>
    <content><![CDATA[<p>分段锁也并非一种实际的锁，而是一种思想 ConcurrentHashMap 是学习分段锁的最好实践</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/06/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="c2494bc6920abf37ca15260b878432370f31329cfa0fcbaf86034dce9bad930c"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2020/06/20/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="bed9d7e6f40915f59a70289c8d0d1c4c82de69ff9787da942f956501772caee7"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>可重入锁（递归锁）</title>
    <url>/2020/06/18/%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81%EF%BC%88%E9%80%92%E5%BD%92%E9%94%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="可重入锁（递归锁）"><a href="#可重入锁（递归锁）" class="headerlink" title="可重入锁（递归锁）"></a>可重入锁（递归锁）</h1><p>本文里面讲的是广义上的可重入锁，而不是单指 JAVA 下的 ReentrantLock。可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。在 JAVA 环境下 ReentrantLock 和 synchronized 都是 可重入锁。</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>各设计模式总结与对比</title>
    <url>/2020/06/21/%E5%90%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="46b887faa331d56235a2cfc2500aa825ab7d0fa785056af3d7af8ddc30efa9b1"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>委派模式以及策略模式</title>
    <url>/2020/06/20/%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%BC%8F%E4%BB%A5%E5%8F%8A%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="e82e50805048f7ce143b01a1f0f31824c70492c735220e28b13873442b46f2e4"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2020/06/19/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="2d2dd25d8607b6fa0be2be11374144c428c8ea7df269ba0ac48686544e9884c3"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模仿spring-mvc</title>
    <url>/2020/06/17/%E6%A8%A1%E4%BB%BFspring-mvc/</url>
    <content><![CDATA[<h1 id="模仿spring-mvc"><a href="#模仿spring-mvc" class="headerlink" title="模仿spring-mvc"></a>模仿spring-mvc</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfvnfa3619j31gm0tie81.jpg" alt="image-20200617222032762"></p>
<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="配置-application-properties-文件"><a href="#配置-application-properties-文件" class="headerlink" title="配置 application.properties 文件"></a>配置 application.properties 文件</h3><p>为了解析方便，我们用 application.properties 来代替 application.xml 文件，具体配置内容如下：</p>
<p>scanPackage=com.shoufeng.demo</p>
<h3 id="配置-web-xml-文件"><a href="#配置-web-xml-文件" class="headerlink" title="配置 web.xml 文件"></a>配置 web.xml 文件</h3><p>大家都知道，所有依赖于 web 容器的项目，都是从读取 web.xml 文件开始的。我们先配置好 web.xml 中的内容。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">version</span>=<span class="string">"2.4"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>sf Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sfmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.shoufeng.mvc.core.servlet.SFDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>application.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sfmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 SFDispatcherServlet 是有自己模拟 Spring 实现的核心功能类。 </p>
<h3 id="自定义-Annotation"><a href="#自定义-Annotation" class="headerlink" title="自定义 Annotation"></a>自定义 Annotation</h3><h4 id="SFAutowired-注解："><a href="#SFAutowired-注解：" class="headerlink" title="@SFAutowired 注解："></a>@SFAutowired 注解：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoufeng.mvc.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shoufeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SFAutowired &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SFController-注解："><a href="#SFController-注解：" class="headerlink" title="@SFController 注解："></a>@SFController 注解：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoufeng.mvc.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shoufeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SFController &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SFRequestMapping-注解："><a href="#SFRequestMapping-注解：" class="headerlink" title="@SFRequestMapping 注解："></a>@SFRequestMapping 注解：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoufeng.mvc.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shoufeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SFRequestMapping &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SFRequestParam-注解："><a href="#SFRequestParam-注解：" class="headerlink" title="@SFRequestParam 注解："></a>@SFRequestParam 注解：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoufeng.mvc.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shoufeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SFRequestParam &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SFService-注解："><a href="#SFService-注解：" class="headerlink" title="@SFService 注解："></a>@SFService 注解：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoufeng.mvc.core.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shoufeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SFService &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="容器初始化"><a href="#容器初始化" class="headerlink" title="容器初始化"></a>容器初始化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoufeng.mvc.core.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shoufeng.mvc.core.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shoufeng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SFDispatcherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存application.properties配置文件中的内容</span></span><br><span class="line">    <span class="keyword">private</span> Properties contextConfig = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存扫描的所有的类名</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; classNames = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传说中的IOC容器，我们来揭开它的神秘面纱</span></span><br><span class="line">    <span class="comment">//为了简化程序，暂时不考虑ConcurrentHashMap</span></span><br><span class="line">    <span class="comment">// 主要还是关注设计思想和原理</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; ioc = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存url和Method的对应关系</span></span><br><span class="line"><span class="comment">//    private Map&lt;String,Method&gt; handlerMapping = new HashMap&lt;String,Method&gt;();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//思考：为什么不用Map</span></span><br><span class="line">    <span class="comment">//你用Map的话，key，只能是url</span></span><br><span class="line">    <span class="comment">//Handler 本身的功能就是把url和method对应关系，已经具备了Map的功能</span></span><br><span class="line">    <span class="comment">//根据设计原则：冗余的感觉了，单一职责，最少知道原则，帮助我们更好的理解</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Handler&gt; handlerMapping = <span class="keyword">new</span> ArrayList&lt;Handler&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、调用，运行阶段</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doDispatch(req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.getWriter().write(<span class="string">"500 Exection,Detail : "</span> + Arrays.toString(e.getStackTrace()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化阶段</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、加载配置文件</span></span><br><span class="line">        doLoadConfig(config.getInitParameter(<span class="string">"contextConfigLocation"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、扫描相关的类</span></span><br><span class="line">        doScanner(contextConfig.getProperty(<span class="string">"scanPackage"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、初始化扫描到的类，并且将它们放入到ICO容器之中</span></span><br><span class="line">        doInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、完成依赖注入</span></span><br><span class="line">        doAutowired();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、初始化HandlerMapping</span></span><br><span class="line">        initHandlerMapping();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"SF Spring framework is init."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Handler handler = getHandler(req);</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//        if(!this.handlerMapping.containsKey(url))&#123;</span></span><br><span class="line">            resp.getWriter().write(<span class="string">"404 Not Found!!!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得方法的形参列表</span></span><br><span class="line">        Class&lt;?&gt;[] paramTypes = handler.getParamTypes();</span><br><span class="line"></span><br><span class="line">        Object[] paramValues = <span class="keyword">new</span> Object[paramTypes.length];</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String[]&gt; params = req.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; parm : params.entrySet()) &#123;</span><br><span class="line">            String value = Arrays.toString(parm.getValue()).replaceAll(<span class="string">"\\[|\\]"</span>, <span class="string">""</span>)</span><br><span class="line">                    .replaceAll(<span class="string">"\\s"</span>, <span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!handler.paramIndexMapping.containsKey(parm.getKey())) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> index = handler.paramIndexMapping.get(parm.getKey());</span><br><span class="line">            paramValues[index] = convert(paramTypes[index], value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (handler.paramIndexMapping.containsKey(HttpServletRequest<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> reqIndex = handler.paramIndexMapping.get(HttpServletRequest<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            paramValues[reqIndex] = req;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (handler.paramIndexMapping.containsKey(HttpServletResponse<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> respIndex = handler.paramIndexMapping.get(HttpServletResponse<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            paramValues[respIndex] = resp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object returnValue = handler.method.invoke(handler.controller, paramValues);</span><br><span class="line">        <span class="keyword">if</span> (returnValue == <span class="keyword">null</span> || returnValue <span class="keyword">instanceof</span> Void) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.getWriter().write(returnValue.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Handler <span class="title">getHandler</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handlerMapping.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//绝对路径</span></span><br><span class="line">        String url = req.getRequestURI();</span><br><span class="line">        <span class="comment">//处理成相对路径</span></span><br><span class="line">        String contextPath = req.getContextPath();</span><br><span class="line">        url = url.replaceAll(contextPath, <span class="string">""</span>).replaceAll(<span class="string">"/+"</span>, <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Handler handler : <span class="keyword">this</span>.handlerMapping) &#123;</span><br><span class="line">            Matcher matcher = handler.getPattern().matcher(url);</span><br><span class="line">            <span class="keyword">if</span> (!matcher.matches()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> handler;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//url传过来的参数都是String类型的，HTTP是基于字符串协议</span></span><br><span class="line">    <span class="comment">//只需要把String转换为任意类型就好</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">convert</span><span class="params">(Class&lt;?&gt; type, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是int</span></span><br><span class="line">        <span class="keyword">if</span> (Integer<span class="class">.<span class="keyword">class</span> </span>== type) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Double<span class="class">.<span class="keyword">class</span> </span>== type) &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.valueOf(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果还有double或者其他类型，继续加if</span></span><br><span class="line">        <span class="comment">//这时候，我们应该想到策略模式了</span></span><br><span class="line">        <span class="comment">//在这里暂时不实现，希望小伙伴自己来实现</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化url和Method的一对一对应关系</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ioc.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : ioc.entrySet()) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = entry.getValue().getClass();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!clazz.isAnnotationPresent(SFController<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//保存写在类上面的@SFRequestMapping("/demo")</span></span><br><span class="line">            String baseUrl = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (clazz.isAnnotationPresent(SFRequestMapping<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                SFRequestMapping requestMapping = clazz.getAnnotation(SFRequestMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                baseUrl = requestMapping.value();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//默认获取所有的public方法</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : clazz.getMethods()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!method.isAnnotationPresent(SFRequestMapping<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                SFRequestMapping requestMapping = method.getAnnotation(SFRequestMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="comment">//优化</span></span><br><span class="line">                <span class="comment">// //demo///query</span></span><br><span class="line">                String regex = (<span class="string">"/"</span> + baseUrl + <span class="string">"/"</span> + requestMapping.value())</span><br><span class="line">                        .replaceAll(<span class="string">"/+"</span>, <span class="string">"/"</span>);</span><br><span class="line">                Pattern pattern = Pattern.compile(regex);</span><br><span class="line">                <span class="keyword">this</span>.handlerMapping.add(<span class="keyword">new</span> Handler(pattern, entry.getValue(), method));</span><br><span class="line"><span class="comment">//                handlerMapping.put(url,method);</span></span><br><span class="line">                System.out.println(<span class="string">"Mapped :"</span> + pattern + <span class="string">","</span> + method);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动依赖注入</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAutowired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ioc.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : ioc.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//Declared 所有的，特定的 字段，包括private/protected/default</span></span><br><span class="line">            <span class="comment">//正常来说，普通的OOP编程只能拿到public的属性</span></span><br><span class="line">            Field[] fields = entry.getValue().getClass().getDeclaredFields();</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!field.isAnnotationPresent(SFAutowired<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                SFAutowired autowired = field.getAnnotation(SFAutowired<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果用户没有自定义beanName，默认就根据类型注入</span></span><br><span class="line">                <span class="comment">//这个地方省去了对类名首字母小写的情况的判断，这个作为课后作业</span></span><br><span class="line">                <span class="comment">//小伙伴们自己去完善</span></span><br><span class="line">                String beanName = autowired.value().trim();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">""</span>.equals(beanName)) &#123;</span><br><span class="line">                    <span class="comment">//获得接口的类型，作为key待会拿这个key到ioc容器中去取值</span></span><br><span class="line">                    beanName = field.getType().getName();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果是public以外的修饰符，只要加了@Autowired注解，都要强制赋值</span></span><br><span class="line">                <span class="comment">//反射中叫做暴力访问， 强吻</span></span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//用反射机制，动态给字段赋值</span></span><br><span class="line">                    field.set(entry.getValue(), ioc.get(beanName));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化，为DI做准备</span></span><br><span class="line">        <span class="keyword">if</span> (classNames.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String className : classNames) &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//什么样的类才需要初始化呢？</span></span><br><span class="line">                <span class="comment">//加了注解的类，才初始化，怎么判断？</span></span><br><span class="line">                <span class="comment">//为了简化代码逻辑，主要体会设计思想，只举例 @Controller和@Service,</span></span><br><span class="line">                <span class="comment">// @Componment...就一一举例了</span></span><br><span class="line">                <span class="keyword">if</span> (clazz.isAnnotationPresent(SFController<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    Object instance = clazz.newInstance();</span><br><span class="line">                    <span class="comment">//Spring默认类名首字母小写</span></span><br><span class="line">                    String beanName = toLowerFirstCase(clazz.getSimpleName());</span><br><span class="line">                    ioc.put(beanName, instance);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isAnnotationPresent(SFService<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                    <span class="comment">//1、自定义的beanName</span></span><br><span class="line">                    SFService service = clazz.getAnnotation(SFService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    String beanName = service.value();</span><br><span class="line">                    <span class="comment">//2、默认类名首字母小写</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">""</span>.equals(beanName.trim())) &#123;</span><br><span class="line">                        beanName = toLowerFirstCase(clazz.getSimpleName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Object instance = clazz.newInstance();</span><br><span class="line">                    ioc.put(beanName, instance);</span><br><span class="line">                    <span class="comment">//3、根据类型自动赋值,投机取巧的方式</span></span><br><span class="line">                    <span class="keyword">for</span> (Class&lt;?&gt; i : clazz.getInterfaces()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (ioc.containsKey(i.getName())) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"The “"</span> + i.getName() + <span class="string">"” is exists!!"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//把接口的类型直接当成key了</span></span><br><span class="line">                        ioc.put(i.getName(), instance);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果类名本身是小写字母，确实会出问题</span></span><br><span class="line">    <span class="comment">//但是我要说明的是：这个方法是我自己用，private的</span></span><br><span class="line">    <span class="comment">//传值也是自己传，类也都遵循了驼峰命名法</span></span><br><span class="line">    <span class="comment">//默认传入的值，存在首字母小写的情况，也不可能出现非字母的情况</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了简化程序逻辑，就不做其他判断了，大家了解就OK</span></span><br><span class="line">    <span class="comment">//其实用写注释的时间都能够把逻辑写完了</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">toLowerFirstCase</span><span class="params">(String simpleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = simpleName.toCharArray();</span><br><span class="line">        <span class="comment">//之所以加，是因为大小写字母的ASCII码相差32，</span></span><br><span class="line">        <span class="comment">// 而且大写字母的ASCII码要小于小写字母的ASCII码</span></span><br><span class="line">        <span class="comment">//在Java中，对char做算学运算，实际上就是对ASCII码做算学运算</span></span><br><span class="line">        chars[<span class="number">0</span>] += <span class="number">32</span>;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//扫描出相关的类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doScanner</span><span class="params">(String scanPackage)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//scanPackage = com.gupaoedu.demo ，存储的是包路径</span></span><br><span class="line">        <span class="comment">//转换为文件路径，实际上就是把.替换为/就OK了</span></span><br><span class="line">        <span class="comment">//classpath</span></span><br><span class="line">        URL url = <span class="keyword">this</span>.getClass().getClassLoader().getResource(<span class="string">"/"</span> + scanPackage.replaceAll(<span class="string">"\\."</span>, <span class="string">"/"</span>));</span><br><span class="line">        File classPath = <span class="keyword">new</span> File(url.getFile());</span><br><span class="line">        <span class="keyword">for</span> (File file : classPath.listFiles()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">                doScanner(scanPackage + <span class="string">"."</span> + file.getName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!file.getName().endsWith(<span class="string">".class"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String className = (scanPackage + <span class="string">"."</span> + file.getName().replace(<span class="string">".class"</span>, <span class="string">""</span>));</span><br><span class="line">                classNames.add(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载配置文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLoadConfig</span><span class="params">(String contextConfigLocation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//直接从类路径下找到Spring主配置文件所在的路径</span></span><br><span class="line">        <span class="comment">//并且将其读取出来放到Properties对象中</span></span><br><span class="line">        <span class="comment">//相对于scanPackage=com.gupaoedu.demo 从文件中保存到了内存中</span></span><br><span class="line">        InputStream fis = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(contextConfigLocation);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            contextConfig.load(fis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != fis) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存一个url和一个Method的关系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="comment">//必须把url放到HandlerMapping才好理解吧</span></span><br><span class="line">        <span class="keyword">private</span> Pattern pattern;  <span class="comment">//正则</span></span><br><span class="line">        <span class="keyword">private</span> Method method;</span><br><span class="line">        <span class="keyword">private</span> Object controller;</span><br><span class="line">        <span class="keyword">private</span> Class&lt;?&gt;[] paramTypes;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Pattern <span class="title">getPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> pattern;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> method;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> controller;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt;[] getParamTypes() &#123;</span><br><span class="line">            <span class="keyword">return</span> paramTypes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//形参列表</span></span><br><span class="line">        <span class="comment">//参数的名字作为key,参数的顺序，位置作为值</span></span><br><span class="line">        <span class="keyword">private</span> Map&lt;String, Integer&gt; paramIndexMapping;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Pattern pattern, Object controller, Method method)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.pattern = pattern;</span><br><span class="line">            <span class="keyword">this</span>.method = method;</span><br><span class="line">            <span class="keyword">this</span>.controller = controller;</span><br><span class="line"></span><br><span class="line">            paramTypes = method.getParameterTypes();</span><br><span class="line"></span><br><span class="line">            paramIndexMapping = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">            putParamIndexMapping(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putParamIndexMapping</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提取方法中加了注解的参数</span></span><br><span class="line">            <span class="comment">//把方法上的注解拿到，得到的是一个二维数组</span></span><br><span class="line">            <span class="comment">//因为一个参数可以有多个注解，而一个方法又有多个参数</span></span><br><span class="line">            Annotation[][] pa = method.getParameterAnnotations();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pa.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Annotation a : pa[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a <span class="keyword">instanceof</span> SFRequestParam) &#123;</span><br><span class="line">                        String paramName = ((SFRequestParam) a).value();</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="string">""</span>.equals(paramName.trim())) &#123;</span><br><span class="line">                            paramIndexMapping.put(paramName, i);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提取方法中的request和response参数</span></span><br><span class="line">            Class&lt;?&gt;[] paramsTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramsTypes.length; i++) &#123;</span><br><span class="line">                Class&lt;?&gt; type = paramsTypes[i];</span><br><span class="line">                <span class="keyword">if</span> (type == HttpServletRequest<span class="class">.<span class="keyword">class</span> ||</span></span><br><span class="line"><span class="class">                        <span class="title">type</span> </span>== HttpServletResponse<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                    paramIndexMapping.put(type.getName(), i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行效果演示"><a href="#运行效果演示" class="headerlink" title="运行效果演示"></a>运行效果演示</h2><h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfvog5hpifj31h50u0kbt.jpg" alt="image-20200617225559239"></p>
<h3 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfvogof4xpj31j80to77l.jpg" alt="image-20200617225629999"></p>
]]></content>
      <categories>
        <category>spring源码解读</category>
      </categories>
      <tags>
        <tag>模仿spring-mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>模版模式和适配器模式</title>
    <url>/2020/06/20/%E6%A8%A1%E7%89%88%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="0778216378eb89ad4041a64b255c4f8ecb601b4e059c4026f7996e8cf8c4afb5"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰者模式和观察者模式</title>
    <url>/2020/06/20/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="69c71361a839d2be2b7cfe2d924ed86444401a9b496b71f870cab0ec68ca0a25"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构设计的七大原则</title>
    <url>/2020/06/18/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码." /><label>您好, 这里需要密码.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="dc5ddb7eb5ed6c7ab0500e18bb3a646c70a5dceca3d16d40d6606a47a49b3ce0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>轻量级锁</title>
    <url>/2020/06/18/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81/</url>
    <content><![CDATA[<h1 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h1><p>锁的状态总共有四种：无锁状态、偏向锁、轻量级锁和重量级锁。</p>
<h2 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a><strong>锁升级</strong></h2><p>随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁（但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级）。</p>
<p>“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的。但是，首先需要强调一点的是，轻量级锁并不是用来代替重量级锁的，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步块的情况，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>重量级锁（MutexLock）</title>
    <url>/2020/06/18/%E9%87%8D%E9%87%8F%E7%BA%A7%E9%94%81%EF%BC%88MutexLock%EF%BC%89/</url>
    <content><![CDATA[<h1 id="重量级锁（MutexLock）"><a href="#重量级锁（MutexLock）" class="headerlink" title="重量级锁（MutexLock）"></a>重量级锁（MutexLock）</h1><p>Synchronized 是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的 Mutex Lock 来实现的。而操作系统实现线程之间的切换这就需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized 效率低的原因。因此，这种依赖于操作系统 Mutex Lock 所实现的锁我们称之为“重量级锁”。JDK 中对 Synchronized 做的种种优化，其核心都是为了减少这种重量级锁的使用。JDK1.6 以后，为了减少获得锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。</p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>锁优化</title>
    <url>/2020/06/18/%E9%94%81%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h1><h2 id="减少锁持有时间"><a href="#减少锁持有时间" class="headerlink" title="减少锁持有时间"></a><strong>减少锁持有时间</strong></h2><p>只用在有线程安全要求的程序上加锁</p>
<h2 id="减小锁粒度"><a href="#减小锁粒度" class="headerlink" title="减小锁粒度"></a><strong>减小锁粒度</strong></h2><p>将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是ConcurrentHashMap。</p>
<h2 id="锁分离"><a href="#锁分离" class="headerlink" title="锁分离"></a><strong>锁分离</strong></h2><p>最常见的锁分离就是读写锁 ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能，具体也请查看[高并发 Java 五] JDK 并发包 1。读写分离思想可以延伸，只要操作互不影响，锁就可以分离。比如LinkedBlockingQueue 从头部取出，从尾部放数据</p>
<h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a><strong>锁粗化</strong></h2><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。</p>
<h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a><strong>锁消除</strong></h2><p>锁消除是在编译器级别的事情。在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起。</p>
<p>参考：<a href="https://www.jianshu.com/p/39628e1180a9" target="_blank" rel="noopener">https://www.jianshu.com/p/39628e1180a9</a></p>
]]></content>
      <categories>
        <category>juc</category>
      </categories>
      <tags>
        <tag>java锁</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-di运行时序解析</title>
    <url>/2020/06/22/spring-di%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BA%8F%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="spring-di运行时序解析"><a href="#spring-di运行时序解析" class="headerlink" title="spring-di运行时序解析"></a>spring-di运行时序解析</h1><h2 id="Spring-自动装配之依赖注入"><a href="#Spring-自动装配之依赖注入" class="headerlink" title="Spring 自动装配之依赖注入"></a>Spring 自动装配之依赖注入</h2><h3 id="依赖注入发生的时间"><a href="#依赖注入发生的时间" class="headerlink" title="依赖注入发生的时间"></a><strong>依赖注入发生的时间</strong></h3><p>当 Spring IOC 容器完成了 Bean 定义资源的定位、载入和解析注册以后，IOC 容器中已经管理类 Bean 定义的相关数据，但是此时 IOC 容器还没有对所管理的 Bean 进行依赖注入，依赖注入在以下两种情况 发生:</p>
<ol>
<li><p>用户第一次调用 getBean()方法时，IOC 容器触发依赖注入。 </p>
</li>
<li><p>当用户在配置文件中将&lt;bean&gt;元素配置了 lazy-init=false 属性，即让容器在解析注册 Bean 定义 时进行预实例化，触发依赖注入。</p>
</li>
</ol>
<p>BeanFactory 接口定义了 Spring IOC 容器的基本功能规范，是 Spring IOC 容器所应遵守的最底层和 最基本的编程规范。BeanFactory 接口中定义了几个 getBean()方法，就是用户向 IOC 容器索取管理的 Bean 的方法，我们通过分析其子类的具体实现，理解 Spring IOC 容器在用户索取 Bean 时如何完成依 赖注入。</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg158axzvlj31500tujv0.jpg" alt="image-20200622162427796"></p>
<p>在 BeanFactory 中我们可以看到 getBean(String…)方法，但它具体实现在 AbstractBeanFactory 中。</p>
<h3 id="寻找获取-Bean-的入口"><a href="#寻找获取-Bean-的入口" class="headerlink" title="寻找获取 Bean 的入口"></a><strong>寻找获取 Bean 的入口</strong></h3><p>AbstractBeanFactory 的 getBean()相关方法的源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取IOC容器中指定名称的Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span><br><span class="line">   <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取IOC容器中指定名称和类型的Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, @Nullable Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span><br><span class="line">   <span class="keyword">return</span> doGetBean(name, requiredType, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取IOC容器中指定名称和参数的Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span><br><span class="line">   <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, args, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requiredType the required type of the bean to retrieve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span></span><br><span class="line"><span class="comment"> * (only applied when creating a new instance as opposed to retrieving an existing one)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//获取IOC容器中指定名称、类型和参数的Bean</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, @Nullable Class&lt;T&gt; requiredType, @Nullable Object... args)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">//doGetBean才是真正向IoC容器获取被管理Bean的过程</span></span><br><span class="line">   <span class="keyword">return</span> doGetBean(name, requiredType, args, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requiredType the required type of the bean to retrieve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span></span><br><span class="line"><span class="comment"> * (only applied when creating a new instance as opposed to retrieving an existing one)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> typeCheckOnly whether the instance is obtained for a type check,</span></span><br><span class="line"><span class="comment"> * not for actual use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="comment">//真正实现向IOC容器获取Bean的功能，也是触发依赖注入功能的地方</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, @Nullable <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">      @Nullable <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖</span></span><br><span class="line">   <span class="comment">//如果指定的是别名，将别名转换为规范的Bean名称</span></span><br><span class="line">   <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">   Object bean;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">   <span class="comment">//先从缓存中取是否已经有被创建过的单态类型的Bean</span></span><br><span class="line">   <span class="comment">//对于单例模式的Bean整个IOC容器中只创建一次，不需要重复创建</span></span><br><span class="line">   Object sharedInstance = getSingleton(beanName);</span><br><span class="line">   <span class="comment">//IOC容器创建单例模式Bean实例对象</span></span><br><span class="line">   <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="comment">//如果指定名称的Bean在容器中已有单例模式的Bean被创建</span></span><br><span class="line">         <span class="comment">//直接返回已经创建的Bean</span></span><br><span class="line">         <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                  <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//获取给定Bean的实例对象，主要是完成FactoryBean的相关处理</span></span><br><span class="line">      <span class="comment">//注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是</span></span><br><span class="line">      <span class="comment">//创建创建对象的工厂Bean，两者之间有区别</span></span><br><span class="line">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">      <span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line">      <span class="comment">//缓存没有正在创建的单例模式Bean</span></span><br><span class="line">      <span class="comment">//缓存中已经有已经创建的原型模式Bean</span></span><br><span class="line">      <span class="comment">//但是由于循环引用的问题导致实例化对象失败</span></span><br><span class="line">      <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">      <span class="comment">//对IOC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否</span></span><br><span class="line">      <span class="comment">//能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器</span></span><br><span class="line">      <span class="comment">//的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找</span></span><br><span class="line">      BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">      <span class="comment">//当前容器的父级容器存在，且当前容器中不存在指定名称的Bean</span></span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">         <span class="comment">//解析指定Bean名称的原始名称</span></span><br><span class="line">         String nameToLookup = originalBeanName(name);</span><br><span class="line">         <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                  nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">            <span class="comment">//委派父级容器根据指定名称和显式的参数查找</span></span><br><span class="line">            <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">            <span class="comment">//委派父级容器根据指定名称和类型查找</span></span><br><span class="line">            <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建的Bean是否需要进行类型验证，一般不需要</span></span><br><span class="line">      <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">         <span class="comment">//向容器标记指定的Bean已经被创建</span></span><br><span class="line">         markBeanAsCreated(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//根据指定Bean名称获取其父级的Bean定义</span></span><br><span class="line">         <span class="comment">//主要解决Bean继承时子类合并父类公共属性问题</span></span><br><span class="line">         <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">         <span class="comment">//获取当前Bean所有依赖Bean的名称</span></span><br><span class="line">         String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">         <span class="comment">//如果当前Bean有依赖Bean</span></span><br><span class="line">         <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">               <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//递归调用getBean方法，获取当前Bean的依赖Bean</span></span><br><span class="line">               registerDependentBean(dep, beanName);</span><br><span class="line">               <span class="comment">//把被依赖Bean注册给当前依赖的Bean</span></span><br><span class="line">               getBean(dep);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Create bean instance.</span></span><br><span class="line">         <span class="comment">//创建单例模式Bean的实例对象</span></span><br><span class="line">         <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            <span class="comment">//这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象</span></span><br><span class="line">            sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">//创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义</span></span><br><span class="line">                  <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                  <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                  <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                  <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                  <span class="comment">//显式地从容器单例模式Bean缓存中清除实例对象</span></span><br><span class="line">                  destroySingleton(beanName);</span><br><span class="line">                  <span class="keyword">throw</span> ex;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//获取给定Bean的实例对象</span></span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//IOC容器创建原型模式Bean实例对象</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">            <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">            <span class="comment">//原型模式(Prototype)是每次都会创建一个新的对象</span></span><br><span class="line">            Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//回调beforePrototypeCreation方法，默认的功能是注册当前创建的原型对象</span></span><br><span class="line">               beforePrototypeCreation(beanName);</span><br><span class="line">               <span class="comment">//创建指定Bean对象实例</span></span><br><span class="line">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">//回调afterPrototypeCreation方法，默认的功能告诉IOC容器指定Bean的原型对象不再创建</span></span><br><span class="line">               afterPrototypeCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取给定Bean的实例对象</span></span><br><span class="line">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//要创建的Bean既不是单例模式，也不是原型模式，则根据Bean定义资源中</span></span><br><span class="line">         <span class="comment">//配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中</span></span><br><span class="line">         <span class="comment">//比较常用，如：request、session、application等生命周期</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            String scopeName = mbd.getScope();</span><br><span class="line">            <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">            <span class="comment">//Bean定义资源中没有配置生命周期范围，则Bean定义不合法</span></span><br><span class="line">            <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例</span></span><br><span class="line">               Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                  beforePrototypeCreation(beanName);</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">finally</span> &#123;</span><br><span class="line">                     afterPrototypeCreation(beanName);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="comment">//获取给定Bean的实例对象</span></span><br><span class="line">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                     <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                     <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                     ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">   <span class="comment">//对创建的Bean实例对象进行类型检查</span></span><br><span class="line">   <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">         <span class="keyword">if</span> (convertedBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> convertedBean;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">                  ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面对向 IOC 容器获取 Bean 方法的分析，我们可以看到在 Spring 中，如果 Bean 定义的单例模 式(Singleton)，则容器在创建之前先从缓存中查找，以确保整个容器中只存在一个实例对象。如果 Bean 定义的是原型模式(Prototype)，则容器每次都会创建一个新的实例对象。除此之外，Bean 定义还可以 扩展为指定其生命周期范围。</p>
<p>上面的源码只是定义了根据 Bean 定义的模式，采取的不同创建 Bean 实例对象的策略，具体的 Bean 实例对象的创建过程由实现了 ObjectFactory 接口的匿名内部类的 createBean()方法完成，ObjectFactory 使用委派模式，具体的 Bean 实例创建过程交由其实现类 AbstractAutowireCapableBeanFactory 完成，我们继续分析 AbstractAutowireCapableBeanFactory 的 createBean()方法的源码，理解其创建 Bean 实例的具体实现过程。</p>
<h3 id="开始实例化"><a href="#开始实例化" class="headerlink" title="开始实例化"></a><strong>开始实例化</strong></h3><p>AbstractAutowireCapableBeanFactory 类实现了 ObjectFactory 接口，创建容器指定的 Bean 实例对 象，同时还对创建的 Bean 实例对象进行初始化处理。其创建 Bean 实例对象的方法源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Bean实例对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Make sure bean class is actually resolved at this point, and</span></span><br><span class="line">   <span class="comment">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class="line">   <span class="comment">// which cannot be stored in the shared merged bean definition.</span></span><br><span class="line">   <span class="comment">//判断需要创建的Bean是否可以实例化，即是否可以通过当前的类加载器加载</span></span><br><span class="line">   Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">   <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">      mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Prepare method overrides.</span></span><br><span class="line">   <span class="comment">//校验和准备Bean中的方法覆盖</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      mbdToUse.prepareMethodOverrides();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">            beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class="line">      <span class="comment">//如果Bean配置了初始化前和初始化后的处理器，则试图返回一个需要创建Bean的代理对象</span></span><br><span class="line">      Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">      <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> bean;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建Bean的入口</span></span><br><span class="line">      Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> beanInstance;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">      <span class="comment">// A previously detected exception with proper bean creation context already...</span></span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line">      <span class="comment">// An IllegalStateException to be communicated up to DefaultSingletonBeanRegistry...</span></span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbdToUse.getResourceDescription(), beanName, <span class="string">"Unexpected exception during bean creation"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Actually create the specified bean. Pre-creation processing has already happened</span></span><br><span class="line"><span class="comment"> * at this point, e.g. checking &#123;<span class="doctag">@code</span> postProcessBeforeInstantiation&#125; callbacks.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Differentiates between default bean instantiation, use of a</span></span><br><span class="line"><span class="comment"> * factory method, and autowiring a constructor.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mbd the merged bean definition for the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args explicit arguments to use for constructor or factory method invocation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a new instance of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanCreationException if the bean could not be created</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #instantiateBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #instantiateUsingFactoryMethod</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #autowireConstructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//真正创建Bean的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Instantiate the bean.</span></span><br><span class="line">   <span class="comment">//封装被创建的Bean对象</span></span><br><span class="line">   BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">      instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">   <span class="comment">//获取实例化对象的类型</span></span><br><span class="line">   Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">   <span class="keyword">if</span> (beanType != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      mbd.resolvedTargetType = beanType;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Allow post-processors to modify the merged bean definition.</span></span><br><span class="line">   <span class="comment">//调用PostProcessor后置处理器</span></span><br><span class="line">   <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                  <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">   <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">   <span class="comment">//向容器中缓存单例模式的Bean对象，以防循环引用</span></span><br><span class="line">   <span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">         isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">               <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//这里是一个匿名内部类，为了防止循环引用，尽早持有对象的引用</span></span><br><span class="line">      addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">   <span class="comment">//Bean对象的初始化，依赖注入在此触发</span></span><br><span class="line">   <span class="comment">//这个exposedObject在初始化完成之后返回作为依赖注入完成后的Bean</span></span><br><span class="line">   Object exposedObject = bean;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//将Bean实例对象封装，并且Bean定义中配置的属性值赋值给实例对象</span></span><br><span class="line">      populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">      <span class="comment">//初始化Bean对象</span></span><br><span class="line">      exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">         <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      <span class="comment">//获取指定名称的已注册的单例模式Bean对象</span></span><br><span class="line">      Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//根据名称获取的已注册的Bean和正在实例化的Bean是同一个</span></span><br><span class="line">         <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">            <span class="comment">//当前实例化的Bean初始化完成</span></span><br><span class="line">            exposedObject = earlySingletonReference;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//当前Bean依赖其他Bean，并且当发生循环引用时不允许新创建实例对象</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">            String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">            Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line">            <span class="comment">//获取当前Bean所依赖的其他Bean</span></span><br><span class="line">            <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">               <span class="comment">//对依赖Bean进行类型检查</span></span><br><span class="line">               <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                  actualDependentBeans.add(dependentBean);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                     <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                     <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                     <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                     <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                     <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register bean as disposable.</span></span><br><span class="line">   <span class="comment">//注册完成依赖注入的Bean</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的源码注释，我们看到具体的依赖注入实现其实就在以下两个方法中: </p>
<ol>
<li><p>createBeanInstance()方法，生成 Bean 所包含的 java 对象实例。 </p>
</li>
<li><p>populateBean()方法，对 Bean 属性的依赖注入进行处理。 下面继续分析这两个方法的代码实现。</p>
</li>
</ol>
<h3 id="选择-Bean-实例化策略"><a href="#选择-Bean-实例化策略" class="headerlink" title="选择 Bean 实例化策略"></a><strong>选择 Bean 实例化策略</strong></h3><p>在 createBeanInstance()方法中，根据指定的初始化策略，使用简单工厂、工厂方法或者容器的自动装 配特性生成 Java 实例对象，创建对象的源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Bean的实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Make sure bean class is actually resolved at this point.</span></span><br><span class="line">   <span class="comment">//检查确认Bean是可实例化的</span></span><br><span class="line">   Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用工厂方法对Bean进行实例化</span></span><br><span class="line">   <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">   <span class="keyword">if</span> (instanceSupplier != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>)  &#123;</span><br><span class="line">      <span class="comment">//调用工厂方法实例化</span></span><br><span class="line">      <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Shortcut when re-creating the same bean...</span></span><br><span class="line">   <span class="comment">//使用容器的自动装配方法进行实例化</span></span><br><span class="line">   <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">         <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolved = <span class="keyword">true</span>;</span><br><span class="line">            autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">      <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">         <span class="comment">//配置了自动装配属性，使用容器的自动装配实例化</span></span><br><span class="line">         <span class="comment">//容器的自动装配是根据参数类型匹配Bean的构造方法</span></span><br><span class="line">         <span class="keyword">return</span> autowireConstructor(beanName, mbd, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//使用默认的无参构造方法实例化</span></span><br><span class="line">         <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Need to determine the constructor...</span></span><br><span class="line">   <span class="comment">//使用Bean的构造方法进行实例化</span></span><br><span class="line">   Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">   <span class="keyword">if</span> (ctors != <span class="keyword">null</span> ||</span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">         mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">      <span class="comment">//使用容器的自动装配特性，调用匹配的构造方法实例化</span></span><br><span class="line">      <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// No special handling: simply use no-arg constructor.</span></span><br><span class="line">   <span class="comment">//使用默认的无参构造方法实例化</span></span><br><span class="line">   <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用默认的无参构造方法实例化Bean对象</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> BeanWrapper <span class="title">instantiateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Object beanInstance;</span><br><span class="line">      <span class="keyword">final</span> BeanFactory parent = <span class="keyword">this</span>;</span><br><span class="line">      <span class="comment">//获取系统的安全管理接口，JDK标准的安全管理API</span></span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//这里是一个匿名内置类，根据实例化策略创建实例对象</span></span><br><span class="line">         beanInstance = AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt;</span><br><span class="line">               getInstantiationStrategy().instantiate(mbd, beanName, parent),</span><br><span class="line">               getAccessControlContext());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//将实例化的对象封装起来</span></span><br><span class="line">         beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">      &#125;</span><br><span class="line">      BeanWrapper bw = <span class="keyword">new</span> BeanWrapperImpl(beanInstance);</span><br><span class="line">      initBeanWrapper(bw);</span><br><span class="line">      <span class="keyword">return</span> bw;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">"Instantiation of bean failed"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过对上面的代码分析，我们可以看出，对使用工厂方法和自动装配特性的 Bean 的实例化相当比较清 楚，调用相应的工厂方法或者参数匹配的构造方法即可完成实例化对象的工作，但是对于我们最常使用 的默认无参构造方法就需要使用相应的初始化策略(JDK 的反射机制或者 CGLib)来进行初始化了，在方 法 getInstantiationStrategy().instantiate()中就具体实现类使用初始策略实例化对象。</p>
<h3 id="执行-Bean-实例化"><a href="#执行-Bean-实例化" class="headerlink" title="执行 Bean 实例化"></a><strong>执行 Bean 实例化</strong></h3><p>在使用默认的无参构造方法创建 Bean 的实例化对象时，方法 getInstantiationStrategy().instantiate() 调用了 SimpleInstantiationStrategy 类中的实例化 Bean 的方法，其源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleInstantiationStrategy</span> <span class="keyword">implements</span> <span class="title">InstantiationStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Method&gt; currentlyInvokedFactoryMethod = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the factory method currently being invoked or &#123;<span class="doctag">@code</span> null&#125; if none.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Allows factory method implementations to determine whether the current</span></span><br><span class="line"><span class="comment">    * caller is the container itself as opposed to user code.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">getCurrentlyInvokedFactoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> currentlyInvokedFactoryMethod.get();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用初始化策略实例化Bean对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Don't override the class with CGLIB if no overrides.</span></span><br><span class="line">      <span class="comment">//如果Bean定义中没有方法覆盖，则就不需要CGLIB父类类的方法</span></span><br><span class="line">      <span class="keyword">if</span> (!bd.hasMethodOverrides()) &#123;</span><br><span class="line">         Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">         <span class="keyword">synchronized</span> (bd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="comment">//获取对象的构造方法或工厂方法</span></span><br><span class="line">            constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">            <span class="comment">//如果没有构造方法且没有工厂方法</span></span><br><span class="line">            <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//使用JDK的反射机制，判断要实例化的Bean是否是接口</span></span><br><span class="line">               <span class="keyword">final</span> Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">               <span class="keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">"Specified class is an interface"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                     <span class="comment">//这里是一个匿名内置类，使用反射机制获取Bean的构造方法</span></span><br><span class="line">                     constructorToUse = AccessController.doPrivileged(</span><br><span class="line">                           (PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;) () -&gt; clazz.getDeclaredConstructor());</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span> &#123;</span><br><span class="line">                     constructorToUse = clazz.getDeclaredConstructor();</span><br><span class="line">                  &#125;</span><br><span class="line">                  bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(clazz, <span class="string">"No default constructor found"</span>, ex);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//使用BeanUtils实例化，通过反射机制调用”构造方法.newInstance(arg)”来进行实例化</span></span><br><span class="line">         <span class="keyword">return</span> BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// Must generate CGLIB subclass.</span></span><br><span class="line">         <span class="comment">//使用CGLIB来实例化对象</span></span><br><span class="line">         <span class="keyword">return</span> instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Subclasses can override this method, which is implemented to throw</span></span><br><span class="line"><span class="comment">    * UnsupportedOperationException, if they can instantiate an object with</span></span><br><span class="line"><span class="comment">    * the Method Injection specified in the given RootBeanDefinition.</span></span><br><span class="line"><span class="comment">    * Instantiation should use a no-arg constructor.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> Object <span class="title">instantiateWithMethodInjection</span><span class="params">(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Method Injection not supported in SimpleInstantiationStrategy"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner,</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">final</span> Constructor&lt;?&gt; ctor, @Nullable Object... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!bd.hasMethodOverrides()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// use own privileged to change accessibility (when security is on)</span></span><br><span class="line">            AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">               ReflectionUtils.makeAccessible(ctor);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> (args != <span class="keyword">null</span> ? BeanUtils.instantiateClass(ctor, args) : BeanUtils.instantiateClass(ctor));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> instantiateWithMethodInjection(bd, beanName, owner, ctor, args);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Subclasses can override this method, which is implemented to throw</span></span><br><span class="line"><span class="comment">    * UnsupportedOperationException, if they can instantiate an object with</span></span><br><span class="line"><span class="comment">    * the Method Injection specified in the given RootBeanDefinition.</span></span><br><span class="line"><span class="comment">    * Instantiation should use the given constructor and parameters.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> Object <span class="title">instantiateWithMethodInjection</span><span class="params">(RootBeanDefinition bd, @Nullable String beanName,</span></span></span><br><span class="line"><span class="function"><span class="params">         BeanFactory owner, @Nullable Constructor&lt;?&gt; ctor, @Nullable Object... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Method Injection not supported in SimpleInstantiationStrategy"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">instantiate</span><span class="params">(RootBeanDefinition bd, @Nullable String beanName, BeanFactory owner,</span></span></span><br><span class="line"><span class="function"><span class="params">         @Nullable Object factoryBean, <span class="keyword">final</span> Method factoryMethod, @Nullable Object... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">               ReflectionUtils.makeAccessible(factoryMethod);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            ReflectionUtils.makeAccessible(factoryMethod);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         Method priorInvokedFactoryMethod = currentlyInvokedFactoryMethod.get();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            currentlyInvokedFactoryMethod.set(factoryMethod);</span><br><span class="line">            Object result = factoryMethod.invoke(factoryBean, args);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">               result = <span class="keyword">new</span> NullBean();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (priorInvokedFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">               currentlyInvokedFactoryMethod.set(priorInvokedFactoryMethod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               currentlyInvokedFactoryMethod.remove();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(factoryMethod,</span><br><span class="line">               <span class="string">"Illegal arguments to factory method '"</span> + factoryMethod.getName() + <span class="string">"'; "</span> +</span><br><span class="line">               <span class="string">"args: "</span> + StringUtils.arrayToCommaDelimitedString(args), ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(factoryMethod,</span><br><span class="line">               <span class="string">"Cannot access factory method '"</span> + factoryMethod.getName() + <span class="string">"'; is it public?"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">         String msg = <span class="string">"Factory method '"</span> + factoryMethod.getName() + <span class="string">"' threw exception"</span>;</span><br><span class="line">         <span class="keyword">if</span> (bd.getFactoryBeanName() != <span class="keyword">null</span> &amp;&amp; owner <span class="keyword">instanceof</span> ConfigurableBeanFactory &amp;&amp;</span><br><span class="line">               ((ConfigurableBeanFactory) owner).isCurrentlyInCreation(bd.getFactoryBeanName())) &#123;</span><br><span class="line">            msg = <span class="string">"Circular reference involving containing bean '"</span> + bd.getFactoryBeanName() + <span class="string">"' - consider "</span> +</span><br><span class="line">                  <span class="string">"declaring the factory method as static for independence from its containing instance. "</span> + msg;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(factoryMethod, msg, ex.getTargetException());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的代码分析，我们看到了如果 Bean 有方法被覆盖了，则使用 JDK 的反射机制进行实例化，否 则，使用 CGLib 进行实例化。</p>
<p>instantiateWithMethodInjection() 方 法 调 用 SimpleInstantiationStrategy 的 子 类 CGLibSubclassingInstantiationStrategy 使用 CGLib 来进行初始化，其源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//使用CGLIB进行Bean对象实例化</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">instantiate</span><span class="params">(@Nullable Constructor&lt;?&gt; ctor, @Nullable Object... args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//创建代理子类</span></span><br><span class="line">      Class&lt;?&gt; subclass = createEnhancedSubclass(<span class="keyword">this</span>.beanDefinition);</span><br><span class="line">      Object instance;</span><br><span class="line">      <span class="keyword">if</span> (ctor == <span class="keyword">null</span>) &#123;</span><br><span class="line">         instance = BeanUtils.instantiateClass(subclass);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;?&gt; enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes());</span><br><span class="line">            instance = enhancedSubclassConstructor.newInstance(args);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanInstantiationException(<span class="keyword">this</span>.beanDefinition.getBeanClass(),</span><br><span class="line">                  <span class="string">"Failed to invoke constructor for CGLIB enhanced subclass ["</span> + subclass.getName() + <span class="string">"]"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// SPR-10785: set callbacks directly on the instance instead of in the</span></span><br><span class="line">      <span class="comment">// enhanced class (via the Enhancer) in order to avoid memory leaks.</span></span><br><span class="line">      Factory factory = (Factory) instance;</span><br><span class="line">      factory.setCallbacks(<span class="keyword">new</span> Callback[] &#123;NoOp.INSTANCE,</span><br><span class="line">            <span class="keyword">new</span> LookupOverrideMethodInterceptor(<span class="keyword">this</span>.beanDefinition, <span class="keyword">this</span>.owner),</span><br><span class="line">            <span class="keyword">new</span> ReplaceOverrideMethodInterceptor(<span class="keyword">this</span>.beanDefinition, <span class="keyword">this</span>.owner)&#125;);</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create an enhanced subclass of the bean class for the provided bean</span></span><br><span class="line"><span class="comment">    * definition, using CGLIB.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Class&lt;?&gt; createEnhancedSubclass(RootBeanDefinition beanDefinition) &#123;</span><br><span class="line">      <span class="comment">//CGLIB中的类</span></span><br><span class="line">      Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">      <span class="comment">//将Bean本身作为其基类</span></span><br><span class="line">      enhancer.setSuperclass(beanDefinition.getBeanClass());</span><br><span class="line">      enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.owner <span class="keyword">instanceof</span> ConfigurableBeanFactory) &#123;</span><br><span class="line">         ClassLoader cl = ((ConfigurableBeanFactory) <span class="keyword">this</span>.owner).getBeanClassLoader();</span><br><span class="line">         enhancer.setStrategy(<span class="keyword">new</span> ClassLoaderAwareGeneratorStrategy(cl));</span><br><span class="line">      &#125;</span><br><span class="line">      enhancer.setCallbackFilter(<span class="keyword">new</span> MethodOverrideCallbackFilter(beanDefinition));</span><br><span class="line">      enhancer.setCallbackTypes(CALLBACK_TYPES);</span><br><span class="line">      <span class="comment">//使用CGLIB的createClass方法生成实例对象</span></span><br><span class="line">      <span class="keyword">return</span> enhancer.createClass();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CGLib 是一个常用的字节码生成器的类库，它提供了一系列 API 实现 Java 字节码的生成和转换功能。 我们在学习 JDK 的动态代理时都知道，JDK 的动态代理只能针对接口，如果一个类没有实现任何接口， 要对其进行动态代理只能使用 CGLib。</p>
<h3 id="准备依赖注入"><a href="#准备依赖注入" class="headerlink" title="准备依赖注入"></a><strong>准备依赖注入</strong></h3><p>在前面的分析中我们已经了解到 Bean 的依赖注入主要分为两个步骤，首先调用 createBeanInstance() 方法生成 Bean 所包含的 Java 对象实例。然后，调用 populateBean()方法，对 Bean 属性的依赖注入 进行处理。</p>
<p>上面我们已经分析了容器初始化生成 Bean 所包含的 Java 实例对象的过程，现在我们继续分析生成对象 后，Spring IOC 容器是如何将 Bean 的属性依赖关系注入 Bean 实例对象中并设置好的，回到 AbstractAutowireCapableBeanFactory 的 populateBean()方法，对属性依赖注入的代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将Bean属性设置到生成的实例对象上</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span></span><br><span class="line">   <span class="comment">// state of the bean before properties are set. This can be used, for example,</span></span><br><span class="line">   <span class="comment">// to support styles of field injection.</span></span><br><span class="line">   <span class="keyword">boolean</span> continueWithPropertyPopulation = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">            InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">            <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">               continueWithPropertyPopulation = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取容器在解析Bean定义资源时为BeanDefiniton中设置的属性值</span></span><br><span class="line">   PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对依赖注入处理，首先处理autowiring自动装配的依赖注入</span></span><br><span class="line">   <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">      MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">      <span class="comment">//根据Bean名称进行autowiring自动装配处理</span></span><br><span class="line">      <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">         autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">      <span class="comment">//根据Bean类型进行autowiring自动装配处理</span></span><br><span class="line">      <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">         autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pvs = newPvs;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对非autowiring的属性进行依赖注入处理</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">   <span class="keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">         pvs = mbd.getPropertyValues();</span><br><span class="line">      &#125;</span><br><span class="line">      PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">      <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">         <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">               InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">               pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">               <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">         checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (pvs != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//对属性进行注入</span></span><br><span class="line">      applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fill in any missing property values with references to</span></span><br><span class="line"><span class="comment"> * other beans in this factory if autowire is set to "byName".</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean we're wiring up.</span></span><br><span class="line"><span class="comment"> * Useful for debugging messages; not used functionally.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mbd bean definition to update through autowiring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bw BeanWrapper from which we can obtain information about the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pvs the PropertyValues to register wired objects with</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//根据名称对属性进行自动依赖注入</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">autowireByName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对Bean对象中非简单属性(不是简单继承的对象，如8中原始类型，字符串，URL等都是简单属性)进行处理</span></span><br><span class="line">   String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">   <span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">      <span class="comment">//如果Spring IOC容器中包含指定名称的Bean</span></span><br><span class="line">      <span class="keyword">if</span> (containsBean(propertyName)) &#123;</span><br><span class="line">         <span class="comment">//调用getBean方法向IOC容器索取指定名称的Bean实例，迭代触发属性的初始化和依赖注入</span></span><br><span class="line">         Object bean = getBean(propertyName);</span><br><span class="line">         <span class="comment">//为指定名称的属性赋予属性值</span></span><br><span class="line">         pvs.add(propertyName, bean);</span><br><span class="line">         <span class="comment">//指定名称属性注册依赖Bean名称，进行属性依赖注入</span></span><br><span class="line">         registerDependentBean(propertyName, beanName);</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Added autowiring by name from bean name '"</span> + beanName +</span><br><span class="line">                  <span class="string">"' via property '"</span> + propertyName + <span class="string">"' to bean named '"</span> + propertyName + <span class="string">"'"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Not autowiring property '"</span> + propertyName + <span class="string">"' of bean '"</span> + beanName +</span><br><span class="line">                  <span class="string">"' by name: no matching bean found"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract method defining "autowire by type" (bean properties by type) behavior.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is like PicoContainer default, in which there must be exactly one bean</span></span><br><span class="line"><span class="comment"> * of the property type in the bean factory. This makes bean factories simple to</span></span><br><span class="line"><span class="comment"> * configure for small namespaces, but doesn't work as well as standard Spring</span></span><br><span class="line"><span class="comment"> * behavior for bigger applications.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean to autowire by type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mbd the merged bean definition to update through autowiring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bw BeanWrapper from which we can obtain information about the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pvs the PropertyValues to register wired objects with</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//根据类型对属性进行自动依赖注入</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">autowireByType</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取用户定义的类型转换器</span></span><br><span class="line">   TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">   <span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">      converter = bw;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//存放解析的要注入的属性</span></span><br><span class="line">   Set&lt;String&gt; autowiredBeanNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">   <span class="comment">//对Bean对象中非简单属性(不是简单继承的对象，如8中原始类型，字符</span></span><br><span class="line">   <span class="comment">//URL等都是简单属性)进行处理</span></span><br><span class="line">   String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">   <span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//获取指定属性名称的属性描述器</span></span><br><span class="line">         PropertyDescriptor pd = bw.getPropertyDescriptor(propertyName);</span><br><span class="line">         <span class="comment">// Don't try autowiring by type for type Object: never makes sense,</span></span><br><span class="line">         <span class="comment">// even if it technically is a unsatisfied, non-simple property.</span></span><br><span class="line">         <span class="comment">//不对Object类型的属性进行autowiring自动依赖注入</span></span><br><span class="line">         <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span> !</span>= pd.getPropertyType()) &#123;</span><br><span class="line">            <span class="comment">//获取属性的setter方法</span></span><br><span class="line">            MethodParameter methodParam = BeanUtils.getWriteMethodParameter(pd);</span><br><span class="line">            <span class="comment">// Do not allow eager init for type matching in case of a prioritized post-processor.</span></span><br><span class="line">            <span class="comment">//检查指定类型是否可以被转换为目标对象的类型</span></span><br><span class="line">            <span class="keyword">boolean</span> eager = !PriorityOrdered<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">bw</span>.<span class="title">getWrappedInstance</span>())</span>;</span><br><span class="line">            <span class="comment">//创建一个要被注入的依赖描述</span></span><br><span class="line">            DependencyDescriptor desc = <span class="keyword">new</span> AutowireByTypeDependencyDescriptor(methodParam, eager);</span><br><span class="line">            <span class="comment">//根据容器的Bean定义解析依赖关系，返回所有要被注入的Bean对象</span></span><br><span class="line">            Object autowiredArgument = resolveDependency(desc, beanName, autowiredBeanNames, converter);</span><br><span class="line">            <span class="keyword">if</span> (autowiredArgument != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//为属性赋值所引用的对象</span></span><br><span class="line">               pvs.add(propertyName, autowiredArgument);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String autowiredBeanName : autowiredBeanNames) &#123;</span><br><span class="line">               <span class="comment">//指定名称属性注册依赖Bean名称，进行属性依赖注入</span></span><br><span class="line">               registerDependentBean(autowiredBeanName, beanName);</span><br><span class="line">               <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                  logger.debug(<span class="string">"Autowiring by type from bean name '"</span> + beanName + <span class="string">"' via property '"</span> +</span><br><span class="line">                        propertyName + <span class="string">"' to bean named '"</span> + autowiredBeanName + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放已自动注入的属性</span></span><br><span class="line">            autowiredBeanNames.clear();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Apply the given property values, resolving any runtime references</span></span><br><span class="line"><span class="comment">	 * to other beans in this bean factory. Must use deep copy, so we</span></span><br><span class="line"><span class="comment">	 * don't permanently modify this property.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanName the bean name passed for better exception information</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> mbd the merged bean definition</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> bw the BeanWrapper wrapping the target object</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> pvs the new property values</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="comment">//解析并注入依赖属性的过程</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyPropertyValues</span><span class="params">(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pvs.isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//封装属性值</span></span><br><span class="line">		MutablePropertyValues mpvs = <span class="keyword">null</span>;</span><br><span class="line">		List&lt;PropertyValue&gt; original;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (bw <span class="keyword">instanceof</span> BeanWrapperImpl) &#123;</span><br><span class="line">				<span class="comment">//设置安全上下文，JDK安全机制</span></span><br><span class="line">				((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (pvs <span class="keyword">instanceof</span> MutablePropertyValues) &#123;</span><br><span class="line">			mpvs = (MutablePropertyValues) pvs;</span><br><span class="line">			<span class="comment">//属性值已经转换</span></span><br><span class="line">			<span class="keyword">if</span> (mpvs.isConverted()) &#123;</span><br><span class="line">				<span class="comment">// Shortcut: use the pre-converted values as-is.</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">//为实例化对象设置属性值</span></span><br><span class="line">					bw.setPropertyValues(mpvs);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">							mbd.getResourceDescription(), beanName, <span class="string">"Error setting property values"</span>, ex);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//获取属性值对象的原始类型值</span></span><br><span class="line">			original = mpvs.getPropertyValueList();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			original = Arrays.asList(pvs.getPropertyValues());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//获取用户自定义的类型转换</span></span><br><span class="line">		TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">		<span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">			converter = bw;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//创建一个Bean定义属性值解析器，将Bean定义中的属性值解析为Bean实例对象的实际值</span></span><br><span class="line">		BeanDefinitionValueResolver valueResolver = <span class="keyword">new</span> BeanDefinitionValueResolver(<span class="keyword">this</span>, beanName, mbd, converter);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Create a deep copy, resolving any references for values.</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//为属性的解析值创建一个拷贝，将拷贝的数据注入到实例对象中</span></span><br><span class="line">		List&lt;PropertyValue&gt; deepCopy = <span class="keyword">new</span> ArrayList&lt;&gt;(original.size());</span><br><span class="line">		<span class="keyword">boolean</span> resolveNecessary = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (PropertyValue pv : original) &#123;</span><br><span class="line">			<span class="comment">//属性值不需要转换</span></span><br><span class="line">			<span class="keyword">if</span> (pv.isConverted()) &#123;</span><br><span class="line">				deepCopy.add(pv);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//属性值需要转换</span></span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				String propertyName = pv.getName();</span><br><span class="line">				<span class="comment">//原始的属性值，即转换之前的属性值</span></span><br><span class="line">				Object originalValue = pv.getValue();</span><br><span class="line">				<span class="comment">//转换属性值，例如将引用转换为IOC容器中实例化对象引用</span></span><br><span class="line">				Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br><span class="line">				<span class="comment">//转换之后的属性值</span></span><br><span class="line">				Object convertedValue = resolvedValue;</span><br><span class="line">				<span class="comment">//属性值是否可以转换</span></span><br><span class="line">				<span class="keyword">boolean</span> convertible = bw.isWritableProperty(propertyName) &amp;&amp;</span><br><span class="line">						!PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</span><br><span class="line">				<span class="keyword">if</span> (convertible) &#123;</span><br><span class="line">					<span class="comment">//使用用户自定义的类型转换器转换属性值</span></span><br><span class="line">					convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// Possibly store converted value in merged bean definition,</span></span><br><span class="line">				<span class="comment">// in order to avoid re-conversion for every created bean instance.</span></span><br><span class="line">				<span class="comment">//存储转换后的属性值，避免每次属性注入时的转换工作</span></span><br><span class="line">				<span class="keyword">if</span> (resolvedValue == originalValue) &#123;</span><br><span class="line">					<span class="keyword">if</span> (convertible) &#123;</span><br><span class="line">						<span class="comment">//设置属性转换之后的值</span></span><br><span class="line">						pv.setConvertedValue(convertedValue);</span><br><span class="line">					&#125;</span><br><span class="line">					deepCopy.add(pv);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//属性是可转换的，且属性原始值是字符串类型，且属性的原始类型值不是</span></span><br><span class="line">				<span class="comment">//动态生成的字符串，且属性的原始值不是集合或者数组类型</span></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (convertible &amp;&amp; originalValue <span class="keyword">instanceof</span> TypedStringValue &amp;&amp;</span><br><span class="line">						!((TypedStringValue) originalValue).isDynamic() &amp;&amp;</span><br><span class="line">						!(convertedValue <span class="keyword">instanceof</span> Collection || ObjectUtils.isArray(convertedValue))) &#123;</span><br><span class="line">					pv.setConvertedValue(convertedValue);</span><br><span class="line">					<span class="comment">//重新封装属性的值</span></span><br><span class="line">					deepCopy.add(pv);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					resolveNecessary = <span class="keyword">true</span>;</span><br><span class="line">					deepCopy.add(<span class="keyword">new</span> PropertyValue(pv, convertedValue));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mpvs != <span class="keyword">null</span> &amp;&amp; !resolveNecessary) &#123;</span><br><span class="line">			<span class="comment">//标记属性值已经转换过</span></span><br><span class="line">			mpvs.setConverted();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Set our (possibly massaged) deep copy.</span></span><br><span class="line">		<span class="comment">//进行属性依赖注入</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			bw.setPropertyValues(<span class="keyword">new</span> MutablePropertyValues(deepCopy));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">					mbd.getResourceDescription(), beanName, <span class="string">"Error setting property values"</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>分析上述代码，我们可以看出，对属性的注入过程分以下两种情况:</p>
<ol>
<li><p>属性值类型不需要强制转换时，不需要解析属性值，直接准备进行依赖注入。 </p>
</li>
<li><p>属性值需要进行类型强制转换时，如对其他对象的引用等，首先需要解析属性值，然后对解析后的 属性值进行依赖注入。</p>
</li>
</ol>
<p>对属性值的解析是在 BeanDefinitionValueResolver 类中的 resolveValueIfNecessary()方法中进行的， 对属性值的依赖注入是通过 bw.setPropertyValues()方法实现的，在分析属性值的依赖注入之前，我们 先分析一下对属性值的解析过程。</p>
<h3 id="解析属性注入规则"><a href="#解析属性注入规则" class="headerlink" title="解析属性注入规则"></a><strong>解析属性注入规则</strong></h3><p>当容器在对属性进行依赖注入时，如果发现属性值需要进行类型转换，如属性值是容器中另一个 Bean 实例对象的引用，则容器首先需要根据属性值解析出所引用的对象，然后才能将该引用对象注入到目标 实例对象的属性上去，对属性进行解析的由 resolveValueIfNecessary()方法实现，其源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析属性值，对注入类型进行转换</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveValueIfNecessary</span><span class="params">(Object argName, @Nullable Object value)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// We must check each value to see whether it requires a runtime reference</span></span><br><span class="line">   <span class="comment">// to another bean to be resolved.</span></span><br><span class="line">   <span class="comment">//对引用类型的属性进行解析</span></span><br><span class="line">   <span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanReference) &#123;</span><br><span class="line">      RuntimeBeanReference ref = (RuntimeBeanReference) value;</span><br><span class="line">      <span class="comment">//调用引用类型属性的解析方法</span></span><br><span class="line">      <span class="keyword">return</span> resolveReference(argName, ref);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//对属性值是引用容器中另一个Bean名称的解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanNameReference) &#123;</span><br><span class="line">      String refName = ((RuntimeBeanNameReference) value).getBeanName();</span><br><span class="line">      refName = String.valueOf(doEvaluate(refName));</span><br><span class="line">      <span class="comment">//从容器中获取指定名称的Bean</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.beanFactory.containsBean(refName)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">               <span class="string">"Invalid bean name '"</span> + refName + <span class="string">"' in bean reference for "</span> + argName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> refName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//对Bean类型属性的解析，主要是Bean中的内部类</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinitionHolder) &#123;</span><br><span class="line">      <span class="comment">// Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases.</span></span><br><span class="line">      BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value;</span><br><span class="line">      <span class="keyword">return</span> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinition) &#123;</span><br><span class="line">      <span class="comment">// Resolve plain BeanDefinition, without contained name: use dummy name.</span></span><br><span class="line">      BeanDefinition bd = (BeanDefinition) value;</span><br><span class="line">      String innerBeanName = <span class="string">"(inner bean)"</span> + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +</span><br><span class="line">            ObjectUtils.getIdentityHexString(bd);</span><br><span class="line">      <span class="keyword">return</span> resolveInnerBean(argName, innerBeanName, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//对集合数组类型的属性解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedArray) &#123;</span><br><span class="line">      <span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">      ManagedArray array = (ManagedArray) value;</span><br><span class="line">      <span class="comment">//获取数组的类型</span></span><br><span class="line">      Class&lt;?&gt; elementType = array.resolvedElementType;</span><br><span class="line">      <span class="keyword">if</span> (elementType == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//获取数组元素的类型</span></span><br><span class="line">         String elementTypeName = array.getElementTypeName();</span><br><span class="line">         <span class="keyword">if</span> (StringUtils.hasText(elementTypeName)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//使用反射机制创建指定类型的对象</span></span><br><span class="line">               elementType = ClassUtils.forName(elementTypeName, <span class="keyword">this</span>.beanFactory.getBeanClassLoader());</span><br><span class="line">               array.resolvedElementType = elementType;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">               <span class="comment">// Improve the message by showing the context.</span></span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                     <span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line">                     <span class="string">"Error resolving array type for "</span> + argName, ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//没有获取到数组的类型，也没有获取到数组元素的类型</span></span><br><span class="line">         <span class="comment">//则直接设置数组的类型为Object</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            elementType = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建指定类型的数组</span></span><br><span class="line">      <span class="keyword">return</span> resolveManagedArray(argName, (List&lt;?&gt;) value, elementType);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//解析list类型的属性值</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedList) &#123;</span><br><span class="line">      <span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">      <span class="keyword">return</span> resolveManagedList(argName, (List&lt;?&gt;) value);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//解析set类型的属性值</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedSet) &#123;</span><br><span class="line">      <span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">      <span class="keyword">return</span> resolveManagedSet(argName, (Set&lt;?&gt;) value);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//解析map类型的属性值</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedMap) &#123;</span><br><span class="line">      <span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">      <span class="keyword">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;) value);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//解析props类型的属性值，props其实就是key和value均为字符串的map</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedProperties) &#123;</span><br><span class="line">      Properties original = (Properties) value;</span><br><span class="line">      <span class="comment">//创建一个拷贝，用于作为解析后的返回值</span></span><br><span class="line">      Properties copy = <span class="keyword">new</span> Properties();</span><br><span class="line">      original.forEach((propKey, propValue) -&gt; &#123;</span><br><span class="line">         <span class="keyword">if</span> (propKey <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">            propKey = evaluate((TypedStringValue) propKey);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">            propValue = evaluate((TypedStringValue) propValue);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (propKey == <span class="keyword">null</span> || propValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                  <span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line">                  <span class="string">"Error converting Properties key/value pair for "</span> + argName + <span class="string">": resolved to null"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         copy.put(propKey, propValue);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> copy;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//解析字符串类型的属性值</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">      <span class="comment">// Convert value to target type here.</span></span><br><span class="line">      TypedStringValue typedStringValue = (TypedStringValue) value;</span><br><span class="line">      Object valueObject = evaluate(typedStringValue);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//获取属性的目标类型</span></span><br><span class="line">         Class&lt;?&gt; resolvedTargetType = resolveTargetType(typedStringValue);</span><br><span class="line">         <span class="keyword">if</span> (resolvedTargetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//对目标类型的属性进行解析，递归调用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//没有获取到属性的目标对象，则按Object类型返回</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> valueObject;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">         <span class="comment">// Improve the message by showing the context.</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">               <span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line">               <span class="string">"Error converting typed String value for "</span> + argName, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> evaluate(value);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resolve a reference to another bean in the factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析引用类型的属性值</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">resolveReference</span><span class="params">(Object argName, RuntimeBeanReference ref)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Object bean;</span><br><span class="line">      <span class="comment">//获取引用的Bean名称</span></span><br><span class="line">      String refName = ref.getBeanName();</span><br><span class="line">      refName = String.valueOf(doEvaluate(refName));</span><br><span class="line">      <span class="comment">//如果引用的对象在父类容器中，则从父类容器中获取指定的引用对象</span></span><br><span class="line">      <span class="keyword">if</span> (ref.isToParent()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.getParentBeanFactory() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                  <span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line">                  <span class="string">"Can't resolve reference to bean '"</span> + refName +</span><br><span class="line">                  <span class="string">"' in parent factory: no parent factory available"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         bean = <span class="keyword">this</span>.beanFactory.getParentBeanFactory().getBean(refName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//从当前的容器中获取指定的引用Bean对象，如果指定的Bean没有被实例化</span></span><br><span class="line">      <span class="comment">//则会递归触发引用Bean的初始化和依赖注入</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         bean = <span class="keyword">this</span>.beanFactory.getBean(refName);</span><br><span class="line">         <span class="comment">//将当前实例化对象的依赖引用对象</span></span><br><span class="line">         <span class="keyword">this</span>.beanFactory.registerDependentBean(refName, <span class="keyword">this</span>.beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">         bean = <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            <span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line">            <span class="string">"Cannot resolve reference to bean '"</span> + ref.getBeanName() + <span class="string">"' while setting "</span> + argName, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For each element in the managed array, resolve reference if necessary.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析array类型的属性</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">resolveManagedArray</span><span class="params">(Object argName, List&lt;?&gt; ml, Class&lt;?&gt; elementType)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//创建一个指定类型的数组，用于存放和返回解析后的数组</span></span><br><span class="line">   Object resolved = Array.newInstance(elementType, ml.size());</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ml.size(); i++) &#123;</span><br><span class="line">      <span class="comment">//递归解析array的每一个元素，并将解析后的值设置到resolved数组中，索引为i</span></span><br><span class="line">      Array.set(resolved, i,</span><br><span class="line">            resolveValueIfNecessary(<span class="keyword">new</span> KeyedArgName(argName, i), ml.get(i)));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> resolved;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For each element in the managed list, resolve reference if necessary.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析list类型的属性</span></span><br><span class="line"><span class="keyword">private</span> List&lt;?&gt; resolveManagedList(Object argName, List&lt;?&gt; ml) &#123;</span><br><span class="line">   List&lt;Object&gt; resolved = <span class="keyword">new</span> ArrayList&lt;&gt;(ml.size());</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ml.size(); i++) &#123;</span><br><span class="line">      <span class="comment">//递归解析list的每一个元素</span></span><br><span class="line">      resolved.add(</span><br><span class="line">            resolveValueIfNecessary(<span class="keyword">new</span> KeyedArgName(argName, i), ml.get(i)));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> resolved;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For each element in the managed set, resolve reference if necessary.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析set类型的属性</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;?&gt; resolveManagedSet(Object argName, Set&lt;?&gt; ms) &#123;</span><br><span class="line">   Set&lt;Object&gt; resolved = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(ms.size());</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//递归解析set的每一个元素</span></span><br><span class="line">   <span class="keyword">for</span> (Object m : ms) &#123;</span><br><span class="line">      resolved.add(resolveValueIfNecessary(<span class="keyword">new</span> KeyedArgName(argName, i), m));</span><br><span class="line">      i++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> resolved;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * For each element in the managed map, resolve reference if necessary.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析map类型的属性</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;?, ?&gt; resolveManagedMap(Object argName, Map&lt;?, ?&gt; mm) &#123;</span><br><span class="line">   Map&lt;Object, Object&gt; resolved = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(mm.size());</span><br><span class="line">   <span class="comment">//递归解析map中每一个元素的key和value</span></span><br><span class="line">   <span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : mm.entrySet()) &#123;</span><br><span class="line">      Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey());</span><br><span class="line">      Object resolvedValue = resolveValueIfNecessary(</span><br><span class="line">            <span class="keyword">new</span> KeyedArgName(argName, entry.getKey()), entry.getValue());</span><br><span class="line">      resolved.put(resolvedKey, resolvedValue);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> resolved;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的代码分析，我们明白了 Spring 是如何将引用类型，内部类以及集合类型等属性进行解析的， 属性值解析完成后就可以进行依赖注入了，依赖注入的过程就是 Bean 对象实例设置到它所依赖的 Bean 对象属性上去。而真正的依赖注入是通过 bw.setPropertyValues()方法实现的，该方法也使用了委托模 式，在 BeanWrapper 接口中至少定义了方法声明，依赖注入的具体实现交由其实现类 BeanWrapperImpl 来完成，下面我们就分析依 BeanWrapperImpl 中赖注入相关的源码。</p>
<h3 id="注入赋值"><a href="#注入赋值" class="headerlink" title="注入赋值"></a><strong>注入赋值</strong></h3><p>BeanWrapperImpl 类主要是对容器中完成初始化的 Bean 实例对象进行属性的依赖注入，即把 Bean 对象设置到它所依赖的另一个 Bean 的属性中去。然而，BeanWrapperImpl 中的注入方法实际上由 AbstractNestablePropertyAccessor 来实现的，其相关源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现属性依赖注入功能</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (tokens.keys != <span class="keyword">null</span>) &#123;</span><br><span class="line">      processKeyedProperty(tokens, pv);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      processLocalProperty(tokens, pv);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现属性依赖注入功能</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processKeyedProperty</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//调用属性的getter方法，获取属性的值</span></span><br><span class="line">   Object propValue = getPropertyHoldingValue(tokens);</span><br><span class="line">   PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);</span><br><span class="line">   <span class="keyword">if</span> (ph == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(</span><br><span class="line">            getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.actualName, <span class="string">"No property handler found"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   Assert.state(tokens.keys != <span class="keyword">null</span>, <span class="string">"No token keys"</span>);</span><br><span class="line">   String lastKey = tokens.keys[tokens.keys.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">//注入array类型的属性值</span></span><br><span class="line">   <span class="keyword">if</span> (propValue.getClass().isArray()) &#123;</span><br><span class="line">      Class&lt;?&gt; requiredType = propValue.getClass().getComponentType();</span><br><span class="line">      <span class="keyword">int</span> arrayIndex = Integer.parseInt(lastKey);</span><br><span class="line">      Object oldValue = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; arrayIndex &lt; Array.getLength(propValue)) &#123;</span><br><span class="line">            oldValue = Array.get(propValue, arrayIndex);</span><br><span class="line">         &#125;</span><br><span class="line">         Object convertedValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">               requiredType, ph.nested(tokens.keys.length));</span><br><span class="line">         <span class="comment">//获取集合类型属性的长度</span></span><br><span class="line">         <span class="keyword">int</span> length = Array.getLength(propValue);</span><br><span class="line">         <span class="keyword">if</span> (arrayIndex &gt;= length &amp;&amp; arrayIndex &lt; <span class="keyword">this</span>.autoGrowCollectionLimit) &#123;</span><br><span class="line">            Class&lt;?&gt; componentType = propValue.getClass().getComponentType();</span><br><span class="line">            Object newArray = Array.newInstance(componentType, arrayIndex + <span class="number">1</span>);</span><br><span class="line">            System.arraycopy(propValue, <span class="number">0</span>, newArray, <span class="number">0</span>, length);</span><br><span class="line">            setPropertyValue(tokens.actualName, newArray);</span><br><span class="line">            <span class="comment">//调用属性的getter方法，获取属性的值</span></span><br><span class="line">            propValue = getPropertyValue(tokens.actualName);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//将属性的值赋值给数组中的元素</span></span><br><span class="line">         Array.set(propValue, arrayIndex, convertedValue);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line">               <span class="string">"Invalid array index in property path '"</span> + tokens.canonicalName + <span class="string">"'"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//注入list类型的属性值</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">      <span class="comment">//获取list集合的类型</span></span><br><span class="line">      Class&lt;?&gt; requiredType = ph.getCollectionType(tokens.keys.length);</span><br><span class="line">      List&lt;Object&gt; list = (List&lt;Object&gt;) propValue;</span><br><span class="line">      <span class="comment">//获取list集合的size</span></span><br><span class="line">      <span class="keyword">int</span> index = Integer.parseInt(lastKey);</span><br><span class="line">      Object oldValue = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; index &lt; list.size()) &#123;</span><br><span class="line">         oldValue = list.get(index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//获取list解析后的属性值</span></span><br><span class="line">      Object convertedValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">            requiredType, ph.nested(tokens.keys.length));</span><br><span class="line">      <span class="keyword">int</span> size = list.size();</span><br><span class="line">      <span class="comment">//如果list的长度大于属性值的长度，则多余的元素赋值为null</span></span><br><span class="line">      <span class="keyword">if</span> (index &gt;= size &amp;&amp; index &lt; <span class="keyword">this</span>.autoGrowCollectionLimit) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &lt; index; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               list.add(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (NullPointerException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line">                     <span class="string">"Cannot set element with index "</span> + index + <span class="string">" in List of size "</span> +</span><br><span class="line">                     size + <span class="string">", accessed using property path '"</span> + tokens.canonicalName +</span><br><span class="line">                     <span class="string">"': List does not support filling up gaps with null elements"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         list.add(convertedValue);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将值添加到list中</span></span><br><span class="line">            list.set(index, convertedValue);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line">                  <span class="string">"Invalid list index in property path '"</span> + tokens.canonicalName + <span class="string">"'"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//注入map类型的属性值</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">      <span class="comment">//获取map集合key的类型</span></span><br><span class="line">      Class&lt;?&gt; mapKeyType = ph.getMapKeyType(tokens.keys.length);</span><br><span class="line">      <span class="comment">//获取map集合value的类型</span></span><br><span class="line">      Class&lt;?&gt; mapValueType = ph.getMapValueType(tokens.keys.length);</span><br><span class="line">      Map&lt;Object, Object&gt; map = (Map&lt;Object, Object&gt;) propValue;</span><br><span class="line">      <span class="comment">// IMPORTANT: Do not pass full property name in here - property editors</span></span><br><span class="line">      <span class="comment">// must not kick in for map keys but rather only for map values.</span></span><br><span class="line">      TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);</span><br><span class="line">      <span class="comment">//解析map类型属性key值</span></span><br><span class="line">      Object convertedMapKey = convertIfNecessary(<span class="keyword">null</span>, <span class="keyword">null</span>, lastKey, mapKeyType, typeDescriptor);</span><br><span class="line">      Object oldValue = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (isExtractOldValueForEditor()) &#123;</span><br><span class="line">         oldValue = map.get(convertedMapKey);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Pass full property name and old value in here, since we want full</span></span><br><span class="line">      <span class="comment">// conversion ability for map values.</span></span><br><span class="line">      <span class="comment">//解析map类型属性value值</span></span><br><span class="line">      Object convertedMapValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">            mapValueType, ph.nested(tokens.keys.length));</span><br><span class="line">      <span class="comment">//将解析后的key和value值赋值给map集合属性</span></span><br><span class="line">      map.put(convertedMapKey, convertedMapValue);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line">            <span class="string">"Property referenced in indexed property path '"</span> + tokens.canonicalName +</span><br><span class="line">            <span class="string">"' is neither an array nor a List nor a Map; returned value was ["</span> + propValue + <span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getPropertyHoldingValue</span><span class="params">(PropertyTokenHolder tokens)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Apply indexes and map keys: fetch value for all keys but the last one.</span></span><br><span class="line">   Assert.state(tokens.keys != <span class="keyword">null</span>, <span class="string">"No token keys"</span>);</span><br><span class="line">   PropertyTokenHolder getterTokens = <span class="keyword">new</span> PropertyTokenHolder(tokens.actualName);</span><br><span class="line">   getterTokens.canonicalName = tokens.canonicalName;</span><br><span class="line">   getterTokens.keys = <span class="keyword">new</span> String[tokens.keys.length - <span class="number">1</span>];</span><br><span class="line">   System.arraycopy(tokens.keys, <span class="number">0</span>, getterTokens.keys, <span class="number">0</span>, tokens.keys.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   Object propValue;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//获取属性值</span></span><br><span class="line">      propValue = getPropertyValue(getterTokens);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (NotReadablePropertyException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NotWritablePropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line">            <span class="string">"Cannot access indexed value in property referenced "</span> +</span><br><span class="line">            <span class="string">"in indexed property path '"</span> + tokens.canonicalName + <span class="string">"'"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (propValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// null map value case</span></span><br><span class="line">      <span class="keyword">if</span> (isAutoGrowNestedPaths()) &#123;</span><br><span class="line">         <span class="keyword">int</span> lastKeyIndex = tokens.canonicalName.lastIndexOf(<span class="string">'['</span>);</span><br><span class="line">         getterTokens.canonicalName = tokens.canonicalName.substring(<span class="number">0</span>, lastKeyIndex);</span><br><span class="line">         propValue = setDefaultValue(getterTokens);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line">               <span class="string">"Cannot access indexed value in property referenced "</span> +</span><br><span class="line">               <span class="string">"in indexed property path '"</span> + tokens.canonicalName + <span class="string">"': returned null"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> propValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过对上面注入依赖代码的分析，我们已经明白了 Spring IOC 容器是如何将属性的值注入到 Bean 实 例对象中去的:</p>
<ol>
<li><p>对于集合类型的属性，将其属性值解析为目标类型的集合后直接赋值给属性。 </p>
</li>
<li><p>对于非集合类型的属性，大量使用了 JDK 的反射机制，通过属性的 getter()方法获取指定属性注入 以前的值，同时调用属性的 setter()方法为属性设置注入后的值。看到这里相信很多人都明白了 Spring 的 setter()注入原理。</p>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg16cposzgj31hy0ll0ua.jpg" alt="一步一步手绘Spring DI运行时序图"></p>
<p>至此 Spring IOC 容器对 Bean 定义资源文件的定位，载入、解析和依赖注入已经全部分析完毕，现在 Spring IOC 容器中管理了一系列靠依赖关系联系起来的 Bean，程序不需要应用自己手动创建所需的对 象，Spring IOC 容器会在我们使用的时候自动为我们创建，并且为我们注入好相关的依赖，这就是 Spring 核心功能的控制反转和依赖注入的相关功能。</p>
<h2 id="IOC-容器中那些鲜为人知的细节"><a href="#IOC-容器中那些鲜为人知的细节" class="headerlink" title="IOC 容器中那些鲜为人知的细节"></a>IOC 容器中那些鲜为人知的细节</h2><p>通过前面章节中对 Spring IOC 容器的源码分析，我们已经基本上了解了 Spring IOC 容器对 Bean 定义 资源的定位、载入和注册过程，同时也清楚了当用户通过 getBean()方法向 IOC 容器获取被管理的 Bean 时，IOC 容器对 Bean 进行的初始化和依赖注入过程，这些是 Spring IOC 容器的基本功能特性。 Spring IOC 容器还有一些高级特性，如使用 lazy-init 属性对 Bean 预初始化、FactoryBean 产生或者 修饰 Bean 对象的生成、IOC 容器初始化 Bean 过程中使用 BeanPostProcessor 后置处理器对 Bean 声 明周期事件管理等。</p>
<h3 id="关于延时加载"><a href="#关于延时加载" class="headerlink" title="关于延时加载"></a><strong>关于延时加载</strong></h3><p>通过前面我们对 IOC 容器的实现和工作原理分析，我们已经知道 IOC 容器的初始化过程就是对 Bean 定义资源的定位、载入和注册，此时容器对 Bean 的依赖注入并没有发生，依赖注入主要是在应用程序 第一次向容器索取 Bean 时，通过 getBean()方法的调用完成。<br> 当 Bean 定义资源的&lt;Bean&gt;元素中配置了 lazy-init=false 属性时，容器将会在初始化的时候对所配置 的 Bean 进行预实例化，Bean 的依赖注入在容器初始化的时候就已经完成。这样，当应用程序第一次 向容器索取被管理的 Bean 时，就不用再初始化和对 Bean 进行依赖注入了，直接从容器中获取已经完 成依赖注入的现成 Bean，可以提高应用第一次向容器获取 Bean 的性能。</p>
<p><strong>1、refresh()方法</strong></p>
<p>先从 IOC 容器的初始化过程开始，我们知道 IOC 容器读入已经定位的 Bean 定义资源是从 refresh()方 法开始的，我们首先从 AbstractApplicationContext 类的 refresh()方法入手分析，源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      <span class="comment">//1、调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      <span class="comment">//2、告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入从</span></span><br><span class="line">      <span class="comment">//子类的refreshBeanFactory()方法启动</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      <span class="comment">//3、为BeanFactory配置容器特性，例如类加载器、事件处理器等</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         <span class="comment">//4、为容器的某些子类指定特殊的BeanPost事件处理器</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         <span class="comment">//5、调用所有注册的BeanFactoryPostProcessor的Bean</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         <span class="comment">//6、为BeanFactory注册BeanPost事件处理器.</span></span><br><span class="line">         <span class="comment">//BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         <span class="comment">//7、初始化信息源，和国际化相关.</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         <span class="comment">//8、初始化容器事件传播器.</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         <span class="comment">//9、调用子类的某些特殊Bean初始化方法</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         <span class="comment">//10、为事件传播器注册事件监听器.</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         <span class="comment">//11、初始化所有剩余的单例Bean</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         <span class="comment">//12、初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         <span class="comment">//13、销毁已创建的Bean</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">         <span class="comment">//14、取消refresh操作，重置容器的同步标识。</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         <span class="comment">//15、重设公共缓存</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 refresh()方法中 ConfigurableListableBeanFactorybeanFactory = obtainFreshBeanFactory();启动了 Bean 定义资源的载入、注册过程，而 finishBeanFactoryInitialization 方法是对注册后的 Bean定义中的预实例化(lazy-init=false,Spring 默认就是预实例化,即为 true)的 Bean 进行处理的地方。</p>
<p><strong>2、finishBeanFactoryInitialization 处理预实例化 Bean</strong></p>
<p>当 Bean 定义资源被载入 IOC 容器之后，容器将 Bean 定义资源解析为容器内部的数据结构 BeanDefinition 注册到容器中，AbstractApplicationContext 类中的 finishBeanFactoryInitialization() 方法对配置了预实例化属性的 Bean 进行预初始化过程，源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对配置了lazy-init属性的Bean进行预实例化处理</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line">   <span class="comment">//这是Spring3以后新加的代码，为容器指定一个转换服务(ConversionService)</span></span><br><span class="line">   <span class="comment">//在对某些Bean属性进行转换时使用</span></span><br><span class="line">   <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">         beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">      beanFactory.setConversionService(</span><br><span class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register a default embedded value resolver if no bean post-processor</span></span><br><span class="line">   <span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">   <span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">      beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware<span class="class">.<span class="keyword">class</span>, <span class="title">false</span>, <span class="title">false</span>)</span>;</span><br><span class="line">   <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">      getBean(weaverAwareName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">   <span class="comment">//为了类型匹配，停止使用临时的类加载器</span></span><br><span class="line">   beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">   <span class="comment">//缓存容器中所有注册的BeanDefinition元数据，以防被修改</span></span><br><span class="line">   beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">   <span class="comment">//对配置了lazy-init属性的单态模式Bean进行预实例化处理</span></span><br><span class="line">   beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConfigurableListableBeanFactory 是 一 个 接 口 ， 其 preInstantiateSingletons() 方 法 由 其 子 类 DefaultListableBeanFactory 提供。</p>
<p><strong>3、DefaultListableBeanFactory 对配置 lazy-init 属性单态 Bean 的预实例化</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对配置lazy-init属性单态Bean的预实例化</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.debug(<span class="string">"Pre-instantiating singletons in "</span> + <span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line">   <span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">   List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line">   <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">      <span class="comment">//获取指定名称的Bean定义</span></span><br><span class="line">      RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">      <span class="comment">//Bean不是抽象的，是单态模式的，且lazy-init属性配置为false</span></span><br><span class="line">      <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">         <span class="comment">//如果指定名称的bean是创建容器的Bean</span></span><br><span class="line">         <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">            <span class="comment">//FACTORY_BEAN_PREFIX=”&amp;”，当Bean名称前面加”&amp;”符号</span></span><br><span class="line">            <span class="comment">//时，获取的是产生容器对象本身，而不是容器产生的Bean.</span></span><br><span class="line">            <span class="comment">//调用getBean方法，触发容器对Bean实例化和依赖注入过程</span></span><br><span class="line">            <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">            <span class="comment">//标识是否需要预实例化</span></span><br><span class="line">            <span class="keyword">boolean</span> isEagerInit;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">               <span class="comment">//一个匿名内部类</span></span><br><span class="line">               isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;) () -&gt;</span><br><span class="line">                     ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit(),</span><br><span class="line">                     getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                     ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">               <span class="comment">//调用getBean方法，触发容器对Bean实例化和依赖注入过程</span></span><br><span class="line">               getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            getBean(beanName);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line">   <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">      Object singletonInstance = getSingleton(beanName);</span><br><span class="line">      <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">         <span class="keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">         <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">               smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过对 lazy-init 处理源码的分析，我们可以看出，如果设置了 lazy-init 属性，则容器在完成 Bean 定 义的注册之后，会通过 getBean 方法，触发对指定 Bean 的初始化和依赖注入过程，这样当应用第一次向容器索取所需的 Bean 时，容器不再需要对 Bean 进行初始化和依赖注入，直接从已经完成实例化和依赖注入的 Bean 中取一个现成的 Bean，这样就提高了第一次获取 Bean 的性能。</p>
<h3 id="关于-FactoryBean-和-BeanFactory"><a href="#关于-FactoryBean-和-BeanFactory" class="headerlink" title="关于 FactoryBean 和 BeanFactory"></a><strong>关于 FactoryBean 和 BeanFactory</strong></h3><p>在 Spring 中，有两个很容易混淆的类:BeanFactory 和 FactoryBean。<br> BeanFactory:Bean 工厂，是一个工厂(Factory)，我们 Spring IOC 容器的最顶层接口就是这个 BeanFactory，它的作用是管理 Bean，即实例化、定位、配置应用程序中的对象及建立这些对象间的 依赖。<br> FactoryBean:工厂 Bean，是一个 Bean，作用是产生其他 bean 实例。通常情况下，这种 Bean 没有 什么特别的要求，仅需要提供一个工厂方法，该方法用来返回其他 Bean 实例。通常情况下，Bean 无 须自己实现工厂模式，Spring 容器担任工厂角色;但少数情况下，容器中的 Bean 本身就是工厂，其作 用是产生其它 Bean 实例。<br> 当用户使用容器本身时，可以使用转义字符”&amp;”来得到 FactoryBean 本身，以区别通过 FactoryBean 产生的实例对象和 FactoryBean 对象本身。在 BeanFactory 中通过如下代码定义了该转义字符: String FACTORY_BEAN_PREFIX = “&amp;”;<br> 如果 myJndiObject 是一个 FactoryBean，则使用&amp;myJndiObject 得到的是 myJndiObject 对象，而 不是 myJndiObject 产生出来的对象。<br> <strong>1、FactoryBean 源码:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//工厂Bean，用于产生其他对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance (possibly shared or independent) of the object</span></span><br><span class="line"><span class="comment">    * managed by this factory.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;As with a &#123;<span class="doctag">@link</span> BeanFactory&#125;, this allows support for both the</span></span><br><span class="line"><span class="comment">    * Singleton and Prototype design pattern.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span></span><br><span class="line"><span class="comment">    * the call (for example because it is involved in a circular reference),</span></span><br><span class="line"><span class="comment">    * throw a corresponding &#123;<span class="doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">    * objects. The factory will consider this as normal value to be used; it</span></span><br><span class="line"><span class="comment">    * will not throw a FactoryBeanNotInitializedException in this case anymore.</span></span><br><span class="line"><span class="comment">    * FactoryBean implementations are encouraged to throw</span></span><br><span class="line"><span class="comment">    * FactoryBeanNotInitializedException themselves now, as appropriate.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean (can be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception in case of creation errors</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> FactoryBeanNotInitializedException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//获取容器管理的对象实例</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">    * or &#123;<span class="doctag">@code</span> null&#125; if not known in advance.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This allows one to check for specific types of beans without</span></span><br><span class="line"><span class="comment">    * instantiating objects, for example on autowiring.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;In the case of implementations that are creating a singleton object,</span></span><br><span class="line"><span class="comment">    * this method should try to avoid singleton creation as far as possible;</span></span><br><span class="line"><span class="comment">    * it should rather estimate the type in advance.</span></span><br><span class="line"><span class="comment">    * For prototypes, returning a meaningful type here is advisable too.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span></span><br><span class="line"><span class="comment">    * been fully initialized. It must not rely on state created during</span></span><br><span class="line"><span class="comment">    * initialization; of course, it can still use such state if available.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span></span><br><span class="line"><span class="comment">    * this method properly, using the current state of the FactoryBean.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">    * or &#123;<span class="doctag">@code</span> null&#125; if not known at the time of the call</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> ListableBeanFactory#getBeansOfType</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//获取Bean工厂创建的对象的类型</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Is the object managed by this factory a singleton? That is,</span></span><br><span class="line"><span class="comment">    * will &#123;<span class="doctag">@link</span> #getObject()&#125; always return the same object</span></span><br><span class="line"><span class="comment">    * (a reference that can be cached)?</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span></span><br><span class="line"><span class="comment">    * the object returned from &#123;<span class="doctag">@code</span> getObject()&#125; might get cached</span></span><br><span class="line"><span class="comment">    * by the owning BeanFactory. Hence, do not return &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">    * unless the FactoryBean always exposes the same reference.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The singleton status of the FactoryBean itself will generally</span></span><br><span class="line"><span class="comment">    * be provided by the owning BeanFactory; usually, it has to be</span></span><br><span class="line"><span class="comment">    * defined as singleton there.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="doctag">@code</span> false&#125; does not</span></span><br><span class="line"><span class="comment">    * necessarily indicate that returned objects are independent instances.</span></span><br><span class="line"><span class="comment">    * An implementation of the extended &#123;<span class="doctag">@link</span> SmartFactoryBean&#125; interface</span></span><br><span class="line"><span class="comment">    * may explicitly indicate independent instances through its</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="doctag">@link</span> FactoryBean&#125;</span></span><br><span class="line"><span class="comment">    * implementations which do not implement this extended interface are</span></span><br><span class="line"><span class="comment">    * simply assumed to always return independent instances if the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The default implementation returns &#123;<span class="doctag">@code</span> true&#125;, since a</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether the exposed object is a singleton</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getObject()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> SmartFactoryBean#isPrototype()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//Bean工厂创建的对象是否是单态模式，如果是单态模式，则整个容器中只有一个实例</span></span><br><span class="line">   <span class="comment">//对象，每次请求都返回同一个实例对象</span></span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、AbstractBeanFactory 的 getBean()方法调用 FactoryBean:</strong></p>
<p>在前面我们分析 Spring IOC 容器实例化 Bean 并进行依赖注入过程的源码时，提到在 getBean()方法 触发容器实例化 Bean 的时候会调用 AbstractBeanFactory 的 doGetBean()方法来进行实例化的过程， 源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真正实现向IOC容器获取Bean的功能，也是触发依赖注入功能的地方</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, @Nullable <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">      @Nullable <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据指定的名称获取被管理Bean的名称，剥离指定名称中对容器的相关依赖</span></span><br><span class="line">   <span class="comment">//如果指定的是别名，将别名转换为规范的Bean名称</span></span><br><span class="line">   <span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">   Object bean;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Eagerly check singleton cache for manually registered singletons.</span></span><br><span class="line">   <span class="comment">//先从缓存中取是否已经有被创建过的单态类型的Bean</span></span><br><span class="line">   <span class="comment">//对于单例模式的Bean整个IOC容器中只创建一次，不需要重复创建</span></span><br><span class="line">   Object sharedInstance = getSingleton(beanName);</span><br><span class="line">   <span class="comment">//IOC容器创建单例模式Bean实例对象</span></span><br><span class="line">   <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="comment">//如果指定名称的Bean在容器中已有单例模式的Bean被创建</span></span><br><span class="line">         <span class="comment">//直接返回已经创建的Bean</span></span><br><span class="line">         <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                  <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//获取给定Bean的实例对象，主要是完成FactoryBean的相关处理</span></span><br><span class="line">      <span class="comment">//注意：BeanFactory是管理容器中Bean的工厂，而FactoryBean是</span></span><br><span class="line">      <span class="comment">//创建创建对象的工厂Bean，两者之间有区别</span></span><br><span class="line">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Fail if we're already creating this bean instance:</span></span><br><span class="line">      <span class="comment">// We're assumably within a circular reference.</span></span><br><span class="line">      <span class="comment">//缓存没有正在创建的单例模式Bean</span></span><br><span class="line">      <span class="comment">//缓存中已经有已经创建的原型模式Bean</span></span><br><span class="line">      <span class="comment">//但是由于循环引用的问题导致实例化对象失败</span></span><br><span class="line">      <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Check if bean definition exists in this factory.</span></span><br><span class="line">      <span class="comment">//对IOC容器中是否存在指定名称的BeanDefinition进行检查，首先检查是否</span></span><br><span class="line">      <span class="comment">//能在当前的BeanFactory中获取的所需要的Bean，如果不能则委托当前容器</span></span><br><span class="line">      <span class="comment">//的父级容器去查找，如果还是找不到则沿着容器的继承体系向父级容器查找</span></span><br><span class="line">      BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">      <span class="comment">//当前容器的父级容器存在，且当前容器中不存在指定名称的Bean</span></span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         <span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">         <span class="comment">//解析指定Bean名称的原始名称</span></span><br><span class="line">         String nameToLookup = originalBeanName(name);</span><br><span class="line">         <span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">                  nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line">            <span class="comment">//委派父级容器根据指定名称和显式的参数查找</span></span><br><span class="line">            <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">            <span class="comment">//委派父级容器根据指定名称和类型查找</span></span><br><span class="line">            <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建的Bean是否需要进行类型验证，一般不需要</span></span><br><span class="line">      <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">         <span class="comment">//向容器标记指定的Bean已经被创建</span></span><br><span class="line">         markBeanAsCreated(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//根据指定Bean名称获取其父级的Bean定义</span></span><br><span class="line">         <span class="comment">//主要解决Bean继承时子类合并父类公共属性问题</span></span><br><span class="line">         <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class="line">         <span class="comment">//获取当前Bean所有依赖Bean的名称</span></span><br><span class="line">         String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">         <span class="comment">//如果当前Bean有依赖Bean</span></span><br><span class="line">         <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">               <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//递归调用getBean方法，获取当前Bean的依赖Bean</span></span><br><span class="line">               registerDependentBean(dep, beanName);</span><br><span class="line">               <span class="comment">//把被依赖Bean注册给当前依赖的Bean</span></span><br><span class="line">               getBean(dep);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Create bean instance.</span></span><br><span class="line">         <span class="comment">//创建单例模式Bean的实例对象</span></span><br><span class="line">         <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            <span class="comment">//这里使用了一个匿名内部类，创建Bean实例对象，并且注册给所依赖的对象</span></span><br><span class="line">            sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">//创建一个指定Bean实例对象，如果有父级继承，则合并子类和父类的定义</span></span><br><span class="line">                  <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                  <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                  <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                  <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                  <span class="comment">//显式地从容器单例模式Bean缓存中清除实例对象</span></span><br><span class="line">                  destroySingleton(beanName);</span><br><span class="line">                  <span class="keyword">throw</span> ex;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//获取给定Bean的实例对象</span></span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//IOC容器创建原型模式Bean实例对象</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">            <span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">            <span class="comment">//原型模式(Prototype)是每次都会创建一个新的对象</span></span><br><span class="line">            Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//回调beforePrototypeCreation方法，默认的功能是注册当前创建的原型对象</span></span><br><span class="line">               beforePrototypeCreation(beanName);</span><br><span class="line">               <span class="comment">//创建指定Bean对象实例</span></span><br><span class="line">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">//回调afterPrototypeCreation方法，默认的功能告诉IOC容器指定Bean的原型对象不再创建</span></span><br><span class="line">               afterPrototypeCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取给定Bean的实例对象</span></span><br><span class="line">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//要创建的Bean既不是单例模式，也不是原型模式，则根据Bean定义资源中</span></span><br><span class="line">         <span class="comment">//配置的生命周期范围，选择实例化Bean的合适方法，这种在Web应用程序中</span></span><br><span class="line">         <span class="comment">//比较常用，如：request、session、application等生命周期</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            String scopeName = mbd.getScope();</span><br><span class="line">            <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">            <span class="comment">//Bean定义资源中没有配置生命周期范围，则Bean定义不合法</span></span><br><span class="line">            <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//这里又使用了一个匿名内部类，获取一个指定生命周期范围的实例</span></span><br><span class="line">               Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">                  beforePrototypeCreation(beanName);</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">finally</span> &#123;</span><br><span class="line">                     afterPrototypeCreation(beanName);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="comment">//获取给定Bean的实例对象</span></span><br><span class="line">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                     <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                     <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                     ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Check if required type matches the type of the actual bean instance.</span></span><br><span class="line">   <span class="comment">//对创建的Bean实例对象进行类型检查</span></span><br><span class="line">   <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">         <span class="keyword">if</span> (convertedBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> convertedBean;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">                  ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取给定Bean的实例对象，主要是完成FactoryBean的相关处理</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectForBeanInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span></span><br><span class="line">   <span class="comment">//容器已经得到了Bean实例对象，这个实例对象可能是一个普通的Bean，</span></span><br><span class="line">   <span class="comment">//也可能是一个工厂Bean，如果是一个工厂Bean，则使用它创建一个Bean实例对象，</span></span><br><span class="line">   <span class="comment">//如果调用本身就想获得一个容器的引用，则指定返回这个工厂Bean实例对象</span></span><br><span class="line">   <span class="comment">//如果指定的名称是容器的解引用(dereference，即是对象本身而非内存地址)，</span></span><br><span class="line">   <span class="comment">//且Bean实例也不是创建Bean实例对象的工厂Bean</span></span><br><span class="line">   <span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name) &amp;&amp; !(beanInstance <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanIsNotAFactoryException(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span></span><br><span class="line">   <span class="comment">// If it's a FactoryBean, we use it to create a bean instance, unless the</span></span><br><span class="line">   <span class="comment">// caller actually wants a reference to the factory.</span></span><br><span class="line">   <span class="comment">//如果Bean实例不是工厂Bean，或者指定名称是容器的解引用，</span></span><br><span class="line">   <span class="comment">//调用者向获取对容器的引用，则直接返回当前的Bean实例</span></span><br><span class="line">   <span class="keyword">if</span> (!(beanInstance <span class="keyword">instanceof</span> FactoryBean) || BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">      <span class="keyword">return</span> beanInstance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//处理指定名称不是容器的解引用，或者根据名称获取的Bean实例对象是一个工厂Bean</span></span><br><span class="line">   <span class="comment">//使用工厂Bean创建一个Bean的实例对象</span></span><br><span class="line">   Object object = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (mbd == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//从Bean工厂缓存中获取给定名称的Bean实例对象</span></span><br><span class="line">      object = getCachedObjectForFactoryBean(beanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//让Bean工厂生产给定名称的Bean对象实例</span></span><br><span class="line">   <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Return bean instance from factory.</span></span><br><span class="line">      FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) beanInstance;</span><br><span class="line">      <span class="comment">// Caches object obtained from FactoryBean if it is a singleton.</span></span><br><span class="line">      <span class="comment">//如果从Bean工厂生产的Bean是单态模式的，则缓存</span></span><br><span class="line">      <span class="keyword">if</span> (mbd == <span class="keyword">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         <span class="comment">//从容器中获取指定名称的Bean定义，如果继承基类，则合并基类相关属性</span></span><br><span class="line">         mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果从容器得到Bean定义信息，并且Bean定义信息不是虚构的，</span></span><br><span class="line">      <span class="comment">//则让工厂Bean生产Bean实例对象</span></span><br><span class="line">      <span class="keyword">boolean</span> synthetic = (mbd != <span class="keyword">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line">      <span class="comment">//调用FactoryBeanRegistrySupport类的getObjectFromFactoryBean方法，</span></span><br><span class="line">      <span class="comment">//实现工厂Bean生产Bean对象实例的过程</span></span><br><span class="line">      object = getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面获取给定 Bean 的实例对象的 getObjectForBeanInstance()方法中，会调用 FactoryBeanRegistrySupport 类的 getObjectFromFactoryBean()方法，该方法实现了 Bean 工厂生 产 Bean 实例对象。</p>
<p>Dereference(解引用):一个在 C/C++中应用比较多的术语，在 C++中，”*”是解引用符号，而”&amp;” 是引用符号，解引用是指变量指向的是所引用对象的本身数据，而不是引用对象的内存地址。</p>
<p><strong>3、AbstractBeanFactory 生产 Bean 实例对象</strong></p>
<p>AbstractBeanFactory 类中生产 Bean 实例对象的主要源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bean工厂生产Bean实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getObjectFromFactoryBean</span><span class="params">(FactoryBean&lt;?&gt; factory, String beanName, <span class="keyword">boolean</span> shouldPostProcess)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//Bean工厂是单态模式，并且Bean工厂缓存中存在指定名称的Bean实例对象</span></span><br><span class="line">   <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">      <span class="comment">//多线程同步，以防止数据不一致</span></span><br><span class="line">      <span class="keyword">synchronized</span> (getSingletonMutex()) &#123;</span><br><span class="line">         <span class="comment">//直接从Bean工厂缓存中获取指定名称的Bean实例对象</span></span><br><span class="line">         Object object = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">         <span class="comment">//Bean工厂缓存中没有指定名称的实例对象，则生产该实例对象</span></span><br><span class="line">         <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//调用Bean工厂的getObject方法生产指定Bean的实例对象</span></span><br><span class="line">            object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">            <span class="comment">// Only post-process and store if not put there already during getObject() call above</span></span><br><span class="line">            <span class="comment">// (e.g. because of circular reference processing triggered by custom getBean calls)</span></span><br><span class="line">            Object alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (alreadyThere != <span class="keyword">null</span>) &#123;</span><br><span class="line">               object = alreadyThere;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                     object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                           <span class="string">"Post-processing of FactoryBean's singleton object failed"</span>, ex);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//将生产的实例对象添加到Bean工厂缓存中</span></span><br><span class="line">               <span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> object;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//调用Bean工厂的getObject方法生产指定Bean的实例对象</span></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      Object object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">      <span class="keyword">if</span> (shouldPostProcess) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            object = postProcessObjectFromFactoryBean(object, beanName);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"Post-processing of FactoryBean's object failed"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain an object to expose from the given FactoryBean.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> factory the FactoryBean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the object obtained from the FactoryBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanCreationException if FactoryBean object creation failed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.FactoryBean#getObject()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//调用Bean工厂的getObject方法生产指定Bean的实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doGetObjectFromFactoryBean</span><span class="params">(<span class="keyword">final</span> FactoryBean&lt;?&gt; factory, <span class="keyword">final</span> String beanName)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line">   Object object;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">         AccessControlContext acc = getAccessControlContext();</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实现PrivilegedExceptionAction接口的匿名内置类</span></span><br><span class="line">            <span class="comment">//根据JVM检查权限，然后决定BeanFactory创建实例对象</span></span><br><span class="line">            object = AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt;</span><br><span class="line">                  factory.getObject(), acc);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">            <span class="keyword">throw</span> pae.getException();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">//调用BeanFactory接口实现类的创建对象方法</span></span><br><span class="line">         object = factory.getObject();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (FactoryBeanNotInitializedException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName, ex.toString());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"FactoryBean threw exception on object creation"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Do not accept a null value for a FactoryBean that's not fully</span></span><br><span class="line">   <span class="comment">// initialized yet: Many FactoryBeans just return null then.</span></span><br><span class="line">   <span class="comment">//创建出来的实例对象为null，或者因为单态对象正在创建而返回null</span></span><br><span class="line">   <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(</span><br><span class="line">               beanName, <span class="string">"FactoryBean which is currently in creation returned null from getObject"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      object = <span class="keyword">new</span> NullBean();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的源码分析中，我们可以看出，BeanFactory 接口调用其实现类的 getObject 方法来实现创建 Bean 实例对象的功能。</p>
<p><strong>4、工厂 Bean 的实现类 getObject 方法创建 Bean 实例对象</strong></p>
<p>FactoryBean 的实现类有非常多，比如:Proxy、RMI、JNDI、ServletContextFactoryBean 等等， FactoryBean 接口为 Spring 容器提供了一个很好的封装机制，具体的 getObject()有不同的实现类根 据不同的实现策略来具体提供，我们分析一个最简单的 AnnotationTestFactoryBean 的实现源码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTestBeanFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">FactoryCreatedAnnotationTestBean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> FactoryCreatedAnnotationTestBean instance = <span class="keyword">new</span> FactoryCreatedAnnotationTestBean();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AnnotationTestBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.instance.setName(<span class="string">"FACTORY"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> FactoryCreatedAnnotationTestBean <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//AnnotationTestBeanFactory产生Bean实例对象的实现</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Class&lt;? extends IJmxTestBean&gt; getObjectType() &#123;</span><br><span class="line">      <span class="keyword">return</span> FactoryCreatedAnnotationTestBean<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他的 Proxy，RMI，JNDI 等等，都是根据相应的策略提供 getObject()的实现。这里不做一一分析，这已经不是 Spring 的核心功能，感兴趣的小伙可以再去深入研究。</p>
<h3 id="再述-autowiring"><a href="#再述-autowiring" class="headerlink" title="再述 autowiring"></a><strong>再述 autowiring</strong></h3><p>Spring IOC 容器提供了两种管理 Bean 依赖关系的方式:</p>
<ol>
<li><p>显式管理:通过 BeanDefinition 的属性值和构造方法实现 Bean 依赖关系管理。</p>
</li>
<li><p>autowiring:Spring IOC 容器的依赖自动装配功能，不需要对 Bean 属性的依赖关系做显式的声明，只需要在配置好 autowiring 属性，IOC 容器会自动使用反射查找属性的类型和名称，然后基于属性的类型或者名称来自动匹配容器中管理的 Bean，从而自动地完成依赖注入。</p>
</li>
</ol>
<p>通过对 autowiring 自动装配特性的理解，我们知道容器对 Bean 的自动装配发生在容器对 Bean 依赖注入的过程中。在前面对 Spring IOC 容器的依赖注入过程源码分析中，我们已经知道了容器对 Bean 实例对象的属性注入的处理发生在AbstractAutoWireCapableBeanFactory 类中的 populateBean()方法中，我们通过程序流程分析 autowiring 的实现原理:</p>
<p><strong>1、AbstractAutoWireCapableBeanFactory 对 Bean 实例进行属性依赖注入</strong></p>
<p>应用第一次通过 getBean()方法(配置了 lazy-init 预实例化属性的除外)向 IOC 容器索取 Bean 时，容器 创 建 Bean 实 例 对 象 ， 并 且 对 Bean 实 例 对 象 进 行 属 性 依 赖 注 入 ， AbstractAutoWireCapableBeanFactory 的 populateBean()方法就是实现 Bean 属性依赖注入的功 能，其主要源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将Bean属性设置到生成的实例对象上</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span></span><br><span class="line">   <span class="comment">// state of the bean before properties are set. This can be used, for example,</span></span><br><span class="line">   <span class="comment">// to support styles of field injection.</span></span><br><span class="line">   <span class="keyword">boolean</span> continueWithPropertyPopulation = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">            InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">            <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">               continueWithPropertyPopulation = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取容器在解析Bean定义资源时为BeanDefiniton中设置的属性值</span></span><br><span class="line">   PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对依赖注入处理，首先处理autowiring自动装配的依赖注入</span></span><br><span class="line">   <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">      MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line">      <span class="comment">//根据Bean名称进行autowiring自动装配处理</span></span><br><span class="line">      <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">         autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line">      <span class="comment">//根据Bean类型进行autowiring自动装配处理</span></span><br><span class="line">      <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">         autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pvs = newPvs;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对非autowiring的属性进行依赖注入处理</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">   <span class="keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">         pvs = mbd.getPropertyValues();</span><br><span class="line">      &#125;</span><br><span class="line">      PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">      <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">         <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">               InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">               pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">               <span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">         checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (pvs != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//对属性进行注入</span></span><br><span class="line">      applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2、Spring IOC 容器根据 Bean 名称或者类型进行 autowiring 自动依赖注入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据名称对属性进行自动依赖注入</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">autowireByName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对Bean对象中非简单属性(不是简单继承的对象，如8中原始类型，字符串，URL等都是简单属性)进行处理</span></span><br><span class="line">   String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">   <span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">      <span class="comment">//如果Spring IOC容器中包含指定名称的Bean</span></span><br><span class="line">      <span class="keyword">if</span> (containsBean(propertyName)) &#123;</span><br><span class="line">         <span class="comment">//调用getBean方法向IOC容器索取指定名称的Bean实例，迭代触发属性的初始化和依赖注入</span></span><br><span class="line">         Object bean = getBean(propertyName);</span><br><span class="line">         <span class="comment">//为指定名称的属性赋予属性值</span></span><br><span class="line">         pvs.add(propertyName, bean);</span><br><span class="line">         <span class="comment">//指定名称属性注册依赖Bean名称，进行属性依赖注入</span></span><br><span class="line">         registerDependentBean(propertyName, beanName);</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Added autowiring by name from bean name '"</span> + beanName +</span><br><span class="line">                  <span class="string">"' via property '"</span> + propertyName + <span class="string">"' to bean named '"</span> + propertyName + <span class="string">"'"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Not autowiring property '"</span> + propertyName + <span class="string">"' of bean '"</span> + beanName +</span><br><span class="line">                  <span class="string">"' by name: no matching bean found"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Abstract method defining "autowire by type" (bean properties by type) behavior.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is like PicoContainer default, in which there must be exactly one bean</span></span><br><span class="line"><span class="comment"> * of the property type in the bean factory. This makes bean factories simple to</span></span><br><span class="line"><span class="comment"> * configure for small namespaces, but doesn't work as well as standard Spring</span></span><br><span class="line"><span class="comment"> * behavior for bigger applications.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean to autowire by type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mbd the merged bean definition to update through autowiring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bw BeanWrapper from which we can obtain information about the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pvs the PropertyValues to register wired objects with</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//根据类型对属性进行自动依赖注入</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">autowireByType</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取用户定义的类型转换器</span></span><br><span class="line">   TypeConverter converter = getCustomTypeConverter();</span><br><span class="line">   <span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">      converter = bw;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//存放解析的要注入的属性</span></span><br><span class="line">   Set&lt;String&gt; autowiredBeanNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">   <span class="comment">//对Bean对象中非简单属性(不是简单继承的对象，如8中原始类型，字符</span></span><br><span class="line">   <span class="comment">//URL等都是简单属性)进行处理</span></span><br><span class="line">   String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);</span><br><span class="line">   <span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//获取指定属性名称的属性描述器</span></span><br><span class="line">         PropertyDescriptor pd = bw.getPropertyDescriptor(propertyName);</span><br><span class="line">         <span class="comment">// Don't try autowiring by type for type Object: never makes sense,</span></span><br><span class="line">         <span class="comment">// even if it technically is a unsatisfied, non-simple property.</span></span><br><span class="line">         <span class="comment">//不对Object类型的属性进行autowiring自动依赖注入</span></span><br><span class="line">         <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span> !</span>= pd.getPropertyType()) &#123;</span><br><span class="line">            <span class="comment">//获取属性的setter方法</span></span><br><span class="line">            MethodParameter methodParam = BeanUtils.getWriteMethodParameter(pd);</span><br><span class="line">            <span class="comment">// Do not allow eager init for type matching in case of a prioritized post-processor.</span></span><br><span class="line">            <span class="comment">//检查指定类型是否可以被转换为目标对象的类型</span></span><br><span class="line">            <span class="keyword">boolean</span> eager = !PriorityOrdered<span class="class">.<span class="keyword">class</span>.<span class="title">isInstance</span>(<span class="title">bw</span>.<span class="title">getWrappedInstance</span>())</span>;</span><br><span class="line">            <span class="comment">//创建一个要被注入的依赖描述</span></span><br><span class="line">            DependencyDescriptor desc = <span class="keyword">new</span> AutowireByTypeDependencyDescriptor(methodParam, eager);</span><br><span class="line">            <span class="comment">//根据容器的Bean定义解析依赖关系，返回所有要被注入的Bean对象</span></span><br><span class="line">            Object autowiredArgument = resolveDependency(desc, beanName, autowiredBeanNames, converter);</span><br><span class="line">            <span class="keyword">if</span> (autowiredArgument != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//为属性赋值所引用的对象</span></span><br><span class="line">               pvs.add(propertyName, autowiredArgument);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String autowiredBeanName : autowiredBeanNames) &#123;</span><br><span class="line">               <span class="comment">//指定名称属性注册依赖Bean名称，进行属性依赖注入</span></span><br><span class="line">               registerDependentBean(autowiredBeanName, beanName);</span><br><span class="line">               <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                  logger.debug(<span class="string">"Autowiring by type from bean name '"</span> + beanName + <span class="string">"' via property '"</span> +</span><br><span class="line">                        propertyName + <span class="string">"' to bean named '"</span> + autowiredBeanName + <span class="string">"'"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放已自动注入的属性</span></span><br><span class="line">            autowiredBeanNames.clear();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedDependencyException(mbd.getResourceDescription(), beanName, propertyName, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的源码分析，我们可以看出来通过属性名进行自动依赖注入的相对比通过属性类型进行自动依 赖注入要稍微简单一些，但是真正实现属性注入的是 DefaultSingletonBeanRegistry 类的 registerDependentBean()方法。</p>
<p><strong>3、DefaultSingletonBeanRegistry 的 registerDependentBean()方法对属性注入</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//为指定的Bean注入依赖的Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerDependentBean</span><span class="params">(String beanName, String dependentBeanName)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// A quick check for an existing entry upfront, avoiding synchronization...</span></span><br><span class="line">   <span class="comment">//处理Bean名称，将别名转换为规范的Bean名称</span></span><br><span class="line">   String canonicalName = canonicalName(beanName);</span><br><span class="line">   Set&lt;String&gt; dependentBeans = <span class="keyword">this</span>.dependentBeanMap.get(canonicalName);</span><br><span class="line">   <span class="keyword">if</span> (dependentBeans != <span class="keyword">null</span> &amp;&amp; dependentBeans.contains(dependentBeanName)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// No entry yet -&gt; fully synchronized manipulation of the dependentBeans Set</span></span><br><span class="line">   <span class="comment">//多线程同步，保证容器内数据的一致性</span></span><br><span class="line">   <span class="comment">//先从容器中：bean名称--&gt;全部依赖Bean名称集合找查找给定名称Bean的依赖Bean</span></span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.dependentBeanMap) &#123;</span><br><span class="line">      <span class="comment">//获取给定名称Bean的所有依赖Bean名称</span></span><br><span class="line">      dependentBeans = <span class="keyword">this</span>.dependentBeanMap.get(canonicalName);</span><br><span class="line">      <span class="keyword">if</span> (dependentBeans == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//为Bean设置依赖Bean信息</span></span><br><span class="line">         dependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">         <span class="keyword">this</span>.dependentBeanMap.put(canonicalName, dependentBeans);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//向容器中：bean名称--&gt;全部依赖Bean名称集合添加Bean的依赖信息</span></span><br><span class="line">      <span class="comment">//即，将Bean所依赖的Bean添加到容器的集合中</span></span><br><span class="line">      dependentBeans.add(dependentBeanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//从容器中：bean名称--&gt;指定名称Bean的依赖Bean集合找查找给定名称Bean的依赖Bean</span></span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.dependenciesForBeanMap) &#123;</span><br><span class="line">      Set&lt;String&gt; dependenciesForBean = <span class="keyword">this</span>.dependenciesForBeanMap.get(dependentBeanName);</span><br><span class="line">      <span class="keyword">if</span> (dependenciesForBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">         dependenciesForBean = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">         <span class="keyword">this</span>.dependenciesForBeanMap.put(dependentBeanName, dependenciesForBean);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//向容器中：bean名称--&gt;指定Bean的依赖Bean名称集合添加Bean的依赖信息</span></span><br><span class="line">      <span class="comment">//即，将Bean所依赖的Bean添加到容器的集合中</span></span><br><span class="line">      dependenciesForBean.add(canonicalName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过对 autowiring 的源码分析，我们可以看出，autowiring 的实现过程:</p>
<ol>
<li><p>对 Bean 的属性代调用 getBean()方法，完成依赖 Bean 的初始化和依赖注入。</p>
</li>
<li><p>将依赖 Bean 的属性引用设置到被依赖的 Bean 属性上。</p>
</li>
<li><p>将依赖 Bean 的名称和被依赖 Bean 的名称存储在 IOC 容器的集合中。</p>
</li>
</ol>
<p>Spring IOC 容器的 autowiring 属性自动依赖注入是一个很方便的特性，可以简化开发时的配置，但是凡是都有两面性，自动属性依赖注入也有不足，首先，Bean 的依赖关系在 配置文件中无法很清楚地看出来，对于维护造成一定困难。其次，由于自动依赖注入是 Spring 容器自动执行的，容器是不会智能判断的，如果配置不当，将会带来无法预料的后果，所以自动依赖注入特性在使用时还是综合考虑。</p>
]]></content>
      <categories>
        <category>spring源码解读</category>
      </categories>
      <tags>
        <tag>spring-di</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-ioc运行时序解析</title>
    <url>/2020/06/18/spring-ioc%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BA%8F%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="spring-ioc运行时序解析"><a href="#spring-ioc运行时序解析" class="headerlink" title="spring-ioc运行时序解析"></a>spring-ioc运行时序解析</h1><h2 id="Spring-核心之-IOC-容器初体验"><a href="#Spring-核心之-IOC-容器初体验" class="headerlink" title="Spring 核心之 IOC 容器初体验"></a>Spring 核心之 IOC 容器初体验</h2><h3 id="再谈-IOC-与-DI"><a href="#再谈-IOC-与-DI" class="headerlink" title="再谈 IOC 与 DI"></a><strong>再谈 IOC 与 DI</strong></h3><p><strong>IOC</strong>(Inversion of Control)控制反转：所谓控制反转，就是把原先我们代码里面需要实现的对象创 建、依赖的代码，反转给容器来帮忙实现。那么必然的我们需要创建一个容器，同时需要一种描述来让 容器知道需要创建的对象与对象的关系。这个描述最具体表现就是我们所看到的配置文件。 </p>
<p><strong>DI</strong>(Dependency Injection)依赖注入：就是指对象是被动接受依赖类而不是自己主动去找，换句话说就 是指对象不是从容器中查找它依赖的类，而是在容器实例化对象的时候主动将它依赖的类注入给它。</p>
<h3 id="Spring-核心容器类图"><a href="#Spring-核心容器类图" class="headerlink" title="Spring 核心容器类图"></a><strong>Spring 核心容器类图</strong></h3><h4 id="1、BeanFactory"><a href="#1、BeanFactory" class="headerlink" title="1、BeanFactory"></a><strong>1、BeanFactory</strong></h4><p>Spring Bean 的创建是典型的工厂模式，这一系列的 Bean 工厂，也即 IOC 容器为开发者管理对象间的依赖关系提供了很多便利和基础服务，在 Spring 中有许多的 IOC 容器的实现供用户选择和使用，其相互关系如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfw7h16t9ej317m0lg7ir.jpg" alt="image-20200618095413402"></p>
<p>其中 <strong>BeanFactory</strong> 作为<strong>最顶层</strong>的一个接口类，它定义了 IOC 容器的基本功能规范，BeanFactory 有三 个重要的子类：<strong>ListableBeanFactory</strong>、<strong>HierarchicalBeanFactory</strong> 和 <strong>AutowireCapableBeanFactory</strong>。 但是从类图中我们可以发现<strong>最终的默认实现类</strong>是 <strong>DefaultListableBeanFactory</strong>，它实现了所有的接口。</p>
<p>那为何要定义这么多层次的接口呢？查阅这些接口的源码和说明发现，每个接口都有它使用的场合，它主要是为了区分在 Spring 内部在操作过程中对象的传递和转化过程时，对对象的数据访问所做的限制。 </p>
<p><strong>ListableBeanFactory</strong> 接口：表示这些 <strong>Bean 是可列表化</strong></p>
<p><strong>HierarchicalBeanFactory</strong> 接口：表示的是 这些 Bean 是<strong>有继承关系</strong>的，也就是每个 Bean 有可能有父 Bean。</p>
<p><strong>AutowireCapableBeanFactory</strong> 接口：定义 Bean 的<strong>自动装配规则</strong>。</p>
<p>这三个接口共同定义了 Bean 的集合、Bean 之间的关系、以及 Bean 行 为。</p>
<p>最基本的 IOC 容器接口 BeanFactory，来看一下它的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2017 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.ResolvableType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The root interface for accessing a Spring bean container.</span></span><br><span class="line"><span class="comment"> * This is the basic client view of a bean container;</span></span><br><span class="line"><span class="comment"> * further interfaces such as &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.config.ConfigurableBeanFactory&#125;</span></span><br><span class="line"><span class="comment"> * are available for specific purposes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \\&lt;p\&gt;This interface is implemented by objects that hold a number of bean definitions,</span></span><br><span class="line"><span class="comment"> * each uniquely identified by a String name. Depending on the bean definition,</span></span><br><span class="line"><span class="comment"> * the factory will return either an independent instance of a contained object</span></span><br><span class="line"><span class="comment"> * (the Prototype design pattern), or a single shared instance (a superior</span></span><br><span class="line"><span class="comment"> * alternative to the Singleton design pattern, in which the instance is a</span></span><br><span class="line"><span class="comment"> * singleton in the scope of the factory). Which type of instance will be returned</span></span><br><span class="line"><span class="comment"> * depends on the bean factory configuration: the API is the same. Since Spring</span></span><br><span class="line"><span class="comment"> * 2.0, further scopes are available depending on the concrete application</span></span><br><span class="line"><span class="comment"> * context (e.g. "request" and "session" scopes in a web environment).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;The point of this approach is that the BeanFactory is a central registry</span></span><br><span class="line"><span class="comment"> * of application components, and centralizes configuration of application</span></span><br><span class="line"><span class="comment"> * components (no more do individual objects need to read properties files,</span></span><br><span class="line"><span class="comment"> * for example). See chapters 4 and 11 of "Expert One-on-One J2EE Design and</span></span><br><span class="line"><span class="comment"> * Development" for a discussion of the benefits of this approach.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;Note that it is generally better to rely on Dependency Injection</span></span><br><span class="line"><span class="comment"> * ("push" configuration) to configure application objects through setters</span></span><br><span class="line"><span class="comment"> * or constructors, rather than use any form of "pull" configuration like a</span></span><br><span class="line"><span class="comment"> * BeanFactory lookup. Spring's Dependency Injection functionality is</span></span><br><span class="line"><span class="comment"> * implemented using this BeanFactory interface and its subinterfaces.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;Normally a BeanFactory will load bean definitions stored in a configuration</span></span><br><span class="line"><span class="comment"> * source (such as an XML document), and use the &#123;<span class="doctag">@code</span> org.springframework.beans&#125;</span></span><br><span class="line"><span class="comment"> * package to configure the beans. However, an implementation could simply return</span></span><br><span class="line"><span class="comment"> * Java objects it creates as necessary directly in Java code. There are no</span></span><br><span class="line"><span class="comment"> * constraints on how the definitions could be stored: LDAP, RDBMS, XML,</span></span><br><span class="line"><span class="comment"> * properties file, etc. Implementations are encouraged to support references</span></span><br><span class="line"><span class="comment"> * amongst beans (Dependency Injection).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;In contrast to the methods in &#123;<span class="doctag">@link</span> ListableBeanFactory&#125;, all of the</span></span><br><span class="line"><span class="comment"> * operations in this interface will also check parent factories if this is a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> HierarchicalBeanFactory&#125;. If a bean is not found in this factory instance,</span></span><br><span class="line"><span class="comment"> * the immediate parent factory will be asked. Beans in this factory instance</span></span><br><span class="line"><span class="comment"> * are supposed to override beans of the same name in any parent factory.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;Bean factory implementations should support the standard bean lifecycle interfaces</span></span><br><span class="line"><span class="comment"> * as far as possible. The full set of initialization methods and their standard order is:</span></span><br><span class="line"><span class="comment"> * \&lt;ol\&gt;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;BeanNameAware's &#123;<span class="doctag">@code</span> setBeanName&#125;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;BeanClassLoaderAware's &#123;<span class="doctag">@code</span> setBeanClassLoader&#125;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;BeanFactoryAware's &#123;<span class="doctag">@code</span> setBeanFactory&#125;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;EnvironmentAware's &#123;<span class="doctag">@code</span> setEnvironment&#125;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;EmbeddedValueResolverAware's &#123;<span class="doctag">@code</span> setEmbeddedValueResolver&#125;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;ResourceLoaderAware's &#123;<span class="doctag">@code</span> setResourceLoader&#125;</span></span><br><span class="line"><span class="comment"> * (only applicable when running in an application context)</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;ApplicationEventPublisherAware's &#123;<span class="doctag">@code</span> setApplicationEventPublisher&#125;</span></span><br><span class="line"><span class="comment"> * (only applicable when running in an application context)</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;MessageSourceAware's &#123;<span class="doctag">@code</span> setMessageSource&#125;</span></span><br><span class="line"><span class="comment"> * (only applicable when running in an application context)</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;ApplicationContextAware's &#123;<span class="doctag">@code</span> setApplicationContext&#125;</span></span><br><span class="line"><span class="comment"> * (only applicable when running in an application context)</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;ServletContextAware's &#123;<span class="doctag">@code</span> setServletContext&#125;</span></span><br><span class="line"><span class="comment"> * (only applicable when running in a web application context)</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;&#123;<span class="doctag">@code</span> postProcessBeforeInitialization&#125; methods of BeanPostProcessors</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;a custom init-method definition</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;&#123;<span class="doctag">@code</span> postProcessAfterInitialization&#125; methods of BeanPostProcessors</span></span><br><span class="line"><span class="comment"> * \&lt;/ol\&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;On shutdown of a bean factory, the following lifecycle methods apply:</span></span><br><span class="line"><span class="comment"> * \&lt;ol\&gt;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;&#123;<span class="doctag">@code</span> postProcessBeforeDestruction&#125; methods of DestructionAwareBeanPostProcessors</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;DisposableBean's &#123;<span class="doctag">@code</span> destroy&#125;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;a custom destroy-method definition</span></span><br><span class="line"><span class="comment"> * \&lt;/ol\&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chris Beams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 13 April 2001</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> BeanNameAware#setBeanName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> BeanClassLoaderAware#setBeanClassLoader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> BeanFactoryAware#setBeanFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.ResourceLoaderAware#setResourceLoader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.ApplicationEventPublisherAware#setApplicationEventPublisher</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.MessageSourceAware#setMessageSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.context.ApplicationContextAware#setApplicationContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.context.ServletContextAware#setServletContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.config.BeanPostProcessor#postProcessBeforeInitialization</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> InitializingBean#afterPropertiesSet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.support.RootBeanDefinition#getInitMethodName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.config.BeanPostProcessor#postProcessAfterInitialization</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DisposableBean#destroy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.support.RootBeanDefinition#getDestroyMethodName</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//在BeanFactory里只对IOC容器的基本行为作了定义，根本不关心你的Bean是如何定义怎样加载的。</span></span><br><span class="line"><span class="comment">//正如我们只关心工厂里得到什么的产品对象，至于工厂是怎么生产这些对象的，这个基本的接口不关心。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Used to dereference a &#123;<span class="doctag">@link</span> FactoryBean&#125; instance and distinguish it from</span></span><br><span class="line"><span class="comment">    * beans \&lt;i\&gt;created\&lt;/i\&gt; by the FactoryBean. For example, if the bean named</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> myJndiObject&#125; is a FactoryBean, getting &#123;<span class="doctag">@code</span> &amp;myJndiObject&#125;</span></span><br><span class="line"><span class="comment">    * will return the factory, not the instance returned by the factory.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//对FactoryBean的转义定义，因为如果使用bean的名字检索FactoryBean得到的对象是工厂生成的对象，</span></span><br><span class="line">   <span class="comment">//如果需要得到工厂本身，需要转义</span></span><br><span class="line">   String FACTORY_BEAN_PREFIX = <span class="string">"&amp;"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;This method allows a Spring BeanFactory to be used as a replacement for the</span></span><br><span class="line"><span class="comment">    * Singleton or Prototype design pattern. Callers may retain references to</span></span><br><span class="line"><span class="comment">    * returned objects in the case of Singleton beans.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean definition</span></span><br><span class="line"><span class="comment">    * with the specified name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be obtained</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//根据bean的名字，获取在IOC容器中得到bean实例</span></span><br><span class="line">   <span class="function">Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Behaves the same as &#123;<span class="doctag">@link</span> #getBean(String)&#125;, but provides a measure of type</span></span><br><span class="line"><span class="comment">    * safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the</span></span><br><span class="line"><span class="comment">    * required type. This means that ClassCastException can't be thrown on casting</span></span><br><span class="line"><span class="comment">    * the result correctly, as can happen with &#123;<span class="doctag">@link</span> #getBean(String)&#125;.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requiredType type the bean must match. Can be an interface or superclass</span></span><br><span class="line"><span class="comment">    * of the actual class, or &#123;<span class="doctag">@code</span> null&#125; for any match. For example, if the value</span></span><br><span class="line"><span class="comment">    * is &#123;<span class="doctag">@code</span> Object.class&#125;, this method will succeed whatever the class of the</span></span><br><span class="line"><span class="comment">    * returned instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no such bean definition</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeanNotOfRequiredTypeException if the bean is not of the required type</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//根据bean的名字和Class类型来得到bean实例，增加了类型安全验证机制。</span></span><br><span class="line">   \&lt;T\&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, @Nullable Class\&lt;T\&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Allows for specifying explicit constructor arguments / factory method arguments,</span></span><br><span class="line"><span class="comment">    * overriding the specified default arguments (if any) in the bean definition.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to retrieve</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span></span><br><span class="line"><span class="comment">    * (only applied when creating a new instance as opposed to retrieving an existing one)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no such bean definition</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeanDefinitionStoreException if arguments have been given but</span></span><br><span class="line"><span class="comment">    * the affected bean isn't a prototype</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">Object <span class="title">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the bean instance that uniquely matches the given object type, if any.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;This method goes into &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; by-type lookup territory</span></span><br><span class="line"><span class="comment">    * but may also be translated into a conventional by-name lookup based on the name</span></span><br><span class="line"><span class="comment">    * of the given type. For more extensive retrieval operations across sets of beans,</span></span><br><span class="line"><span class="comment">    * use &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; and/or &#123;<span class="doctag">@link</span> BeanFactoryUtils&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requiredType type the bean must match; can be an interface or superclass.</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> null&#125; is disallowed.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the single bean matching the required type</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if no bean of the given type was found</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoUniqueBeanDefinitionException if more than one bean of the given type was found</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> ListableBeanFactory</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   \&lt;T\&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class\&lt;T\&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return an instance, which may be shared or independent, of the specified bean.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Allows for specifying explicit constructor arguments / factory method arguments,</span></span><br><span class="line"><span class="comment">    * overriding the specified default arguments (if any) in the bean definition.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;This method goes into &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; by-type lookup territory</span></span><br><span class="line"><span class="comment">    * but may also be translated into a conventional by-name lookup based on the name</span></span><br><span class="line"><span class="comment">    * of the given type. For more extensive retrieval operations across sets of beans,</span></span><br><span class="line"><span class="comment">    * use &#123;<span class="doctag">@link</span> ListableBeanFactory&#125; and/or &#123;<span class="doctag">@link</span> BeanFactoryUtils&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> requiredType type the bean must match; can be an interface or superclass.</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> null&#125; is disallowed.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span></span><br><span class="line"><span class="comment">    * (only applied when creating a new instance as opposed to retrieving an existing one)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> an instance of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no such bean definition</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeanDefinitionStoreException if arguments have been given but</span></span><br><span class="line"><span class="comment">    * the affected bean isn't a prototype</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> BeansException if the bean could not be created</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 4.1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   \&lt;T\&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class\&lt;T\&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Does this bean factory contain a bean definition or externally registered singleton</span></span><br><span class="line"><span class="comment">    * instance with the given name?</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If the given name is an alias, it will be translated back to the corresponding</span></span><br><span class="line"><span class="comment">    * canonical bean name.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If this factory is hierarchical, will ask any parent factory if the bean cannot</span></span><br><span class="line"><span class="comment">    * be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If a bean definition or singleton instance matching the given name is found,</span></span><br><span class="line"><span class="comment">    * this method will return &#123;<span class="doctag">@code</span> true&#125; whether the named bean definition is concrete</span></span><br><span class="line"><span class="comment">    * or abstract, lazy or eager, in scope or not. Therefore, note that a &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">    * return value from this method does not necessarily indicate that &#123;<span class="doctag">@link</span> #getBean&#125;</span></span><br><span class="line"><span class="comment">    * will be able to obtain an instance for the same name.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether a bean with the given name is present</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//提供对bean的检索，看看是否在IOC容器有这个名字的bean</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Is this bean a shared singleton? That is, will &#123;<span class="doctag">@link</span> #getBean&#125; always</span></span><br><span class="line"><span class="comment">    * return the same instance?</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Note: This method returning &#123;<span class="doctag">@code</span> false&#125; does not clearly indicate</span></span><br><span class="line"><span class="comment">    * independent instances. It indicates non-singleton instances, which may correspond</span></span><br><span class="line"><span class="comment">    * to a scoped bean as well. Use the &#123;<span class="doctag">@link</span> #isPrototype&#125; operation to explicitly</span></span><br><span class="line"><span class="comment">    * check for independent instances.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether this bean corresponds to a singleton instance</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #isPrototype</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//根据bean名字得到bean实例，并同时判断这个bean是不是单例</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Is this bean a prototype? That is, will &#123;<span class="doctag">@link</span> #getBean&#125; always return</span></span><br><span class="line"><span class="comment">    * independent instances?</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Note: This method returning &#123;<span class="doctag">@code</span> false&#125; does not clearly indicate</span></span><br><span class="line"><span class="comment">    * a singleton object. It indicates non-independent instances, which may correspond</span></span><br><span class="line"><span class="comment">    * to a scoped bean as well. Use the &#123;<span class="doctag">@link</span> #isSingleton&#125; operation to explicitly</span></span><br><span class="line"><span class="comment">    * check for a shared singleton instance.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether this bean will always deliver independent instances</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2.0.3</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #isSingleton</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Check whether the bean with the given name matches the specified type.</span></span><br><span class="line"><span class="comment">    * More specifically, check whether a &#123;<span class="doctag">@link</span> #getBean&#125; call for the given name</span></span><br><span class="line"><span class="comment">    * would return an object that is assignable to the specified target type.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> typeToMatch the type to match against (as a &#123;<span class="doctag">@code</span> ResolvableType&#125;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the bean type matches,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> false&#125; if it doesn't match or cannot be determined yet</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getType</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, ResolvableType typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Check whether the bean with the given name matches the specified type.</span></span><br><span class="line"><span class="comment">    * More specifically, check whether a &#123;<span class="doctag">@link</span> #getBean&#125; call for the given name</span></span><br><span class="line"><span class="comment">    * would return an object that is assignable to the specified target type.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> typeToMatch the type to match against (as a &#123;<span class="doctag">@code</span> Class&#125;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the bean type matches,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> false&#125; if it doesn't match or cannot be determined yet</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 2.0.1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getType</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String name, @Nullable Class\&lt;?\&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Determine the type of the bean with the given name. More specifically,</span></span><br><span class="line"><span class="comment">    * determine the type of object that &#123;<span class="doctag">@link</span> #getBean&#125; would return for the given name.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;For a &#123;<span class="doctag">@link</span> FactoryBean&#125;, return the type of object that the FactoryBean creates,</span></span><br><span class="line"><span class="comment">    * as exposed by &#123;<span class="doctag">@link</span> FactoryBean#getObjectType()&#125;.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Translates aliases back to the corresponding canonical bean name.</span></span><br><span class="line"><span class="comment">    * Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the name of the bean to query</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the type of the bean, or &#123;<span class="doctag">@code</span> null&#125; if not determinable</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchBeanDefinitionException if there is no bean with the given name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.1.2</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #isTypeMatch</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//得到bean实例的Class类型</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   Class\&lt;?\&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the aliases for the given bean name, if any.</span></span><br><span class="line"><span class="comment">    * All of those aliases point to the same bean when used in a &#123;<span class="doctag">@link</span> #getBean&#125; call.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If the given name is an alias, the corresponding original bean name</span></span><br><span class="line"><span class="comment">    * and other aliases (if any) will be returned, with the original bean name</span></span><br><span class="line"><span class="comment">    * being the first element in the array.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Will ask the parent factory if the bean cannot be found in this factory instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name the bean name to check for aliases</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the aliases, or an empty array if none</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getBean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//得到bean的别名，如果根据别名检索，那么其原名也会被检索出来</span></span><br><span class="line">   String[] getAliases(String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 BeanFactory 里只对 IOC 容器的基本行为作了定义，根本不关心你的 Bean 是如何定义怎样加载的。 正如我们只关心工厂里得到什么的产品对象，至于工厂是怎么生产这些对象的，这个基本的接口不关心。 </p>
<p>而要知道工厂是如何产生对象的，我们需要看具体的 IOC 容器实现，Spring 提供了许多 <strong>IOC 容器</strong>的 实 现 。 比 如 <strong>GenericApplicationContext</strong> ， <strong>ClasspathXmlApplicationContext</strong> 等 。 </p>
<p><strong>ApplicationContext</strong> 是 Spring 提供的一个<strong>高级的 IOC 容器</strong>，它除了能够提供 IOC 容器的基本功能 外，还为用户提供了以下的附加服务。从 ApplicationContext 接口的实现，我们看出其特点： </p>
<ol>
<li><p>支持信息源，可以实现国际化。（实现 MessageSource 接口） </p>
</li>
<li><p>访问资源。(实现 ResourcePatternResolver 接口，后面章节会讲到) </p>
</li>
<li><p>支持应用事件。(实现 ApplicationEventPublisher 接口) </p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2014 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.HierarchicalBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ListableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.AutowireCapableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.EnvironmentCapable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.ResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Central interface to provide configuration for an application.</span></span><br><span class="line"><span class="comment"> * This is read-only while the application is running, but may be</span></span><br><span class="line"><span class="comment"> * reloaded if the implementation supports this.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;An ApplicationContext provides:</span></span><br><span class="line"><span class="comment"> * \&lt;ul\&gt;</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;Bean factory methods for accessing application components.</span></span><br><span class="line"><span class="comment"> * Inherited from &#123;<span class="doctag">@link</span> org.springframework.beans.factory.ListableBeanFactory&#125;.</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;The ability to load file resources in a generic fashion.</span></span><br><span class="line"><span class="comment"> * Inherited from the &#123;<span class="doctag">@link</span> org.springframework.core.io.ResourceLoader&#125; interface.</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;The ability to publish events to registered listeners.</span></span><br><span class="line"><span class="comment"> * Inherited from the &#123;<span class="doctag">@link</span> ApplicationEventPublisher&#125; interface.</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;The ability to resolve messages, supporting internationalization.</span></span><br><span class="line"><span class="comment"> * Inherited from the &#123;<span class="doctag">@link</span> MessageSource&#125; interface.</span></span><br><span class="line"><span class="comment"> * \&lt;li\&gt;Inheritance from a parent context. Definitions in a descendant context</span></span><br><span class="line"><span class="comment"> * will always take priority. This means, for example, that a single parent</span></span><br><span class="line"><span class="comment"> * context can be used by an entire web application, while each servlet has</span></span><br><span class="line"><span class="comment"> * its own child context that is independent of that of any other servlet.</span></span><br><span class="line"><span class="comment"> * \&lt;/ul\&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;In addition to standard &#123;<span class="doctag">@link</span> org.springframework.beans.factory.BeanFactory&#125;</span></span><br><span class="line"><span class="comment"> * lifecycle capabilities, ApplicationContext implementations detect and invoke</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationContextAware&#125; beans as well as &#123;<span class="doctag">@link</span> ResourceLoaderAware&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ApplicationEventPublisherAware&#125; and &#123;<span class="doctag">@link</span> MessageSourceAware&#125; beans.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConfigurableApplicationContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.BeanFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.core.io.ResourceLoader</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//ApplicationContext是Spring提供的一个高级的IOC容器，它除了能够提供IOC容器的基本功能外，还为用户提供了以下的附加服务。</span></span><br><span class="line"><span class="comment">//从ApplicationContext接口的实现，我们看出其特点：</span></span><br><span class="line"><span class="comment">//1、支持信息源，可以实现国际化。（实现 MessageSource 接口）</span></span><br><span class="line"><span class="comment">//2、访问资源。(实现 ResourcePatternResolver 接口，后面章节会讲到)</span></span><br><span class="line"><span class="comment">//3、支持应用事件。(实现 ApplicationEventPublisher 接口)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> <span class="keyword">extends</span> <span class="title">EnvironmentCapable</span>, <span class="title">ListableBeanFactory</span>, <span class="title">HierarchicalBeanFactory</span>,</span></span><br><span class="line"><span class="class">      <span class="title">MessageSource</span>, <span class="title">ApplicationEventPublisher</span>, <span class="title">ResourcePatternResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the unique id of this application context.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the unique id of the context, or &#123;<span class="doctag">@code</span> null&#125; if none</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a name for the deployed application that this context belongs to.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> a name for the deployed application, or the empty String by default</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">String <span class="title">getApplicationName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return a friendly name for this context.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> a display name for this context (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">String <span class="title">getDisplayName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the timestamp when this context was first loaded.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the timestamp (ms) when this context was first loaded</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">long</span> <span class="title">getStartupDate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the parent context, or &#123;<span class="doctag">@code</span> null&#125; if there is no parent</span></span><br><span class="line"><span class="comment">    * and this is the root of the context hierarchy.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the parent context, or &#123;<span class="doctag">@code</span> null&#125; if there is no parent</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function">ApplicationContext <span class="title">getParent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Expose AutowireCapableBeanFactory functionality for this context.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;This is not typically used by application code, except for the purpose of</span></span><br><span class="line"><span class="comment">    * initializing bean instances that live outside of the application context,</span></span><br><span class="line"><span class="comment">    * applying the Spring bean lifecycle (fully or partly) to them.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Alternatively, the internal BeanFactory exposed by the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> ConfigurableApplicationContext&#125; interface offers access to the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> AutowireCapableBeanFactory&#125; interface too. The present method mainly</span></span><br><span class="line"><span class="comment">    * serves as a convenient, specific facility on the ApplicationContext interface.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;\&lt;b\&gt;<span class="doctag">NOTE:</span> As of 4.2, this method will consistently throw IllegalStateException</span></span><br><span class="line"><span class="comment">    * after the application context has been closed.\&lt;/b\&gt; In current Spring Framework</span></span><br><span class="line"><span class="comment">    * versions, only refreshable application contexts behave that way; as of 4.2,</span></span><br><span class="line"><span class="comment">    * all application context implementations will be required to comply.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the AutowireCapableBeanFactory for this context</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalStateException if the context does not support the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> AutowireCapableBeanFactory&#125; interface, or does not hold an</span></span><br><span class="line"><span class="comment">    * autowire-capable bean factory yet (e.g. if &#123;<span class="doctag">@code</span> refresh()&#125; has</span></span><br><span class="line"><span class="comment">    * never been called), or if the context has been closed already</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> ConfigurableApplicationContext#refresh()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> ConfigurableApplicationContext#getBeanFactory()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">AutowireCapableBeanFactory <span class="title">getAutowireCapableBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、BeanDefinition"><a href="#2、BeanDefinition" class="headerlink" title="2、BeanDefinition"></a><strong>2、BeanDefinition</strong></h4><p>SpringIOC 容器管理了我们定义的各种 <strong>Bean 对象及其相互的关系</strong>，Bean 对象在 Spring 实现中是 以 <strong>BeanDefinition</strong> 来描述的，其继承体系如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfws7fsumcj310y0tg4c6.jpg" alt="image-20200618215133105"></p>
<h4 id="3、BeanDefinitionReader"><a href="#3、BeanDefinitionReader" class="headerlink" title="3、BeanDefinitionReader"></a><strong>3、BeanDefinitionReader</strong></h4><p>Bean 的解析过程非常复杂，功能被分的很细，因为这里需要被扩展的地方很多，必须保证有足够的灵活性，以应对可能的变化。Bean 的解析主要就是对 Spring 配置文件的解析。这个解析过程主要通过BeanDefintionReader 来完成，最后看看 Spring 中 BeanDefintionReader 的类结构图：</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfws8bzy5dj30te0hugst.jpg" alt="image-20200618215224546"></p>
<h2 id="基于-Xml-的-IOC-容器的初始化"><a href="#基于-Xml-的-IOC-容器的初始化" class="headerlink" title="基于 Xml 的 IOC 容器的初始化"></a>基于 Xml 的 IOC 容器的初始化</h2><p>IOC 容器的初始化包括 BeanDefinition 的 Resource 定位、加载和注册这三个基本的过程。我们以 ApplicationContext 为例讲解，ApplicationContext 系列容器也许是我们最熟悉的，因为 Web 项目中使用的 XmlWebApplicationContext 就属于这个继承体系，还有 ClasspathXmlApplicationContext 等，其继承体系如下图所示:</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gfxcc75e3jj31700u0qma.jpg" alt="image-20200619092807520"></p>
<p>ApplicationContext 允许上下文嵌套，通过保持父上下文可以维持一个上下文体系。对于 Bean 的查找 可以在这个上下文体系中发生，首先检查当前上下文，其次是父上下文，逐级向上，这样为不同的 Spring 应用提供了一个共享的 Bean 定义环境。</p>
<h3 id="1、寻找入口"><a href="#1、寻找入口" class="headerlink" title="1、寻找入口"></a><strong>1、寻找入口</strong></h3><p>还有一个我们用的比较多的 ClassPathXmlApplicationContext，通过 main()方法启动:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"application.xml"</span>);</span><br></pre></td></tr></table></figure>

<p>先看其构造函数的调用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>(<span class="keyword">new</span> String[]&#123;configLocation&#125;, <span class="keyword">true</span>, (ApplicationContext)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实际调用的构造函数为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="keyword">boolean</span> refresh, @Nullable ApplicationContext parent)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(parent); </span><br><span class="line">  <span class="keyword">this</span>.setConfigLocations(configLocations); </span><br><span class="line">  <span class="keyword">if</span>(refresh) &#123;</span><br><span class="line">    <span class="keyword">this</span>.refresh(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还 有 像 AnnotationConfigApplicationContext 、 FileSystemXmlApplicationContext 、 XmlWebApplicationContext 等都继承自父容器 AbstractApplicationContext 主要用到了装饰器模式 和策略模式，最终都是调用 refresh()方法。</p>
<h3 id="2、获得配置路径"><a href="#2、获得配置路径" class="headerlink" title="2、获得配置路径"></a><strong>2、获得配置路径</strong></h3><p>通过分析 ClassPathXmlApplicationContext 的源代码可以知道，在创建 ClassPathXmlApplicationContext 容器时，构造方法做以下两项重要工作: 首先，调用父类容器的构造方法(super(parent)方法)为容器设置好 Bean 资源加载器。<br> 然 后 ， 再 调 用 父 类 AbstractRefreshableConfigApplicationContext 的 setConfigLocations(configLocations)方法设置 Bean 配置信息的定位路径。</p>
<p>通过追踪 ClassPathXmlApplicationContext 的继承体系，发现其父类的父类 AbstractApplicationContext 中初始化 IOC 容器所做的主要源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">  <span class="comment">//静态初始化块，在整个容器创建过程中只执行一次 </span></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//为了避免应用程序在 Weblogic8.1 关闭时出现类加载异常加载问题，加载 IOC 容 </span></span><br><span class="line">    <span class="comment">//器关闭事件(ContextClosedEvent)类 </span></span><br><span class="line">    ContextClosedEvent<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.resourcePatternResolver = getResourcePatternResolver(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">(@Nullable ApplicationContext parent)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    setParent(parent);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取一个 Spring Source 的加载器用于读入 Spring Bean 配置信息 protected ResourcePatternResolver</span></span><br><span class="line">  getResourcePatternResolver() &#123;</span><br><span class="line">    <span class="comment">//AbstractApplicationContext 继承 DefaultResourceLoader，因此也是一个资源加载器 </span></span><br><span class="line">    <span class="comment">//Spring 资源加载器，其 getResource(String location)方法用于载入资源</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PathMatchingResourcePatternResolver(<span class="keyword">this</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractApplicationContext 的默认构造方法中有调用 PathMatchingResourcePatternResolver 的 构造方法创建 Spring 资源加载器:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PathMatchingResourcePatternResolver</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123; </span><br><span class="line">  Assert.notNull(resourceLoader, <span class="string">"ResourceLoader must not be null"</span>); </span><br><span class="line">  <span class="comment">//设置 Spring 的资源加载器</span></span><br><span class="line">  <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在设置容器的资源加载器之后，接下来 ClassPathXmlApplicationContext 执行 setConfigLocations() 方法通过调用其父类 AbstractRefreshableConfigApplicationContext 的方法进行对 Bean 配置信息的 定位，该方法的源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理单个资源文件路径为一个字符串的情况</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//String CONFIG_LOCATION_DELIMITERS = ",; /t/n";</span></span><br><span class="line">  <span class="comment">//即多个资源文件路径之间用” ,; \t\n”分隔，解析成数组形</span></span><br><span class="line">  setConfigLocations(StringUtils.tokenizeToStringArray(location, CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析 Bean 定义资源文件的路径，处理多个资源文件字符串数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigLocations</span><span class="params">(@Nullable String... locations)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (locations != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Assert.noNullElements(locations, <span class="string">"Config locations must not be null"</span>); </span><br><span class="line">    <span class="keyword">this</span>.configLocations = <span class="keyword">new</span> String[locations.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; locations.length; i++) &#123;</span><br><span class="line">      <span class="comment">// resolvePath 为同一个类中将字符串解析为路径的方法</span></span><br><span class="line">      <span class="keyword">this</span>.configLocations[i] = resolvePath(locations[i]).trim(); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.configLocations = <span class="keyword">null</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过这两个方法的源码我们可以看出，我们既可以使用一个字符串来配置多个 Spring Bean 配置信息， 也可以使用字符串数组，即下面两种方式都是可以的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathResource res = <span class="keyword">new</span> ClassPathResource(<span class="string">"a.xml,b.xml"</span>);</span><br></pre></td></tr></table></figure>

<p>多个资源文件路径之间可以是用” , ; \t\n”等分隔。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathResource res =<span class="keyword">new</span> ClassPathResource(<span class="keyword">new</span> String[]&#123;<span class="string">"a.xml"</span>,<span class="string">"b.xml"</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>至此，SpringIOC 容器在初始化时将配置的 Bean 配置信息定位为 Spring 封装的 Resource。</p>
<h3 id="3、开始启动"><a href="#3、开始启动" class="headerlink" title="3、开始启动"></a><strong>3、开始启动</strong></h3><p>SpringIOC 容器对 Bean 配置资源的载入是从 refresh()函数开始的，refresh()是一个模板方法，规定了 IOC 容器的启动流程，有些逻辑要交给其子类去实现。它对 Bean 配置资源进行载入 ClassPathXmlApplicationContext 通过调用其父类 AbstractApplicationContext 的 refresh()函数启 动整个 IOC 容器对 Bean 定义的载入过程，现在我们来详细看看 refresh()中的逻辑处理:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">      <span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">      <span class="comment">//1、调用容器准备刷新的方法，获取容器的当时时间，同时给容器设置同步标识</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">      <span class="comment">//2、告诉子类启动refreshBeanFactory()方法，Bean定义资源文件的载入从</span></span><br><span class="line">      <span class="comment">//子类的refreshBeanFactory()方法启动</span></span><br><span class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">      <span class="comment">//3、为BeanFactory配置容器特性，例如类加载器、事件处理器等</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">         <span class="comment">//4、为容器的某些子类指定特殊的BeanPost事件处理器</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">         <span class="comment">//5、调用所有注册的BeanFactoryPostProcessor的Bean</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">         <span class="comment">//6、为BeanFactory注册BeanPost事件处理器.</span></span><br><span class="line">         <span class="comment">//BeanPostProcessor是Bean后置处理器，用于监听容器触发的事件</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize message source for this context.</span></span><br><span class="line">         <span class="comment">//7、初始化信息源，和国际化相关.</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">         <span class="comment">//8、初始化容器事件传播器.</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">         <span class="comment">//9、调用子类的某些特殊Bean初始化方法</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">         <span class="comment">//10、为事件传播器注册事件监听器.</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">         <span class="comment">//11、初始化所有剩余的单例Bean</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">         <span class="comment">//12、初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                  <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         <span class="comment">//13、销毁已创建的Bean</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset 'active' flag.</span></span><br><span class="line">         <span class="comment">//14、取消refresh操作，重置容器的同步标识。</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         <span class="comment">//15、重设公共缓存</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>refresh()方法主要为 IOC 容器 Bean 的生命周期管理提供条件，Spring IOC 容器载入 Bean 配置信息 从其子类容器的 refreshBeanFactory()方法启动，所以整个 refresh()中 “ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();”这句以后代码的 都是注册容器的信息源和生命周期事件，我们前面说的载入就是从这句代码开始启动。</p>
<p>refresh()方法的主要作用是:在创建 IOC 容器前，如果已经有容器存在，则需要把已有的容器销毁和 关闭，以保证在 refresh 之后使用的是新建立起来的 IOC 容器。它类似于对 IOC 容器的重启，在新建立 好的容器中对容器进行初始化，对 Bean 配置资源进行载入。</p>
<h3 id="4、创建容器"><a href="#4、创建容器" class="headerlink" title="4、创建容器"></a><strong>4、创建容器</strong></h3><p>obtainFreshBeanFactory()方法调用子类容器的 refreshBeanFactory()方法，启动容器载入 Bean 配置 信息的过程，代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the fresh BeanFactory instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #refreshBeanFactory()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getBeanFactory()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//这里使用了委派设计模式，父类定义了抽象的refreshBeanFactory()方法，具体实现调用子类容器的refreshBeanFactory()方法</span></span><br><span class="line">   refreshBeanFactory();</span><br><span class="line">   ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractApplicationContext 类中只抽象定义了 refreshBeanFactory()方法，容器真正调用的是 其子类AbstractRefreshableApplicationContext实现的refreshBeanFactory()方法，方法的源 码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This implementation performs an actual refresh of this context's underlying</span></span><br><span class="line"><span class="comment"> * bean factory, shutting down the previous bean factory (if any) and</span></span><br><span class="line"><span class="comment"> * initializing a fresh bean factory for the next phase of the context's lifecycle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">   <span class="comment">//如果已经有容器，销毁容器中的bean，关闭容器</span></span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//创建IOC容器</span></span><br><span class="line">      DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line">      <span class="comment">//对IOC容器进行定制化，如设置启动参数，开启注解的自动装配等</span></span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line">      <span class="comment">//调用载入Bean定义的方法，主要这里又使用了一个委派模式，在当前类中只定义了抽象的loadBeanDefinitions方法，具体的实现调用子类容器</span></span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">         <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个方法中，先判断 BeanFactory 是否存在，如果存在则先销毁 beans 并关闭 beanFactory，接着创建 DefaultListableBeanFactory，并调用 loadBeanDefinitions(beanFactory)装载 bean 定义。</p>
<h3 id="5、载入配置路径"><a href="#5、载入配置路径" class="headerlink" title="5、载入配置路径"></a><strong>5、载入配置路径</strong></h3><p>AbstractRefreshableApplicationContext 中只定义了抽象的 loadBeanDefinitions 方法，容器真正调 用的是其子类 AbstractXmlApplicationContext 对该方法的实现，AbstractXmlApplicationContext 的主要源码如下:<br>loadBeanDefinitions() 方 法 同 样 是 抽 象 方 法 ， 是 由 其 子 类 实 现 的 ， 也 即 在 AbstractXmlApplicationContext 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Loads the bean definitions via an XmlBeanDefinitionReader.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #initBeanDefinitionReader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #loadBeanDefinitions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//实现父类抽象的载入Bean定义方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   <span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line">   <span class="comment">//创建XmlBeanDefinitionReader，即创建Bean读取器，并通过回调设置到容器中去，容  器使用该读取器读取Bean定义资源</span></span><br><span class="line">   XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Configure the bean definition reader with this context's</span></span><br><span class="line">   <span class="comment">// resource loading environment.</span></span><br><span class="line">   <span class="comment">//为Bean读取器设置Spring资源加载器，AbstractXmlApplicationContext的</span></span><br><span class="line">   <span class="comment">//祖先父类AbstractApplicationContext继承DefaultResourceLoader，因此，容器本身也是一个资源加载器</span></span><br><span class="line">   beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</span><br><span class="line">   beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</span><br><span class="line">   <span class="comment">//为Bean读取器设置SAX xml解析器</span></span><br><span class="line">   beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line">   <span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">   <span class="comment">//当Bean读取器读取Bean定义的Xml资源文件时，启用Xml的校验机制</span></span><br><span class="line">   initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">   <span class="comment">//Bean读取器真正实现加载的方法</span></span><br><span class="line">   loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize the bean definition reader used for loading the bean</span></span><br><span class="line"><span class="comment"> * definitions of this context. Default implementation is empty.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;Can be overridden in subclasses, e.g. for turning off XML validation</span></span><br><span class="line"><span class="comment"> * or using a different XmlBeanDefinitionParser implementation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reader the bean definition reader used by this context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader#setDocumentReaderClass</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBeanDefinitionReader</span><span class="params">(XmlBeanDefinitionReader reader)</span> </span>&#123;</span><br><span class="line">   reader.setValidating(<span class="keyword">this</span>.validating);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load the bean definitions with the given XmlBeanDefinitionReader.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;The lifecycle of the bean factory is handled by the &#123;<span class="doctag">@link</span> #refreshBeanFactory&#125;</span></span><br><span class="line"><span class="comment"> * method; hence this method is just supposed to load and/or register bean definitions.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> reader the XmlBeanDefinitionReader to use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException in case of bean registration errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException if the required XML document isn't found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #refreshBeanFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getConfigLocations</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getResources</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getResourcePatternResolver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Xml Bean读取器加载Bean定义资源</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</span><br><span class="line">   <span class="comment">//获取Bean定义资源的定位</span></span><br><span class="line">   Resource[] configResources = getConfigResources();</span><br><span class="line">   <span class="keyword">if</span> (configResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//Xml Bean读取器调用其父类AbstractBeanDefinitionReader读取定位</span></span><br><span class="line">      <span class="comment">//的Bean定义资源</span></span><br><span class="line">      reader.loadBeanDefinitions(configResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子类中获取的Bean定义资源定位为空，则获取FileSystemXmlApplicationContext构造方法中setConfigLocations方法设置的资源</span></span><br><span class="line">   String[] configLocations = getConfigLocations();</span><br><span class="line">   <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//Xml Bean读取器调用其父类AbstractBeanDefinitionReader读取定位</span></span><br><span class="line">      <span class="comment">//的Bean定义资源</span></span><br><span class="line">      reader.loadBeanDefinitions(configLocations);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an array of Resource objects, referring to the XML bean definition</span></span><br><span class="line"><span class="comment"> * files that this context should be built with.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;The default implementation returns &#123;<span class="doctag">@code</span> null&#125;. Subclasses can override</span></span><br><span class="line"><span class="comment"> * this to provide pre-built Resource objects rather than location Strings.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an array of Resource objects, or &#123;<span class="doctag">@code</span> null&#125; if none</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getConfigLocations()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这里又使用了一个委托模式，调用子类的获取Bean定义资源定位的方法</span></span><br><span class="line"><span class="comment">//该方法在ClassPathXmlApplicationContext中进行实现，对于我们</span></span><br><span class="line"><span class="comment">//举例分析源码的FileSystemXmlApplicationContext没有使用该方法</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> Resource[] getConfigResources() &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以 XmlBean 读取器的其中一种策略 XmlBeanDefinitionReader 为例。XmlBeanDefinitionReader 调 用其父类AbstractBeanDefinitionReader的 reader.loadBeanDefinitions()方法读取Bean配置资源。 由于我们使用 ClassPathXmlApplicationContext 作为例子分析，因此 getConfigResources 的返回值 为 null，因此程序执行 reader.loadBeanDefinitions(configLocations)分支。</p>
<h3 id="6、分配路径处理策略"><a href="#6、分配路径处理策略" class="headerlink" title="6、分配路径处理策略"></a><strong>6、分配路径处理策略</strong></h3><p>在 XmlBeanDefinitionReader 的抽象父类 AbstractBeanDefinitionReader 中定义了载入过程。</p>
<p>AbstractBeanDefinitionReader 的 loadBeanDefinitions()方法源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">"Resource array must not be null"</span>);</span><br><span class="line">   <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      counter += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载方法，调用下面的loadBeanDefinitions(String, Set\&lt;Resource\&gt;);方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> loadBeanDefinitions(location, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load bean definitions from the specified resource location.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;The location can also be a location pattern, provided that the</span></span><br><span class="line"><span class="comment"> * ResourceLoader of this bean definition reader is a ResourcePatternResolver.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> location the resource location, to be loaded with the ResourceLoader</span></span><br><span class="line"><span class="comment"> * (or ResourcePatternResolver) of this bean definition reader</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> actualResources a Set to be filled with the actual Resource objects</span></span><br><span class="line"><span class="comment"> * that have been resolved during the loading process. May be &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment"> * to indicate that the caller is not interested in those Resource objects.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of bean definitions found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException in case of loading or parsing errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getResourceLoader()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #loadBeanDefinitions(org.springframework.core.io.Resource)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #loadBeanDefinitions(org.springframework.core.io.Resource[])</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, @Nullable Set\&lt;Resource\&gt; actualResources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//获取在IoC容器初始化过程中设置的资源加载器</span></span><br><span class="line">   ResourceLoader resourceLoader = getResourceLoader();</span><br><span class="line">   <span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"Cannot import bean definitions from location ["</span> + location + <span class="string">"]: no ResourceLoader available"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</span><br><span class="line">      <span class="comment">// Resource pattern matching available.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//将指定位置的Bean定义资源文件解析为Spring IOC容器封装的资源</span></span><br><span class="line">         <span class="comment">//加载多个指定位置的Bean定义资源文件</span></span><br><span class="line">         Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</span><br><span class="line">         <span class="comment">//委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能</span></span><br><span class="line">         <span class="keyword">int</span> loadCount = loadBeanDefinitions(resources);</span><br><span class="line">         <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">               actualResources.add(resource);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Loaded "</span> + loadCount + <span class="string">" bean definitions from location pattern ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> loadCount;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">               <span class="string">"Could not resolve bean definition resource pattern ["</span> + location + <span class="string">"]"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Can only load single resources by absolute URL.</span></span><br><span class="line">      <span class="comment">//将指定位置的Bean定义资源文件解析为Spring IOC容器封装的资源</span></span><br><span class="line">      <span class="comment">//加载单个指定位置的Bean定义资源文件</span></span><br><span class="line">      Resource resource = resourceLoader.getResource(location);</span><br><span class="line">      <span class="comment">//委派调用其子类XmlBeanDefinitionReader的方法，实现加载功能</span></span><br><span class="line">      <span class="keyword">int</span> loadCount = loadBeanDefinitions(resource);</span><br><span class="line">      <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</span><br><span class="line">         actualResources.add(resource);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Loaded "</span> + loadCount + <span class="string">" bean definitions from location ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> loadCount;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载方法，调用loadBeanDefinitions(String);</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String... locations)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(locations, <span class="string">"Location array must not be null"</span>);</span><br><span class="line">   <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (String location : locations) &#123;</span><br><span class="line">      counter += loadBeanDefinitions(location);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AbstractRefreshableConfigApplicationContext 的 loadBeanDefinitions(Resource…resources) 方 法实际上是调用 AbstractBeanDefinitionReader 的 loadBeanDefinitions()方法。<br>从对 AbstractBeanDefinitionReader 的 loadBeanDefinitions()方法源码分析可以看出该方法就做了 两件事:</p>
<p>首先，调用资源加载器的获取资源方法 resourceLoader.getResource(location)，获取到要加载的资源。 其次，真正执行加载功能是其子类 XmlBeanDefinitionReader 的 loadBeanDefinitions()方法。在 loadBeanDefinitions()方法中调用了 AbstractApplicationContext 的 getResources()方法，跟进去之 后发现 getResources()方法其实定义在 ResourcePatternResolver 中，此时，我们有必要来看一下 ResourcePatternResolver 的全类图:</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg06klftj0j30xg0u0as9.jpg" alt="image-20200621202516102"></p>
<p>从上面可以看到 ResourceLoader 与 ApplicationContext 的继承关系，可以看出其实际调用的是 DefaultResourceLoader 中 的 getSource() 方 法 定 位 Resource ， 因 为 ClassPathXmlApplicationContext 本身就是 DefaultResourceLoader 的实现类，所以此时又回到了 ClassPathXmlApplicationContext 中来。</p>
<h3 id="7、解析配置文件路径"><a href="#7、解析配置文件路径" class="headerlink" title="7、解析配置文件路径"></a><strong>7、解析配置文件路径</strong></h3><p>XmlBeanDefinitionReader 通 过 调 用 ClassPathXmlApplicationContext 的父类DefaultResourceLoader 的 getResource()方法获取要加载的资源，其源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Resource的具体实现方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Resource <span class="title">getResource</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">   Assert.notNull(location, <span class="string">"Location must not be null"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (ProtocolResolver protocolResolver : <span class="keyword">this</span>.protocolResolvers) &#123;</span><br><span class="line">      Resource resource = protocolResolver.resolve(location, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (resource != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> resource;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果是类路径的方式，那需要使用ClassPathResource 来得到bean 文件的资源对象</span></span><br><span class="line">   <span class="keyword">if</span> (location.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> getResourceByPath(location);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (location.startsWith(CLASSPATH_URL_PREFIX)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Try to parse the location as a URL...</span></span><br><span class="line">         <span class="comment">// 如果是URL 方式，使用UrlResource 作为bean 文件的资源对象</span></span><br><span class="line">         URL url = <span class="keyword">new</span> URL(location);</span><br><span class="line">         <span class="keyword">return</span> (ResourceUtils.isFileURL(url) ? <span class="keyword">new</span> FileUrlResource(url) : <span class="keyword">new</span> UrlResource(url));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (MalformedURLException ex) &#123;</span><br><span class="line">         <span class="comment">// No URL -\&gt; resolve as resource path.</span></span><br><span class="line">         <span class="comment">//如果既不是classpath标识，又不是URL标识的Resource定位，则调用</span></span><br><span class="line">         <span class="comment">//容器本身的getResourceByPath方法获取Resource</span></span><br><span class="line">         <span class="keyword">return</span> getResourceByPath(location);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DefaultResourceLoader 提供了 getResourceByPath()方法的实现，就是为了处理既不是 classpath 标识，又不是 URL 标识的 Resource 定位这种情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Resource <span class="title">getResourceByPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ClassPathContextResource(path, getClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 ClassPathResource 中完成了对整个路径的解析。这样，就可以从类路径上对 IOC 配置文件进行加 载，当然我们可以按照这个逻辑从任何地方加载，在 Spring 中我们看到它提供的各种资源抽象，比如 ClassPathResource、URLResource、FileSystemResource 等来供我们使用。上面我们看到的是定位Resource 的一个过程，而这只是加载过程的一部分。例如 FileSystemXmlApplication 容器就重写了 getResourceByPath()方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resolve resource paths as file system paths.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;Note: Even if a given path starts with a slash, it will get</span></span><br><span class="line"><span class="comment"> * interpreted as relative to the current VM working directory.</span></span><br><span class="line"><span class="comment"> * This is consistent with the semantics in a Servlet container.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path path to the resource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Resource handle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.context.support.XmlWebApplicationContext#getResourceByPath</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Resource <span class="title">getResourceByPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (path.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">      path = path.substring(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//这里使用文件系统资源对象来定义bean 文件</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> FileSystemResource(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过子类的覆盖，巧妙地完成了将类路径变为文件路径的转换。</p>
<h3 id="8、开始读取配置内容"><a href="#8、开始读取配置内容" class="headerlink" title="8、开始读取配置内容"></a><strong>8、开始读取配置内容</strong></h3><p>继续回到 XmlBeanDefinitionReader 的 loadBeanDefinitions(Resource …)方法看到代表 bean 文件 的资源定义以后的载入过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load bean definitions from the specified XML file.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resource the resource descriptor for the XML file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of bean definitions found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException in case of loading or parsing errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//XmlBeanDefinitionReader加载资源的入口方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//将读入的XML资源进行特殊编码处理</span></span><br><span class="line">   <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> EncodedResource(resource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load bean definitions from the specified XML file.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> encodedResource the resource descriptor for the XML file,</span></span><br><span class="line"><span class="comment"> * allowing to specify an encoding to use for parsing the file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of bean definitions found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException in case of loading or parsing errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这里是载入XML形式Bean定义资源文件方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   Assert.notNull(encodedResource, <span class="string">"EncodedResource must not be null"</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      logger.info(<span class="string">"Loading XML bean definitions from "</span> + encodedResource.getResource());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Set\&lt;EncodedResource\&gt; currentResources = <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">   <span class="keyword">if</span> (currentResources == <span class="keyword">null</span>) &#123;</span><br><span class="line">      currentResources = <span class="keyword">new</span> HashSet\&lt;\&gt;(<span class="number">4</span>);</span><br><span class="line">      <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"Detected cyclic loading of "</span> + encodedResource + <span class="string">" - check your import definitions!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//将资源文件转为InputStream的IO流</span></span><br><span class="line">      InputStream inputStream = encodedResource.getResource().getInputStream();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//从InputStream中得到XML的解析源</span></span><br><span class="line">         InputSource inputSource = <span class="keyword">new</span> InputSource(inputStream);</span><br><span class="line">         <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//这里是具体的读取过程</span></span><br><span class="line">         <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">//关闭从Resource中得到的IO流</span></span><br><span class="line">         inputStream.close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">            <span class="string">"IOException parsing XML document from "</span> + encodedResource.getResource(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      currentResources.remove(encodedResource);</span><br><span class="line">      <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">         <span class="keyword">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load bean definitions from the specified XML file.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputSource the SAX InputSource to read from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of bean definitions found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException in case of loading or parsing errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(InputSource inputSource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> loadBeanDefinitions(inputSource, <span class="string">"resource loaded through SAX InputSource"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load bean definitions from the specified XML file.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputSource the SAX InputSource to read from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resourceDescription a description of the resource</span></span><br><span class="line"><span class="comment"> * (can be &#123;<span class="doctag">@code</span> null&#125; or empty)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of bean definitions found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException in case of loading or parsing errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(InputSource inputSource, @Nullable String resourceDescription)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, <span class="keyword">new</span> DescriptiveResource(resourceDescription));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Actually load bean definitions from the specified XML file.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputSource the SAX InputSource to read from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resource the resource descriptor for the XML file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of bean definitions found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException in case of loading or parsing errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #doLoadDocument</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #registerBeanDefinitions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//从特定XML文件中实际载入Bean定义资源的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//将XML文件转换为DOM对象，解析过程由documentLoader实现</span></span><br><span class="line">      Document doc = doLoadDocument(inputSource, resource);</span><br><span class="line">      <span class="comment">//这里是启动对Bean定义解析的详细过程，该解析过程会用到Spring的Bean配置规则</span></span><br><span class="line">      <span class="keyword">return</span> registerBeanDefinitions(doc, resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (SAXParseException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Line "</span> + ex.getLineNumber() + <span class="string">" in XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (SAXException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"XML document from "</span> + resource + <span class="string">" is invalid"</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Parser configuration exception parsing XML from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"IOException parsing XML document from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class="line">            <span class="string">"Unexpected exception parsing XML document from "</span> + resource, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过源码分析，载入 Bean 配置信息的最后一步是将 Bean 配置信息转换为 Document 对象，该过程由documentLoader()方法实现。</p>
<h3 id="9、准备文档对象"><a href="#9、准备文档对象" class="headerlink" title="9、准备文档对象"></a><strong>9、准备文档对象</strong></h3><p>DocumentLoader 将 Bean 配置资源转换成 Document 对象的源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load the &#123;<span class="doctag">@link</span> Document&#125; at the supplied &#123;<span class="doctag">@link</span> InputSource&#125; using the standard JAXP-configured</span></span><br><span class="line"><span class="comment"> * XML parser.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//使用标准的JAXP将载入的Bean定义资源转换成document对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Document <span class="title">loadDocument</span><span class="params">(InputSource inputSource, EntityResolver entityResolver,</span></span></span><br><span class="line"><span class="function"><span class="params">      ErrorHandler errorHandler, <span class="keyword">int</span> validationMode, <span class="keyword">boolean</span> namespaceAware)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建文件解析器工厂</span></span><br><span class="line">   DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware);</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Using JAXP provider ["</span> + factory.getClass().getName() + <span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//创建文档解析器</span></span><br><span class="line">   DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler);</span><br><span class="line">   <span class="comment">//解析Spring的Bean定义资源</span></span><br><span class="line">   <span class="keyword">return</span> builder.parse(inputSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create the &#123;<span class="doctag">@link</span> DocumentBuilderFactory&#125; instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> validationMode the type of validation: &#123;<span class="doctag">@link</span> XmlValidationModeDetector#VALIDATION_DTD DTD&#125;</span></span><br><span class="line"><span class="comment"> * or &#123;<span class="doctag">@link</span> XmlValidationModeDetector#VALIDATION_XSD XSD&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> namespaceAware whether the returned factory is to provide support for XML namespaces</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the JAXP DocumentBuilderFactory</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ParserConfigurationException if we failed to build a proper DocumentBuilderFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DocumentBuilderFactory <span class="title">createDocumentBuilderFactory</span><span class="params">(<span class="keyword">int</span> validationMode, <span class="keyword">boolean</span> namespaceAware)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> ParserConfigurationException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建文档解析工厂</span></span><br><span class="line">   DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">   factory.setNamespaceAware(namespaceAware);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//设置解析XML的校验</span></span><br><span class="line">   <span class="keyword">if</span> (validationMode != XmlValidationModeDetector.VALIDATION_NONE) &#123;</span><br><span class="line">      factory.setValidating(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">if</span> (validationMode == XmlValidationModeDetector.VALIDATION_XSD) &#123;</span><br><span class="line">         <span class="comment">// Enforce namespace aware for XSD...</span></span><br><span class="line">         factory.setNamespaceAware(<span class="keyword">true</span>);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            factory.setAttribute(SCHEMA_LANGUAGE_ATTRIBUTE, XSD_SCHEMA_LANGUAGE);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            ParserConfigurationException pcex = <span class="keyword">new</span> ParserConfigurationException(</span><br><span class="line">                  <span class="string">"Unable to validate using XSD: Your JAXP provider ["</span> + factory +</span><br><span class="line">                  <span class="string">"] does not support XML Schema. Are you running on Java 1.4 with Apache Crimson? "</span> +</span><br><span class="line">                  <span class="string">"Upgrade to Apache Xerces (or Java 1.5) for full XSD support."</span>);</span><br><span class="line">            pcex.initCause(ex);</span><br><span class="line">            <span class="keyword">throw</span> pcex;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的解析过程是调用 JavaEE 标准的 JAXP 标准进行处理。至此 Spring IOC 容器根据定位的 Bean 配 置信息，将其加载读入并转换成为 Document 对象过程完成。接下来我们要继续分析 Spring IOC 容器 将载入的 Bean 配置信息转换为 Document 对象之后，是如何将其解析为 Spring IOC 管理的 Bean 对象 并将其注册到容器中的。</p>
<h3 id="10、分配解析策略"><a href="#10、分配解析策略" class="headerlink" title="10、分配解析策略"></a><strong>10、分配解析策略</strong></h3><p>XmlBeanDefinitionReader 类中的 doLoadBeanDefinition()方法是从特定 XML 文件中实际载入 Bean 配置资源的方法，该方法在载入 Bean 配置资源之后将其转换为 Document 对象，接下来调用 registerBeanDefinitions() 启 动 Spring IOC 容 器 对 Bean 定 义 的 解 析 过 程 ， registerBeanDefinitions()方法源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the bean definitions contained in the given DOM document.</span></span><br><span class="line"><span class="comment"> * Called by &#123;<span class="doctag">@code</span> loadBeanDefinitions&#125;.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;Creates a new instance of the parser class and invokes</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> registerBeanDefinitions&#125; on it.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> doc the DOM document</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resource the resource descriptor (for context information)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of bean definitions found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException in case of parsing errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #loadBeanDefinitions</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setDocumentReaderClass</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> BeanDefinitionDocumentReader#registerBeanDefinitions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//按照Spring的Bean语义要求将Bean定义资源解析并转换为容器内部数据结构</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line">   <span class="comment">//得到BeanDefinitionDocumentReader来对xml格式的BeanDefinition解析</span></span><br><span class="line">   BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</span><br><span class="line">   <span class="comment">//获得容器中注册的Bean数量</span></span><br><span class="line">   <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</span><br><span class="line">   <span class="comment">//解析过程入口，这里使用了委派模式，BeanDefinitionDocumentReader只是个接口,</span></span><br><span class="line">   <span class="comment">//具体的解析实现过程有实现类DefaultBeanDefinitionDocumentReader完成</span></span><br><span class="line">   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">   <span class="comment">//统计解析的Bean数量</span></span><br><span class="line">   <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Bean 配置资源的载入解析分为以下两个过程:<br>首先，通过调用 XML 解析器将 Bean 配置信息转换得到 Document 对象，但是这些 Document 对象 并没有按照 Spring 的 Bean 规则进行解析。这一步是载入的过程<br>其次，在完成通用的 XML 解析之后，按照 Spring Bean 的定义规则对 Document 对象进行解析，其 解 析 过 程 是 在 接 口 BeanDefinitionDocumentReader 的 实 现 类 DefaultBeanDefinitionDocumentReader 中实现。</p>
<h3 id="11、将配置载入内存"><a href="#11、将配置载入内存" class="headerlink" title="11、将配置载入内存"></a><strong>11、将配置载入内存</strong></h3><p>BeanDefinitionDocumentReader 接 口 通 过 registerBeanDefinitions() 方 法 调 用 其 实 现 类 DefaultBeanDefinitionDocumentReader 对 Document 对象进行解析，解析的代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This implementation parses bean definitions according to the "spring-beans" XSD</span></span><br><span class="line"><span class="comment"> * (or DTD, historically).</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;Opens a DOM Document; then initializes the default settings</span></span><br><span class="line"><span class="comment"> * specified at the &#123;<span class="doctag">@code</span> \&lt;beans/\&gt;&#125; level; then parses the contained bean definitions.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//根据Spring DTD对Bean的定义规则解析Bean定义Document对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获得XML描述符</span></span><br><span class="line">   <span class="keyword">this</span>.readerContext = readerContext;</span><br><span class="line">   logger.debug(<span class="string">"Loading bean definitions"</span>);</span><br><span class="line">   <span class="comment">//获得Document的根元素</span></span><br><span class="line">   Element root = doc.getDocumentElement();</span><br><span class="line">   doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the descriptor for the XML resource that this parser works on.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> XmlReaderContext <span class="title">getReaderContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Assert.state(<span class="keyword">this</span>.readerContext != <span class="keyword">null</span>, <span class="string">"No XmlReaderContext available"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.readerContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoke the &#123;<span class="doctag">@link</span> org.springframework.beans.factory.parsing.SourceExtractor&#125;</span></span><br><span class="line"><span class="comment"> * to pull the source metadata from the supplied &#123;<span class="doctag">@link</span> Element&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">extractSource</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> getReaderContext().extractSource(ele);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register each bean definition within the given root &#123;<span class="doctag">@code</span> \&lt;beans/\&gt;&#125; element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Any nested \&lt;beans\&gt; elements will cause recursion in this method. In</span></span><br><span class="line">   <span class="comment">// order to propagate and preserve \&lt;beans\&gt; default-* attributes correctly,</span></span><br><span class="line">   <span class="comment">// keep track of the current (parent) delegate, which may be null. Create</span></span><br><span class="line">   <span class="comment">// the new (child) delegate with a reference to the parent for fallback purposes,</span></span><br><span class="line">   <span class="comment">// then ultimately reset this.delegate back to its original (parent) reference.</span></span><br><span class="line">   <span class="comment">// this behavior emulates a stack of delegates without actually necessitating one.</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//具体的解析过程由BeanDefinitionParserDelegate实现，</span></span><br><span class="line">   <span class="comment">//BeanDefinitionParserDelegate中定义了Spring Bean定义XML文件的各种元素</span></span><br><span class="line">   BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line">   <span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">         String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">               profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">         <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">               logger.info(<span class="string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</span><br><span class="line">                     <span class="string">"] not matching: "</span> + getReaderContext().getResource());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在解析Bean定义之前，进行自定义的解析，增强解析过程的可扩展性</span></span><br><span class="line">   preProcessXml(root);</span><br><span class="line">   <span class="comment">//从Document的根元素开始进行Bean定义的Document对象</span></span><br><span class="line">   parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">   <span class="comment">//在解析Bean定义之后，进行自定义的解析，增加解析过程的可扩展性</span></span><br><span class="line">   postProcessXml(root);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建BeanDefinitionParserDelegate，用于完成真正的解析过程</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> BeanDefinitionParserDelegate <span class="title">createDelegate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      XmlReaderContext readerContext, Element root, @Nullable BeanDefinitionParserDelegate parentDelegate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   BeanDefinitionParserDelegate delegate = <span class="keyword">new</span> BeanDefinitionParserDelegate(readerContext);</span><br><span class="line">   <span class="comment">//BeanDefinitionParserDelegate初始化Document根元素</span></span><br><span class="line">   delegate.initDefaults(root, parentDelegate);</span><br><span class="line">   <span class="keyword">return</span> delegate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse the elements at the root level in the document:</span></span><br><span class="line"><span class="comment"> * "import", "alias", "bean".</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root the DOM root element of the document</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//使用Spring的Bean规则从Document的根元素开始进行Bean定义的Document对象</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//Bean定义的Document对象使用了Spring默认的XML命名空间</span></span><br><span class="line">   <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      <span class="comment">//获取Bean定义的Document对象根元素的所有子节点</span></span><br><span class="line">      NodeList nl = root.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; nl.getLength(); i++) &#123;</span><br><span class="line">         Node node = nl.item(i);</span><br><span class="line">         <span class="comment">//获得Document节点是XML元素节点</span></span><br><span class="line">         <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">            Element ele = (Element) node;</span><br><span class="line">            <span class="comment">//Bean定义的Document的元素节点使用的是Spring默认的XML命名空间</span></span><br><span class="line">            <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">               <span class="comment">//使用Spring的Bean规则解析元素节点</span></span><br><span class="line">               parseDefaultElement(ele, delegate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//没有使用Spring默认的XML命名空间，则使用用户自定义的解//析规则解析元素节点</span></span><br><span class="line">               delegate.parseCustomElement(ele);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//Document的根节点没有使用Spring默认的命名空间，则使用用户自定义的</span></span><br><span class="line">      <span class="comment">//解析规则解析Document根节点</span></span><br><span class="line">      delegate.parseCustomElement(root);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Spring的Bean规则解析Document元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//如果元素节点是\&lt;Import\&gt;导入元素，进行导入解析</span></span><br><span class="line">   <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">      importBeanDefinitionResource(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果元素节点是\&lt;Alias\&gt;别名元素，进行别名解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">      processAliasRegistration(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//元素节点既不是导入元素，也不是别名元素，即普通的\&lt;Bean\&gt;元素，</span></span><br><span class="line">   <span class="comment">//按照Spring的Bean规则解析元素</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      processBeanDefinition(ele, delegate);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// recurse</span></span><br><span class="line">      doRegisterBeanDefinitions(ele);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse an "import" element and load the bean definitions</span></span><br><span class="line"><span class="comment"> * from the given resource into the bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析\&lt;Import\&gt;导入元素，从给定的导入路径加载Bean定义资源到Spring IoC容器中</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">importBeanDefinitionResource</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获取给定的导入元素的location属性</span></span><br><span class="line">   String location = ele.getAttribute(RESOURCE_ATTRIBUTE);</span><br><span class="line">   <span class="comment">//如果导入元素的location属性值为空，则没有导入任何资源，直接返回</span></span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(location)) &#123;</span><br><span class="line">      getReaderContext().error(<span class="string">"Resource location must not be empty"</span>, ele);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Resolve system properties: e.g. "$&#123;user.dir&#125;"</span></span><br><span class="line">   <span class="comment">//使用系统变量值解析location属性值</span></span><br><span class="line">   location = getReaderContext().getEnvironment().resolveRequiredPlaceholders(location);</span><br><span class="line"></span><br><span class="line">   Set\&lt;Resource\&gt; actualResources = <span class="keyword">new</span> LinkedHashSet\&lt;\&gt;(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Discover whether the location is an absolute or relative URI</span></span><br><span class="line">   <span class="comment">//标识给定的导入元素的location是否是绝对路径</span></span><br><span class="line">   <span class="keyword">boolean</span> absoluteLocation = <span class="keyword">false</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      absoluteLocation = ResourcePatternUtils.isUrl(location) || ResourceUtils.toURI(location).isAbsolute();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (URISyntaxException ex) &#123;</span><br><span class="line">      <span class="comment">// cannot convert to an URI, considering the location relative</span></span><br><span class="line">      <span class="comment">// unless it is the well-known Spring prefix "classpath*:"</span></span><br><span class="line">      <span class="comment">//给定的导入元素的location不是绝对路径</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Absolute or relative?</span></span><br><span class="line">   <span class="comment">//给定的导入元素的location是绝对路径</span></span><br><span class="line">   <span class="keyword">if</span> (absoluteLocation) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//使用资源读入器加载给定路径的Bean定义资源</span></span><br><span class="line">         <span class="keyword">int</span> importCount = getReaderContext().getReader().loadBeanDefinitions(location, actualResources);</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Imported "</span> + importCount + <span class="string">" bean definitions from URL location ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(</span><br><span class="line">               <span class="string">"Failed to import bean definitions from URL location ["</span> + location + <span class="string">"]"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// No URL -\&gt; considering resource location as relative to the current file.</span></span><br><span class="line">      <span class="comment">//给定的导入元素的location是相对路径</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">int</span> importCount;</span><br><span class="line">         <span class="comment">//将给定导入元素的location封装为相对路径资源</span></span><br><span class="line">         Resource relativeResource = getReaderContext().getResource().createRelative(location);</span><br><span class="line">         <span class="comment">//封装的相对路径资源存在</span></span><br><span class="line">         <span class="keyword">if</span> (relativeResource.exists()) &#123;</span><br><span class="line">            <span class="comment">//使用资源读入器加载Bean定义资源</span></span><br><span class="line">            importCount = getReaderContext().getReader().loadBeanDefinitions(relativeResource);</span><br><span class="line">            actualResources.add(relativeResource);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//封装的相对路径资源不存在</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取Spring IOC容器资源读入器的基本路径</span></span><br><span class="line">            String baseLocation = getReaderContext().getResource().getURL().toString();</span><br><span class="line">            <span class="comment">//根据Spring IOC容器资源读入器的基本路径加载给定导入路径的资源</span></span><br><span class="line">            importCount = getReaderContext().getReader().loadBeanDefinitions(</span><br><span class="line">                  StringUtils.applyRelativePath(baseLocation, location), actualResources);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Imported "</span> + importCount + <span class="string">" bean definitions from relative location ["</span> + location + <span class="string">"]"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to resolve current resource location"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to import bean definitions from relative location ["</span> + location + <span class="string">"]"</span>,</span><br><span class="line">               ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   Resource[] actResArray = actualResources.toArray(<span class="keyword">new</span> Resource[actualResources.size()]);</span><br><span class="line">   <span class="comment">//在解析完\&lt;Import\&gt;元素之后，发送容器导入其他资源处理完成事件</span></span><br><span class="line">   getReaderContext().fireImportProcessed(location, actResArray, extractSource(ele));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the given alias element, registering the alias with the registry.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析\&lt;Alias\&gt;别名元素，为Bean向Spring IoC容器注册别名</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processAliasRegistration</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获取\&lt;Alias\&gt;别名元素中name的属性值</span></span><br><span class="line">   String name = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">   <span class="comment">//获取\&lt;Alias\&gt;别名元素中alias的属性值</span></span><br><span class="line">   String alias = ele.getAttribute(ALIAS_ATTRIBUTE);</span><br><span class="line">   <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line">   <span class="comment">//\&lt;alias\&gt;别名元素的name属性值为空</span></span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class="line">      getReaderContext().error(<span class="string">"Name must not be empty"</span>, ele);</span><br><span class="line">      valid = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//\&lt;alias\&gt;别名元素的alias属性值为空</span></span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(alias)) &#123;</span><br><span class="line">      getReaderContext().error(<span class="string">"Alias must not be empty"</span>, ele);</span><br><span class="line">      valid = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//向容器的资源读入器注册别名</span></span><br><span class="line">         getReaderContext().getRegistry().registerAlias(name, alias);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to register alias '"</span> + alias +</span><br><span class="line">               <span class="string">"' for bean with name '"</span> + name + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//在解析完\&lt;Alias\&gt;元素之后，发送容器别名处理完成事件</span></span><br><span class="line">      getReaderContext().fireAliasRegistered(name, alias, extractSource(ele));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process the given bean element, parsing the bean definition</span></span><br><span class="line"><span class="comment"> * and registering it with the registry.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析Bean定义资源Document对象的普通元素</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">   BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">   <span class="comment">// BeanDefinitionHolder是对BeanDefinition的封装，即Bean定义的封装类</span></span><br><span class="line">   <span class="comment">//对Document对象中\&lt;Bean\&gt;元素的解析由BeanDefinitionParserDelegate实现</span></span><br><span class="line">   <span class="comment">// BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span></span><br><span class="line">   <span class="keyword">if</span> (bdHolder != <span class="keyword">null</span>) &#123;</span><br><span class="line">      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Register the final decorated instance.</span></span><br><span class="line">         <span class="comment">//向Spring IOC容器注册解析得到的Bean定义，这是Bean定义向IOC容器注册的入口</span></span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">               bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Send registration event.</span></span><br><span class="line">      <span class="comment">//在完成向Spring IOC容器注册解析得到的Bean定义之后，发送注册事件</span></span><br><span class="line">      getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allow the XML to be extensible by processing any custom element types first,</span></span><br><span class="line"><span class="comment"> * before we start to process the bean definitions. This method is a natural</span></span><br><span class="line"><span class="comment"> * extension point for any other custom pre-processing of the XML.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;The default implementation is empty. Subclasses can override this method to</span></span><br><span class="line"><span class="comment"> * convert custom elements into standard Spring bean definitions, for example.</span></span><br><span class="line"><span class="comment"> * Implementors have access to the parser's bean definition reader and the</span></span><br><span class="line"><span class="comment"> * underlying XML resource, through the corresponding accessors.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getReaderContext()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">preProcessXml</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allow the XML to be extensible by processing any custom element types last,</span></span><br><span class="line"><span class="comment"> * after we finished processing the bean definitions. This method is a natural</span></span><br><span class="line"><span class="comment"> * extension point for any other custom post-processing of the XML.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;The default implementation is empty. Subclasses can override this method to</span></span><br><span class="line"><span class="comment"> * convert custom elements into standard Spring bean definitions, for example.</span></span><br><span class="line"><span class="comment"> * Implementors have access to the parser's bean definition reader and the</span></span><br><span class="line"><span class="comment"> * underlying XML resource, through the corresponding accessors.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getReaderContext()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessXml</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上述 Spring IOC 容器对载入的 Bean 定义 Document 解析可以看出，我们使用 Spring 时，在 Spring 配置文件中可以使用&lt;import&gt;元素来导入 IOC 容器所需要的其他资源，Spring IOC 容器在解 析时会首先将指定导入的资源加载进容器中。使用&lt;ailas&gt;别名时，Spring IOC 容器首先将别名元素所 定义的别名注册到容器中。</p>
<p>对于既不是&lt;import&gt;元素，又不是&lt;alias&gt;元素的元素，即 Spring 配置文件中普通的&lt;bean&gt;元素的 解析由 BeanDefinitionParserDelegate 类的 parseBeanDefinitionElement()方法来实现。这个解析的 过程非常复杂，我们在 mini 版本的时候，就用 properties 文件代替了。</p>
<h3 id="12、载入-lt-bean-gt-元素"><a href="#12、载入-lt-bean-gt-元素" class="headerlink" title="12、载入&lt;bean&gt;元素"></a><strong>12、载入&lt;bean&gt;元素</strong></h3><p>Bean 配置信息中的&lt;import&gt;和&lt;alias&gt;元素解析在 DefaultBeanDefinitionDocumentReader 中已 经完成，对 Bean 配置信息中使用最多的&lt;bean&gt;元素交由 BeanDefinitionParserDelegate 来解析， 其解析实现的源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parses the supplied &#123;<span class="doctag">@code</span> \&lt;bean\&gt;&#125; element. May return &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment"> * if there were errors during parse. Errors are reported to the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.parsing.ProblemReporter&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析\&lt;Bean\&gt;元素的入口</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> parseBeanDefinitionElement(ele, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parses the supplied &#123;<span class="doctag">@code</span> \&lt;bean\&gt;&#125; element. May return &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment"> * if there were errors during parse. Errors are reported to the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.beans.factory.parsing.ProblemReporter&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析Bean定义资源文件中的\&lt;Bean\&gt;元素，这个方法中主要处理\&lt;Bean\&gt;元素的id，name和别名属性</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获取\&lt;Bean\&gt;元素中的id属性值</span></span><br><span class="line">   String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">   <span class="comment">//获取\&lt;Bean\&gt;元素中的name属性值</span></span><br><span class="line">   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取\&lt;Bean\&gt;元素中的alias属性值</span></span><br><span class="line">   List\&lt;String\&gt; aliases = <span class="keyword">new</span> ArrayList\&lt;\&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将\&lt;Bean\&gt;元素中的所有name属性值存放到别名中</span></span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">      String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">      aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   String beanName = id;</span><br><span class="line">   <span class="comment">//如果\&lt;Bean\&gt;元素中没有配置id属性时，将别名中的第一个值赋值给beanName</span></span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">      beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"No XML 'id' specified - using '"</span> + beanName +</span><br><span class="line">               <span class="string">"' as bean name and "</span> + aliases + <span class="string">" as aliases"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//检查\&lt;Bean\&gt;元素所配置的id或者name的唯一性，containingBean标识\&lt;Bean\&gt;</span></span><br><span class="line">   <span class="comment">//元素中是否包含子\&lt;Bean\&gt;元素</span></span><br><span class="line">   <span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//检查\&lt;Bean\&gt;元素所配置的id、name或者别名是否重复</span></span><br><span class="line">      checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//详细对\&lt;Bean\&gt;元素中配置的Bean定义进行解析的地方</span></span><br><span class="line">   AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">   <span class="keyword">if</span> (beanDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">//如果\&lt;Bean\&gt;元素中没有配置id、别名或者name，且没有包含子元素</span></span><br><span class="line">               <span class="comment">//\&lt;Bean\&gt;元素，为解析的Bean生成一个唯一beanName并注册</span></span><br><span class="line">               beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                     beanDefinition, <span class="keyword">this</span>.readerContext.getRegistry(), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//如果\&lt;Bean\&gt;元素中没有配置id、别名或者name，且包含了子元素</span></span><br><span class="line">               <span class="comment">//\&lt;Bean\&gt;元素，为解析的Bean使用别名向IOC容器注册</span></span><br><span class="line">               beanName = <span class="keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">               <span class="comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line">               <span class="comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line">               <span class="comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line">               <span class="comment">//为解析的Bean使用别名注册时，为了向后兼容</span></span><br><span class="line">               <span class="comment">//Spring1.2/2.0，给别名添加类名后缀</span></span><br><span class="line">               String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">               <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     beanName.startsWith(beanClassName) &amp;&amp; beanName.length() \&gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                     !<span class="keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                  aliases.add(beanClassName);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line">                     <span class="string">"using generated bean name ["</span> + beanName + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            error(ex.getMessage(), ele);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//当解析出错时，返回null</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Validate that the specified bean name and aliases have not been used already</span></span><br><span class="line"><span class="comment"> * within the current level of beans element nesting.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkNameUniqueness</span><span class="params">(String beanName, List\&lt;String\&gt; aliases, Element beanElement)</span> </span>&#123;</span><br><span class="line">   String foundName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasText(beanName) &amp;&amp; <span class="keyword">this</span>.usedNames.contains(beanName)) &#123;</span><br><span class="line">      foundName = beanName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (foundName == <span class="keyword">null</span>) &#123;</span><br><span class="line">      foundName = CollectionUtils.findFirstMatch(<span class="keyword">this</span>.usedNames, aliases);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (foundName != <span class="keyword">null</span>) &#123;</span><br><span class="line">      error(<span class="string">"Bean name '"</span> + foundName + <span class="string">"' is already used in this \&lt;beans\&gt; element"</span>, beanElement);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.usedNames.add(beanName);</span><br><span class="line">   <span class="keyword">this</span>.usedNames.addAll(aliases);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse the bean definition itself, without regard to name or aliases. May return</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> null&#125; if problems occurred during the parsing of the bean definition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//详细对\&lt;Bean\&gt;元素中配置的Bean定义其他属性进行解析</span></span><br><span class="line"><span class="comment">//由于上面的方法中已经对Bean的id、name和别名等属性进行了处理</span></span><br><span class="line"><span class="comment">//该方法中主要处理除这三个以外的其他属性数据</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionElement</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      Element ele, String beanName, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//记录解析的\&lt;Bean\&gt;</span></span><br><span class="line">   <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</span><br><span class="line"></span><br><span class="line">   <span class="comment">//这里只读取\&lt;Bean\&gt;元素中配置的class名字，然后载入到BeanDefinition中去</span></span><br><span class="line">   <span class="comment">//只是记录配置的class名字，不做实例化，对象的实例化在依赖注入时完成</span></span><br><span class="line">   String className = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如果\&lt;Bean\&gt;元素中配置了parent属性，则获取parent属性的值</span></span><br><span class="line">   <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">      className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">   &#125;</span><br><span class="line">   String parent = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">      parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//根据\&lt;Bean\&gt;元素配置的class名称和parent属性值创建BeanDefinition</span></span><br><span class="line">      <span class="comment">//为载入Bean定义信息做准备</span></span><br><span class="line">      AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//对当前的\&lt;Bean\&gt;元素中配置的一些属性进行解析和设置，如配置的单态(singleton)属性等</span></span><br><span class="line">      parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">      <span class="comment">//为\&lt;Bean\&gt;元素解析的Bean设置description信息</span></span><br><span class="line">      bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line"></span><br><span class="line">      <span class="comment">//对\&lt;Bean\&gt;元素的meta(元信息)属性解析</span></span><br><span class="line">      parseMetaElements(ele, bd);</span><br><span class="line">      <span class="comment">//对\&lt;Bean\&gt;元素的lookup-method属性解析</span></span><br><span class="line">      parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">      <span class="comment">//对\&lt;Bean\&gt;元素的replaced-method属性解析</span></span><br><span class="line">      parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//解析\&lt;Bean\&gt;元素的构造方法设置</span></span><br><span class="line">      parseConstructorArgElements(ele, bd);</span><br><span class="line">      <span class="comment">//解析\&lt;Bean\&gt;元素的\&lt;property\&gt;设置</span></span><br><span class="line">      parsePropertyElements(ele, bd);</span><br><span class="line">      <span class="comment">//解析\&lt;Bean\&gt;元素的qualifier属性</span></span><br><span class="line">      parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//为当前解析的Bean设置所需的资源和依赖对象</span></span><br><span class="line">      bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</span><br><span class="line">      bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> bd;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">      error(<span class="string">"Bean class ["</span> + className + <span class="string">"] not found"</span>, ele, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">      error(<span class="string">"Class that bean class ["</span> + className + <span class="string">"] depends on not found"</span>, ele, err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      error(<span class="string">"Unexpected failure during bean definition parsing"</span>, ele, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//解析\&lt;Bean\&gt;元素出错时，返回null</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要使用过 Spring，对 Spring 配置文件比较熟悉的人，通过对上述源码的分析，就会明白我们在 Spring 配置文件中&lt;Bean&gt;元素的中配置的属性就是通过该方法解析和设置到 Bean 中去的。 注意:在解析&lt;Bean&gt;元素过程中没有创建和实例化 Bean 对象，只是创建了 Bean 对象的定义类 BeanDefinition，将&lt;Bean&gt;元素中的配置信息设置到 BeanDefinition 中作为记录，当依赖注入时才 使用这些记录信息创建和实例化具体的 Bean 对象。 上面方法中一些对一些配置如元信息(meta)、qualifier 等的解析，我们在 Spring 中配置时使用的也不 多，我们在使用 Spring 的&lt;Bean&gt;元素时，配置最多的是&lt;property&gt;属性，因此我们下面继续分析源 码，了解 Bean 的属性在解析时是如何设置的。</p>
<h3 id="13、载入-lt-property-gt-元素"><a href="#13、载入-lt-property-gt-元素" class="headerlink" title="13、载入&lt;property&gt;元素"></a>13、载入&lt;property&gt;元素</h3><p>BeanDefinitionParserDelegate 在解析&lt;Bean&gt;调用 parsePropertyElements()方法解析&lt;Bean&gt;元 素中的&lt;property&gt;属性子元素，解析源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse property sub-elements of the given bean element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析\&lt;Bean\&gt;元素中的\&lt;property\&gt;子元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parsePropertyElements</span><span class="params">(Element beanEle, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获取\&lt;Bean\&gt;元素中所有的子元素</span></span><br><span class="line">   NodeList nl = beanEle.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="comment">//如果子元素是\&lt;property\&gt;子元素，则调用解析\&lt;property\&gt;子元素方法解析</span></span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</span><br><span class="line">         parsePropertyElement((Element) node, bd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse qualifier sub-elements of the given bean element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseQualifierElements</span><span class="params">(Element beanEle, AbstractBeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   NodeList nl = beanEle.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ELEMENT)) &#123;</span><br><span class="line">         parseQualifierElement((Element) node, bd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse lookup-override sub-elements of the given bean element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseLookupOverrideSubElements</span><span class="params">(Element beanEle, MethodOverrides overrides)</span> </span>&#123;</span><br><span class="line">   NodeList nl = beanEle.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, LOOKUP_METHOD_ELEMENT)) &#123;</span><br><span class="line">         Element ele = (Element) node;</span><br><span class="line">         String methodName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">         String beanRef = ele.getAttribute(BEAN_ELEMENT);</span><br><span class="line">         LookupOverride override = <span class="keyword">new</span> LookupOverride(methodName, beanRef);</span><br><span class="line">         override.setSource(extractSource(ele));</span><br><span class="line">         overrides.addOverride(override);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse replaced-method sub-elements of the given bean element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseReplacedMethodSubElements</span><span class="params">(Element beanEle, MethodOverrides overrides)</span> </span>&#123;</span><br><span class="line">   NodeList nl = beanEle.getChildNodes();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, REPLACED_METHOD_ELEMENT)) &#123;</span><br><span class="line">         Element replacedMethodEle = (Element) node;</span><br><span class="line">         String name = replacedMethodEle.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">         String callback = replacedMethodEle.getAttribute(REPLACER_ATTRIBUTE);</span><br><span class="line">         ReplaceOverride replaceOverride = <span class="keyword">new</span> ReplaceOverride(name, callback);</span><br><span class="line">         <span class="comment">// Look for arg-type match elements.</span></span><br><span class="line">         List\&lt;Element\&gt; argTypeEles = DomUtils.getChildElementsByTagName(replacedMethodEle, ARG_TYPE_ELEMENT);</span><br><span class="line">         <span class="keyword">for</span> (Element argTypeEle : argTypeEles) &#123;</span><br><span class="line">            String match = argTypeEle.getAttribute(ARG_TYPE_MATCH_ATTRIBUTE);</span><br><span class="line">            match = (StringUtils.hasText(match) ? match : DomUtils.getTextValue(argTypeEle));</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(match)) &#123;</span><br><span class="line">               replaceOverride.addTypeIdentifier(match);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         replaceOverride.setSource(extractSource(replacedMethodEle));</span><br><span class="line">         overrides.addOverride(replaceOverride);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse a constructor-arg element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseConstructorArgElement</span><span class="params">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   String indexAttr = ele.getAttribute(INDEX_ATTRIBUTE);</span><br><span class="line">   String typeAttr = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">   String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasLength(indexAttr)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">int</span> index = Integer.parseInt(indexAttr);</span><br><span class="line">         <span class="keyword">if</span> (index \&lt; <span class="number">0</span>) &#123;</span><br><span class="line">            error(<span class="string">"'index' cannot be lower than 0"</span>, ele);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> ConstructorArgumentEntry(index));</span><br><span class="line">               Object value = parsePropertyValue(ele, bd, <span class="keyword">null</span>);</span><br><span class="line">               ConstructorArgumentValues.ValueHolder valueHolder = <span class="keyword">new</span> ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">               <span class="keyword">if</span> (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">                  valueHolder.setType(typeAttr);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">                  valueHolder.setName(nameAttr);</span><br><span class="line">               &#125;</span><br><span class="line">               valueHolder.setSource(extractSource(ele));</span><br><span class="line">               <span class="keyword">if</span> (bd.getConstructorArgumentValues().hasIndexedArgumentValue(index)) &#123;</span><br><span class="line">                  error(<span class="string">"Ambiguous constructor-arg entries for index "</span> + index, ele);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                  bd.getConstructorArgumentValues().addIndexedArgumentValue(index, valueHolder);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (NumberFormatException ex) &#123;</span><br><span class="line">         error(<span class="string">"Attribute 'index' of tag 'constructor-arg' must be an integer"</span>, ele);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> ConstructorArgumentEntry());</span><br><span class="line">         Object value = parsePropertyValue(ele, bd, <span class="keyword">null</span>);</span><br><span class="line">         ConstructorArgumentValues.ValueHolder valueHolder = <span class="keyword">new</span> ConstructorArgumentValues.ValueHolder(value);</span><br><span class="line">         <span class="keyword">if</span> (StringUtils.hasLength(typeAttr)) &#123;</span><br><span class="line">            valueHolder.setType(typeAttr);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">            valueHolder.setName(nameAttr);</span><br><span class="line">         &#125;</span><br><span class="line">         valueHolder.setSource(extractSource(ele));</span><br><span class="line">         bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse a property element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析\&lt;property\&gt;元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parsePropertyElement</span><span class="params">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//获取\&lt;property\&gt;元素的名字</span></span><br><span class="line">   String propertyName = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class="line">      error(<span class="string">"Tag 'property' must have a 'name' attribute"</span>, ele);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> PropertyEntry(propertyName));</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//如果一个Bean中已经有同名的property存在，则不进行解析，直接返回。</span></span><br><span class="line">      <span class="comment">//即如果在同一个Bean中配置同名的property，则只有第一个起作用</span></span><br><span class="line">      <span class="keyword">if</span> (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class="line">         error(<span class="string">"Multiple 'property' definitions for property '"</span> + propertyName + <span class="string">"'"</span>, ele);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//解析获取property的值</span></span><br><span class="line">      Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class="line">      <span class="comment">//根据property的名字和值创建property实例</span></span><br><span class="line">      PropertyValue pv = <span class="keyword">new</span> PropertyValue(propertyName, val);</span><br><span class="line">      <span class="comment">//解析\&lt;property\&gt;元素中的属性</span></span><br><span class="line">      parseMetaElements(ele, pv);</span><br><span class="line">      pv.setSource(extractSource(ele));</span><br><span class="line">      bd.getPropertyValues().addPropertyValue(pv);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse a qualifier element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseQualifierElement</span><span class="params">(Element ele, AbstractBeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   String typeName = ele.getAttribute(TYPE_ATTRIBUTE);</span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasLength(typeName)) &#123;</span><br><span class="line">      error(<span class="string">"Tag 'qualifier' must have a 'type' attribute"</span>, ele);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> QualifierEntry(typeName));</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      AutowireCandidateQualifier qualifier = <span class="keyword">new</span> AutowireCandidateQualifier(typeName);</span><br><span class="line">      qualifier.setSource(extractSource(ele));</span><br><span class="line">      String value = ele.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasLength(value)) &#123;</span><br><span class="line">         qualifier.setAttribute(AutowireCandidateQualifier.VALUE_KEY, value);</span><br><span class="line">      &#125;</span><br><span class="line">      NodeList nl = ele.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; nl.getLength(); i++) &#123;</span><br><span class="line">         Node node = nl.item(i);</span><br><span class="line">         <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, QUALIFIER_ATTRIBUTE_ELEMENT)) &#123;</span><br><span class="line">            Element attributeEle = (Element) node;</span><br><span class="line">            String attributeName = attributeEle.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">            String attributeValue = attributeEle.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(attributeName) &amp;&amp; StringUtils.hasLength(attributeValue)) &#123;</span><br><span class="line">               BeanMetadataAttribute attribute = <span class="keyword">new</span> BeanMetadataAttribute(attributeName, attributeValue);</span><br><span class="line">               attribute.setSource(extractSource(attributeEle));</span><br><span class="line">               qualifier.addMetadataAttribute(attribute);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               error(<span class="string">"Qualifier 'attribute' tag must have a 'name' and 'value'"</span>, attributeEle);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      bd.addQualifier(qualifier);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.parseState.pop();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the value of a property element. May be a list etc.</span></span><br><span class="line"><span class="comment"> * Also used for constructor arguments, "propertyName" being null in this case.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析获取property值</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parsePropertyValue</span><span class="params">(Element ele, BeanDefinition bd, @Nullable String propertyName)</span> </span>&#123;</span><br><span class="line">   String elementName = (propertyName != <span class="keyword">null</span>) ?</span><br><span class="line">               <span class="string">"\&lt;property\&gt; element for property '"</span> + propertyName + <span class="string">"'"</span> :</span><br><span class="line">               <span class="string">"\&lt;constructor-arg\&gt; element"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Should only have one child element: ref, value, list, etc.</span></span><br><span class="line">   <span class="comment">//获取\&lt;property\&gt;的所有子元素，只能是其中一种类型:ref,value,list,etc等</span></span><br><span class="line">   NodeList nl = ele.getChildNodes();</span><br><span class="line">   Element subElement = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; nl.getLength(); i++) &#123;</span><br><span class="line">      Node node = nl.item(i);</span><br><span class="line">      <span class="comment">//子元素不是description和meta属性</span></span><br><span class="line">      <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</span><br><span class="line">            !nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">         <span class="comment">// Child element is what we're looking for.</span></span><br><span class="line">         <span class="keyword">if</span> (subElement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            error(elementName + <span class="string">" must not contain more than one sub-element"</span>, ele);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当前\&lt;property\&gt;元素包含有子元素</span></span><br><span class="line">            subElement = (Element) node;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//判断property的属性值是ref还是value，不允许既是ref又是value</span></span><br><span class="line">   <span class="keyword">boolean</span> hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</span><br><span class="line">   <span class="keyword">boolean</span> hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">   <span class="keyword">if</span> ((hasRefAttribute &amp;&amp; hasValueAttribute) ||</span><br><span class="line">         ((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != <span class="keyword">null</span>)) &#123;</span><br><span class="line">      error(elementName +</span><br><span class="line">            <span class="string">" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element"</span>, ele);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//如果属性是ref，创建一个ref的数据对象RuntimeBeanReference</span></span><br><span class="line">   <span class="comment">//这个对象封装了ref信息</span></span><br><span class="line">   <span class="keyword">if</span> (hasRefAttribute) &#123;</span><br><span class="line">      String refName = ele.getAttribute(REF_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">         error(elementName + <span class="string">" contains empty 'ref' attribute"</span>, ele);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//一个指向运行时所依赖对象的引用</span></span><br><span class="line">      RuntimeBeanReference ref = <span class="keyword">new</span> RuntimeBeanReference(refName);</span><br><span class="line">      <span class="comment">//设置这个ref的数据对象是被当前的property对象所引用</span></span><br><span class="line">      ref.setSource(extractSource(ele));</span><br><span class="line">      <span class="keyword">return</span> ref;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果属性是value，创建一个value的数据对象TypedStringValue</span></span><br><span class="line">   <span class="comment">//这个对象封装了value信息</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (hasValueAttribute) &#123;</span><br><span class="line">      <span class="comment">//一个持有String类型值的对象</span></span><br><span class="line">      TypedStringValue valueHolder = <span class="keyword">new</span> TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</span><br><span class="line">      <span class="comment">//设置这个value数据对象是被当前的property对象所引用</span></span><br><span class="line">      valueHolder.setSource(extractSource(ele));</span><br><span class="line">      <span class="keyword">return</span> valueHolder;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果当前\&lt;property\&gt;元素还有子元素</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (subElement != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//解析\&lt;property\&gt;的子元素</span></span><br><span class="line">      <span class="keyword">return</span> parsePropertySubElement(subElement, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Neither child element nor "ref" or "value" attribute found.</span></span><br><span class="line">      <span class="comment">//propery属性中既不是ref，也不是value属性，解析出错返回null</span></span><br><span class="line">      error(elementName + <span class="string">" must specify a ref or value"</span>, ele);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parsePropertySubElement</span><span class="params">(Element ele, @Nullable BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> parsePropertySubElement(ele, bd, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse a value, ref or collection sub-element of a property or</span></span><br><span class="line"><span class="comment"> * constructor-arg element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ele subelement of property element; we don't know which yet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> defaultValueType the default type (class name) for any</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> \&lt;value\&gt;&#125; tag that might be created</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析\&lt;property\&gt;元素中ref,value或者集合等子元素</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parsePropertySubElement</span><span class="params">(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//如果\&lt;property\&gt;没有使用Spring默认的命名空间，则使用用户自定义的规则解析内嵌元素</span></span><br><span class="line">   <span class="keyword">if</span> (!isDefaultNamespace(ele)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseNestedCustomElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是bean，则使用解析\&lt;Bean\&gt;元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd);</span><br><span class="line">      <span class="keyword">if</span> (nestedBd != <span class="keyword">null</span>) &#123;</span><br><span class="line">         nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> nestedBd;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是ref，ref中只能有以下3个属性：bean、local、parent</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, REF_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// A generic reference to any name of any bean.</span></span><br><span class="line">      <span class="comment">//可以不再同一个Spring配置文件中，具体请参考Spring对ref的配置规则</span></span><br><span class="line">      String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">boolean</span> toParent = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line">         <span class="comment">// A reference to the id of another bean in a parent context.</span></span><br><span class="line">         <span class="comment">//获取\&lt;property\&gt;元素中parent属性值，引用父级容器中的Bean</span></span><br><span class="line">         refName = ele.getAttribute(PARENT_REF_ATTRIBUTE);</span><br><span class="line">         toParent = <span class="keyword">true</span>;</span><br><span class="line">         <span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line">            error(<span class="string">"'bean' or 'parent' is required for \&lt;ref\&gt; element"</span>, ele);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">         error(<span class="string">"\&lt;ref\&gt; element contains empty target attribute"</span>, ele);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建ref类型数据，指向被引用的对象</span></span><br><span class="line">      RuntimeBeanReference ref = <span class="keyword">new</span> RuntimeBeanReference(refName, toParent);</span><br><span class="line">      <span class="comment">//设置引用类型值是被当前子元素所引用</span></span><br><span class="line">      ref.setSource(extractSource(ele));</span><br><span class="line">      <span class="keyword">return</span> ref;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;idref\&gt;，使用解析ref元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, IDREF_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseIdRefElement(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;value\&gt;，使用解析value元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, VALUE_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseValueElement(ele, defaultValueType);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是null，为\&lt;property\&gt;设置一个封装null值的字符串数据</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, NULL_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// It's a distinguished null value. Let's wrap it in a TypedStringValue</span></span><br><span class="line">      <span class="comment">// object in order to preserve the source location.</span></span><br><span class="line">      TypedStringValue nullHolder = <span class="keyword">new</span> TypedStringValue(<span class="keyword">null</span>);</span><br><span class="line">      nullHolder.setSource(extractSource(ele));</span><br><span class="line">      <span class="keyword">return</span> nullHolder;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;array\&gt;，使用解析array集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, ARRAY_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseArrayElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;list\&gt;，使用解析list集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, LIST_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseListElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;set\&gt;，使用解析set集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, SET_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseSetElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;map\&gt;，使用解析map集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, MAP_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseMapElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;props\&gt;，使用解析props集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, PROPS_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parsePropsElement(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//既不是ref，又不是value，也不是集合，则子元素配置错误，返回null</span></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      error(<span class="string">"Unknown property sub-element: ["</span> + ele.getNodeName() + <span class="string">"]"</span>, ele);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过对上述源码的分析，我们可以了解在 Spring 配置文件中，&lt;Bean&gt;元素中&lt;property&gt;元素的相关 配置是如何处理的:</p>
<ol>
<li><p>ref 被封装为指向依赖对象一个引用。</p>
</li>
<li><p>value 配置都会封装成一个字符串类型的对象。</p>
</li>
<li><p>ref 和 value 都通过“解析的数据类型属性值.setSource(extractSource(ele));”方法将属性值/引用 与所引用的属性关联起来。</p>
</li>
</ol>
<p>在方法的最后对于&lt;property&gt;元素的子元素通过 parsePropertySubElement ()方法解析，我们继续分 析该方法的源码，了解其解析过程。</p>
<h3 id="14、载入-lt-property-gt-的子元素"><a href="#14、载入-lt-property-gt-的子元素" class="headerlink" title="14、载入&lt;property&gt;的子元素"></a><strong>14、载入&lt;property&gt;的子元素</strong></h3><p>在 BeanDefinitionParserDelegate 类中的 parsePropertySubElement()方法对&lt;property&gt;中的子元 素解析，源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse a value, ref or collection sub-element of a property or</span></span><br><span class="line"><span class="comment"> * constructor-arg element.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ele subelement of property element; we don't know which yet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> defaultValueType the default type (class name) for any</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> \&lt;value\&gt;&#125; tag that might be created</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析\&lt;property\&gt;元素中ref,value或者集合等子元素</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">parsePropertySubElement</span><span class="params">(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//如果\&lt;property\&gt;没有使用Spring默认的命名空间，则使用用户自定义的规则解析内嵌元素</span></span><br><span class="line">   <span class="keyword">if</span> (!isDefaultNamespace(ele)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseNestedCustomElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是bean，则使用解析\&lt;Bean\&gt;元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd);</span><br><span class="line">      <span class="keyword">if</span> (nestedBd != <span class="keyword">null</span>) &#123;</span><br><span class="line">         nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> nestedBd;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是ref，ref中只能有以下3个属性：bean、local、parent</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, REF_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// A generic reference to any name of any bean.</span></span><br><span class="line">      <span class="comment">//可以不再同一个Spring配置文件中，具体请参考Spring对ref的配置规则</span></span><br><span class="line">      String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">boolean</span> toParent = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line">         <span class="comment">// A reference to the id of another bean in a parent context.</span></span><br><span class="line">         <span class="comment">//获取\&lt;property\&gt;元素中parent属性值，引用父级容器中的Bean</span></span><br><span class="line">         refName = ele.getAttribute(PARENT_REF_ATTRIBUTE);</span><br><span class="line">         toParent = <span class="keyword">true</span>;</span><br><span class="line">         <span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line">            error(<span class="string">"'bean' or 'parent' is required for \&lt;ref\&gt; element"</span>, ele);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">         error(<span class="string">"\&lt;ref\&gt; element contains empty target attribute"</span>, ele);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建ref类型数据，指向被引用的对象</span></span><br><span class="line">      RuntimeBeanReference ref = <span class="keyword">new</span> RuntimeBeanReference(refName, toParent);</span><br><span class="line">      <span class="comment">//设置引用类型值是被当前子元素所引用</span></span><br><span class="line">      ref.setSource(extractSource(ele));</span><br><span class="line">      <span class="keyword">return</span> ref;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;idref\&gt;，使用解析ref元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, IDREF_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseIdRefElement(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;value\&gt;，使用解析value元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, VALUE_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseValueElement(ele, defaultValueType);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是null，为\&lt;property\&gt;设置一个封装null值的字符串数据</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, NULL_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">// It's a distinguished null value. Let's wrap it in a TypedStringValue</span></span><br><span class="line">      <span class="comment">// object in order to preserve the source location.</span></span><br><span class="line">      TypedStringValue nullHolder = <span class="keyword">new</span> TypedStringValue(<span class="keyword">null</span>);</span><br><span class="line">      nullHolder.setSource(extractSource(ele));</span><br><span class="line">      <span class="keyword">return</span> nullHolder;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;array\&gt;，使用解析array集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, ARRAY_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseArrayElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;list\&gt;，使用解析list集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, LIST_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseListElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;set\&gt;，使用解析set集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, SET_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseSetElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;map\&gt;，使用解析map集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, MAP_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parseMapElement(ele, bd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果子元素是\&lt;props\&gt;，使用解析props集合子元素的方法解析</span></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, PROPS_ELEMENT)) &#123;</span><br><span class="line">      <span class="keyword">return</span> parsePropsElement(ele);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//既不是ref，又不是value，也不是集合，则子元素配置错误，返回null</span></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      error(<span class="string">"Unknown property sub-element: ["</span> + ele.getNodeName() + <span class="string">"]"</span>, ele);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上述源码分析，我们明白了在 Spring 配置文件中，对&lt;property&gt;元素中配置的 array、list、set、 map、prop 等各种集合子元素的都通过上述方法解析，生成对应的数据对象，比如 ManagedList、 ManagedArray、ManagedSet 等，这些 Managed 类是 Spring 对象 BeanDefiniton 的数据封装，对 集合数据类型的具体解析有各自的解析方法实现，解析方法的命名非常规范，一目了然，我们对&lt;list&gt; 集合元素的解析方法进行源码分析，了解其实现过程。</p>
<h3 id="15、载入-lt-list-gt-的子元素"><a href="#15、载入-lt-list-gt-的子元素" class="headerlink" title="15、载入&lt;list&gt;的子元素"></a><strong>15、载入&lt;list&gt;的子元素</strong></h3><p>在 BeanDefinitionParserDelegate 类中的 parseListElement()方法就是具体实现解析&lt;property&gt;元 素中的&lt;list&gt;集合子元素，源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse a list element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//解析\&lt;list\&gt;集合子元素</span></span><br><span class="line"><span class="keyword">public</span> List\&lt;Object\&gt; parseListElement(Element collectionEle, <span class="meta">@Nullable</span> BeanDefinition bd) &#123;</span><br><span class="line">   <span class="comment">//获取\&lt;list\&gt;元素中的value-type属性，即获取集合元素的数据类型</span></span><br><span class="line">   String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE);</span><br><span class="line">   <span class="comment">//获取\&lt;list\&gt;集合元素中的所有子节点</span></span><br><span class="line">   NodeList nl = collectionEle.getChildNodes();</span><br><span class="line">   <span class="comment">//Spring中将List封装为ManagedList</span></span><br><span class="line">   ManagedList\&lt;Object\&gt; target = <span class="keyword">new</span> ManagedList\&lt;\&gt;(nl.getLength());</span><br><span class="line">   target.setSource(extractSource(collectionEle));</span><br><span class="line">   <span class="comment">//设置集合目标数据类型</span></span><br><span class="line">   target.setElementTypeName(defaultElementType);</span><br><span class="line">   target.setMergeEnabled(parseMergeAttribute(collectionEle));</span><br><span class="line">   <span class="comment">//具体的\&lt;list\&gt;元素解析</span></span><br><span class="line">   parseCollectionElements(nl, target, bd, defaultElementType);</span><br><span class="line">   <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parse a set element.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Set\&lt;Object\&gt; parseSetElement(Element collectionEle, <span class="meta">@Nullable</span> BeanDefinition bd) &#123;</span><br><span class="line">   String defaultElementType = collectionEle.getAttribute(VALUE_TYPE_ATTRIBUTE);</span><br><span class="line">   NodeList nl = collectionEle.getChildNodes();</span><br><span class="line">   ManagedSet\&lt;Object\&gt; target = <span class="keyword">new</span> ManagedSet\&lt;\&gt;(nl.getLength());</span><br><span class="line">   target.setSource(extractSource(collectionEle));</span><br><span class="line">   target.setElementTypeName(defaultElementType);</span><br><span class="line">   target.setMergeEnabled(parseMergeAttribute(collectionEle));</span><br><span class="line">   parseCollectionElements(nl, target, bd, defaultElementType);</span><br><span class="line">   <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体解析\&lt;list\&gt;集合元素，\&lt;array\&gt;、\&lt;list\&gt;和\&lt;set\&gt;都使用该方法解析</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseCollectionElements</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      NodeList elementNodes, Collection\&lt;Object\&gt; target, @Nullable BeanDefinition bd, String defaultElementType)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//遍历集合所有节点</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i \&lt; elementNodes.getLength(); i++) &#123;</span><br><span class="line">      Node node = elementNodes.item(i);</span><br><span class="line">      <span class="comment">//节点不是description节点</span></span><br><span class="line">      <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT)) &#123;</span><br><span class="line">         <span class="comment">//将解析的元素加入集合中，递归调用下一个子元素</span></span><br><span class="line">         target.add(parsePropertySubElement((Element) node, bd, defaultElementType));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过对 Spring Bean 配置信息转换的 Document 对象中的元素层层解析，Spring IOC 现在已经将 XML 形式定义的 Bean 配置信息转换为 Spring IOC 所识别的数据结构——BeanDefinition，它是 Bean 配 置信息中配置的 POJO 对象在 Spring IOC 容器中的映射，我们可以通过 AbstractBeanDefinition 为 入口，看到了 IOC 容器进行索引、查询和操作。</p>
<p>通过 Spring IOC 容器对 Bean 配置资源的解析后，IOC 容器大致完成了管理 Bean 对象的准备工作， 即初始化过程，但是最为重要的依赖注入还没有发生，现在在 IOC 容器中 BeanDefinition 存储的只是 一些静态信息，接下来需要向容器注册 Bean 定义信息才能全部完成 IOC 容器的初始化过程。</p>
<h3 id="16、分配注册策略"><a href="#16、分配注册策略" class="headerlink" title="16、分配注册策略"></a><strong>16、分配注册策略</strong></h3><p>让我们继续跟踪程序的执行顺序，接下来我们来分析 DefaultBeanDefinitionDocumentReader对Bean 定义转换的 Document 对象解析的流程中，在其 parseDefaultElement()方法中完成对Document 对象的解析后得到封装 BeanDefinition 的 BeanDefinitionHold 对象，然后调用BeanDefinitionReaderUtils 的 registerBeanDefinition() 方 法 向 IOC 容 器 注 册 解 析 的 Bean ， BeanDefinitionReaderUtils 的注册的源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the given bean definition with the given bean factory.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> definitionHolder the bean definition including name and aliases</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry the bean factory to register with</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeanDefinitionStoreException if registration failed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//将解析的BeanDefinitionHold注册到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register bean definition under primary name.</span></span><br><span class="line">   <span class="comment">//获取解析的BeanDefinition的名称</span></span><br><span class="line">   String beanName = definitionHolder.getBeanName();</span><br><span class="line">   <span class="comment">//向IOC容器注册BeanDefinition</span></span><br><span class="line">   registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register aliases for bean name, if any.</span></span><br><span class="line">   <span class="comment">//如果解析的BeanDefinition有别名，向容器为其注册别名</span></span><br><span class="line">   String[] aliases = definitionHolder.getAliases();</span><br><span class="line">   <span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">         registry.registerAlias(beanName, alias);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当调用 BeanDefinitionReaderUtils 向 IOC 容器注册解析的 BeanDefinition 时，真正完成注册功能的是 DefaultListableBeanFactory。</p>
<h3 id="17、向容器注册"><a href="#17、向容器注册" class="headerlink" title="17、向容器注册"></a><strong>17、向容器注册</strong></h3><p>DefaultListableBeanFactory 中使用一个 HashMap 的集合对象存放 IOC 容器中注册解析的 BeanDefinition，向 IOC 容器注册的主要源码如下:</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg07en9a4tj30f80pe45b.jpg" alt="image-20200621205411485"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Map of bean definition objects, keyed by bean name */</span></span><br><span class="line"><span class="comment">//存储注册信息的BeanDefinition</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map\&lt;String, BeanDefinition\&gt; beanDefinitionMap = <span class="keyword">new</span> ConcurrentHashMap\&lt;\&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//向IOC容器注册解析的BeanDefiniton</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">		Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</span><br><span class="line">		Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//校验解析的BeanDefiniton</span></span><br><span class="line">		<span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">						<span class="string">"Validation of bean definition failed"</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		BeanDefinition oldBeanDefinition;</span><br><span class="line"></span><br><span class="line">		oldBeanDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (oldBeanDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">						<span class="string">"Cannot register bean definition ["</span> + beanDefinition + <span class="string">"] for bean '"</span> + beanName +</span><br><span class="line">						<span class="string">"': There is already ["</span> + oldBeanDefinition + <span class="string">"] bound."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (oldBeanDefinition.getRole() \&lt; beanDefinition.getRole()) &#123;</span><br><span class="line">				<span class="comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">					<span class="keyword">this</span>.logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + beanName +</span><br><span class="line">							<span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">							oldBeanDefinition + <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(oldBeanDefinition)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">					<span class="keyword">this</span>.logger.info(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">							<span class="string">"' with a different definition: replacing ["</span> + oldBeanDefinition +</span><br><span class="line">							<span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">					<span class="keyword">this</span>.logger.debug(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">							<span class="string">"' with an equivalent definition: replacing ["</span> + oldBeanDefinition +</span><br><span class="line">							<span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">				<span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">				<span class="comment">//注册的过程中需要线程同步，以保证数据的一致性</span></span><br><span class="line">				<span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">					<span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">					List\&lt;String\&gt; updatedDefinitions = <span class="keyword">new</span> ArrayList\&lt;\&gt;(<span class="keyword">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">					updatedDefinitions.addAll(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line">					updatedDefinitions.add(beanName);</span><br><span class="line">					<span class="keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">					<span class="keyword">if</span> (<span class="keyword">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">						Set\&lt;String\&gt; updatedSingletons = <span class="keyword">new</span> LinkedHashSet\&lt;\&gt;(<span class="keyword">this</span>.manualSingletonNames);</span><br><span class="line">						updatedSingletons.remove(beanName);</span><br><span class="line">						<span class="keyword">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Still in startup registration phase</span></span><br><span class="line">				<span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">				<span class="keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">				<span class="keyword">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//检查是否有同名的BeanDefinition已经在IOC容器中注册</span></span><br><span class="line">		<span class="keyword">if</span> (oldBeanDefinition != <span class="keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">			<span class="comment">//重置所有已经注册过的BeanDefinition的缓存</span></span><br><span class="line">			resetBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>至此，Bean 配置信息中配置的 Bean 被解析过后，已经注册到 IOC 容器中，被容器管理起来，真正完 成了 IOC 容器初始化所做的全部工作。现在 IOC 容器中已经建立了整个 Bean 的配置信息，这些 BeanDefinition 信息已经可以使用，并且可以被检索，IOC 容器的作用就是对这些注册的 Bean 定义信 息进行处理和维护。这些的注册的 Bean 定义信息是 IOC 容器控制反转的基础，正是有了这些注册的数 据，容器才可以进行依赖注入。</p>
<h2 id="基于-Annotation-的-IOC-初始化"><a href="#基于-Annotation-的-IOC-初始化" class="headerlink" title="基于 Annotation 的 IOC 初始化"></a>基于 Annotation 的 IOC 初始化</h2><h3 id="Annotation-的前世今生"><a href="#Annotation-的前世今生" class="headerlink" title="Annotation 的前世今生"></a><strong>Annotation 的前世今生</strong></h3><p>从 Spring2.0 以后的版本中，Spring 也引入了基于注解(Annotation)方式的配置，注解(Annotation) 是 JDK1.5 中引入的一个新特性，用于简化 Bean 的配置，可以取代 XML 配置文件。开发人员对注解 (Annotation)的态度也是萝卜青菜各有所爱，个人认为注解可以大大简化配置，提高开发速度，但也给 后期维护增加了难度。目前来说 XML 方式发展的相对成熟，方便于统一管理。随着 Spring Boot 的兴起，基于注解的开发甚至实现了零配置。但作为个人的习惯而言，还是倾向于 XML 配置文件和注解 (Annotation)相互配合使用。Spring IOC 容器对于类级别的注解和类内部的注解分以下两种处理策略: </p>
<ol>
<li><p>类级别的注解:如@Component、@Repository、@Controller、@Service 以及 JavaEE6 的 @ManagedBean 和@Named 注解，都是添加在类上面的类级别注解，Spring 容器根据注解的过滤规 则扫描读取注解 Bean 定义类，并将其注册到 Spring IOC 容器中。</p>
</li>
<li><p>类内部的注解:如@Autowire、@Value、@Resource 以及 EJB 和 WebService 相关的注解等， 都是添加在类内部的字段或者方法上的类内部注解，SpringIOC 容器通过 Bean 后置注解处理器解析 Bean 内部的注解。下面将根据这两种处理策略，分别分析 Spring 处理注解相关的源码。</p>
</li>
</ol>
<h3 id="定位-Bean-扫描路径"><a href="#定位-Bean-扫描路径" class="headerlink" title="定位 Bean 扫描路径"></a><strong>定位 Bean 扫描路径</strong></h3><p>在 Spring 中 管 理 注 解 Bean 定 义 的 容 器 有 两 个 : AnnotationConfigApplicationContext 和 AnnotationConfigWebApplicationContex。这两个类是专门处理 Spring 注解方式配置的容器，直接 依赖于注解作为容器配置信息来源的 IOC 容器。AnnotationConfigWebApplicationContext 是 AnnotationConfigApplicationContext 的 Web 版本，两者的用法以及对注解的处理方式几乎没有差 别。现在我们以 AnnotationConfigApplicationContext 为例看看它的源码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationConfigApplicationContext</span> <span class="keyword">extends</span> <span class="title">GenericApplicationContext</span> <span class="keyword">implements</span> <span class="title">AnnotationConfigRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//保存一个读取注解的Bean定义读取器，并将其设置到容器中</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> AnnotatedBeanDefinitionReader reader;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//保存一个扫描指定类路径中注解Bean定义的扫描器，并将其设置到容器中</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ClassPathBeanDefinitionScanner scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new AnnotationConfigApplicationContext that needs to be populated</span></span><br><span class="line"><span class="comment">    * through &#123;<span class="doctag">@link</span> #register&#125; calls and then manually &#123;<span class="doctag">@linkplain</span> #refresh refreshed&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//默认构造函数，初始化一个空容器，容器不包含任何 Bean 信息，需要在稍后通过调用其register()</span></span><br><span class="line">   <span class="comment">//方法注册配置类，并调用refresh()方法刷新容器，触发容器对注解Bean的载入、解析和注册过程</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.reader = <span class="keyword">new</span> AnnotatedBeanDefinitionReader(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new AnnotationConfigApplicationContext with the given DefaultListableBeanFactory.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanFactory the DefaultListableBeanFactory instance to use for this context</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(beanFactory);</span><br><span class="line">      <span class="keyword">this</span>.reader = <span class="keyword">new</span> AnnotatedBeanDefinitionReader(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new AnnotationConfigApplicationContext, deriving bean definitions</span></span><br><span class="line"><span class="comment">    * from the given annotated classes and automatically refreshing the context.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> annotatedClasses one or more annotated classes,</span></span><br><span class="line"><span class="comment">    * e.g. &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; classes</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//最常用的构造函数，通过将涉及到的配置类传递给该构造函数，以实现将相应配置类中的Bean自动注册到容器中</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(Class\&lt;?\&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>();</span><br><span class="line">      register(annotatedClasses);</span><br><span class="line">      refresh();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new AnnotationConfigApplicationContext, scanning for bean definitions</span></span><br><span class="line"><span class="comment">    * in the given packages and automatically refreshing the context.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> basePackages the packages to check for annotated classes</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//该构造函数会自动扫描以给定的包及其子包下的所有类，并自动识别所有的Spring Bean，将其注册到容器中</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>();</span><br><span class="line">      scan(basePackages);</span><br><span class="line">      refresh();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Delegates given environment to underlying &#123;<span class="doctag">@link</span> AnnotatedBeanDefinitionReader&#125;</span></span><br><span class="line"><span class="comment">    * and &#123;<span class="doctag">@link</span> ClassPathBeanDefinitionScanner&#125; members.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.setEnvironment(environment);</span><br><span class="line">      <span class="keyword">this</span>.reader.setEnvironment(environment);</span><br><span class="line">      <span class="keyword">this</span>.scanner.setEnvironment(environment);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Provide a custom &#123;<span class="doctag">@link</span> BeanNameGenerator&#125; for use with &#123;<span class="doctag">@link</span> AnnotatedBeanDefinitionReader&#125;</span></span><br><span class="line"><span class="comment">    * and/or &#123;<span class="doctag">@link</span> ClassPathBeanDefinitionScanner&#125;, if any.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Default is &#123;<span class="doctag">@link</span> org.springframework.context.annotation.AnnotationBeanNameGenerator&#125;.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Any call to this method must occur prior to calls to &#123;<span class="doctag">@link</span> #register(Class...)&#125;</span></span><br><span class="line"><span class="comment">    * and/or &#123;<span class="doctag">@link</span> #scan(String...)&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> AnnotatedBeanDefinitionReader#setBeanNameGenerator</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> ClassPathBeanDefinitionScanner#setBeanNameGenerator</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//为容器的注解Bean读取器和注解Bean扫描器设置Bean名称产生器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanNameGenerator</span><span class="params">(BeanNameGenerator beanNameGenerator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">      <span class="keyword">this</span>.scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">      getBeanFactory().registerSingleton(</span><br><span class="line">            AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the &#123;<span class="doctag">@link</span> ScopeMetadataResolver&#125; to use for detected bean classes.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The default is an &#123;<span class="doctag">@link</span> AnnotationScopeMetadataResolver&#125;.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Any call to this method must occur prior to calls to &#123;<span class="doctag">@link</span> #register(Class...)&#125;</span></span><br><span class="line"><span class="comment">    * and/or &#123;<span class="doctag">@link</span> #scan(String...)&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//为容器的注解Bean读取器和注解Bean扫描器设置作用范围元信息解析器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScopeMetadataResolver</span><span class="params">(ScopeMetadataResolver scopeMetadataResolver)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">      <span class="keyword">this</span>.scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">// Implementation of AnnotationConfigRegistry</span></span><br><span class="line">   <span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Register one or more annotated classes to be processed.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Note that &#123;<span class="doctag">@link</span> #refresh()&#125; must be called in order for the context</span></span><br><span class="line"><span class="comment">    * to fully process the new classes.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> annotatedClasses one or more annotated classes,</span></span><br><span class="line"><span class="comment">    * e.g. &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; classes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #scan(String...)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #refresh()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//为容器注册一个要被处理的注解Bean，新注册的Bean，必须手动调用容器的</span></span><br><span class="line">   <span class="comment">//refresh()方法刷新容器，触发容器对新注册的Bean的处理</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Class\&lt;?\&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line">      Assert.notEmpty(annotatedClasses, <span class="string">"At least one annotated class must be specified"</span>);</span><br><span class="line">      <span class="keyword">this</span>.reader.register(annotatedClasses);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Perform a scan within the specified base packages.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Note that &#123;<span class="doctag">@link</span> #refresh()&#125; must be called in order for the context</span></span><br><span class="line"><span class="comment">    * to fully process the new classes.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> basePackages the packages to check for annotated classes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #register(Class...)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #refresh()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//扫描指定包路径及其子包下的注解类，为了使新添加的类被处理，必须手动调用</span></span><br><span class="line">   <span class="comment">//refresh()方法刷新容器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">      Assert.notEmpty(basePackages, <span class="string">"At least one base package must be specified"</span>);</span><br><span class="line">      <span class="keyword">this</span>.scanner.scan(basePackages);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line">   <span class="comment">// Convenient methods for registering individual beans</span></span><br><span class="line">   <span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment">    * class-declared annotations, and optionally providing explicit constructor</span></span><br><span class="line"><span class="comment">    * arguments for consideration in the autowiring process.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The bean name will be generated according to annotated component rules.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> annotatedClass the class of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> constructorArguments argument values to be fed into Spring's</span></span><br><span class="line"><span class="comment">    * constructor resolution algorithm, resolving either all arguments or just</span></span><br><span class="line"><span class="comment">    * specific ones, with the rest to be resolved through regular autowiring</span></span><br><span class="line"><span class="comment">    * (may be &#123;<span class="doctag">@code</span> null&#125; or empty)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> \&lt;T\&gt; <span class="function"><span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(Class\&lt;T\&gt; annotatedClass, Object... constructorArguments)</span> </span>&#123;</span><br><span class="line">      registerBean(<span class="keyword">null</span>, annotatedClass, constructorArguments);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment">    * class-declared annotations, and optionally providing explicit constructor</span></span><br><span class="line"><span class="comment">    * arguments for consideration in the autowiring process.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanName the name of the bean (may be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> annotatedClass the class of the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> constructorArguments argument values to be fed into Spring's</span></span><br><span class="line"><span class="comment">    * constructor resolution algorithm, resolving either all arguments or just</span></span><br><span class="line"><span class="comment">    * specific ones, with the rest to be resolved through regular autowiring</span></span><br><span class="line"><span class="comment">    * (may be &#123;<span class="doctag">@code</span> null&#125; or empty)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> \&lt;T\&gt; <span class="function"><span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(@Nullable String beanName, Class\&lt;T\&gt; annotatedClass, Object... constructorArguments)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.reader.doRegisterBean(annotatedClass, <span class="keyword">null</span>, beanName, <span class="keyword">null</span>,</span><br><span class="line">            bd -\&gt; &#123;</span><br><span class="line">               <span class="keyword">for</span> (Object arg : constructorArguments) &#123;</span><br><span class="line">                  bd.getConstructorArgumentValues().addGenericArgumentValue(arg);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> \&lt;T\&gt; <span class="function"><span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(@Nullable String beanName, Class\&lt;T\&gt; beanClass, @Nullable Supplier\&lt;T\&gt; supplier,</span></span></span><br><span class="line"><span class="function"><span class="params">         BeanDefinitionCustomizer... customizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.reader.doRegisterBean(beanClass, supplier, beanName, <span class="keyword">null</span>, customizers);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的源码分析，我们可以看啊到 Spring 对注解的处理分为两种方式:</p>
<ol>
<li><p>直接将注解 Bean 注册到容器中 可以在初始化容器时注册;也可以在容器创建之后手动调用注册方法向容器注册，然后通过手动刷新容 器，使得容器对注册的注解 Bean 进行处理。</p>
</li>
<li><p>通过扫描指定的包及其子包下的所有类 在初始化注解容器时指定要自动扫描的路径，如果容器创建以后向给定路径动态添加了注解 Bean，则 需要手动调用容器扫描的方法，然后手动刷新容器，使得容器对所注册的 Bean 进行处理。 接下来，将会对两种处理方式详细分析其实现过程。</p>
</li>
</ol>
<h3 id="读取-Annotation-元数据"><a href="#读取-Annotation-元数据" class="headerlink" title="读取 Annotation 元数据"></a><strong>读取 Annotation 元数据</strong></h3><p>当创建注解处理容器时，如果传入的初始参数是具体的注解 Bean 定义类时，注解容器读取并注册。</p>
<p><strong>1)、AnnotationConfigApplicationContext 通过调用注解 Bean 定义读取器</strong></p>
<p>AnnotatedBeanDefinitionReader 的 register()方法向容器注册指定的注解 Bean，注解 Bean 定义读 取器向容器注册注解 Bean 的源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register one or more annotated classes to be processed.</span></span><br><span class="line"><span class="comment"> * \&lt;p\&gt;Calls to &#123;<span class="doctag">@code</span> register&#125; are idempotent; adding the same</span></span><br><span class="line"><span class="comment"> * annotated class more than once has no additional effect.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotatedClasses one or more annotated classes,</span></span><br><span class="line"><span class="comment"> * e.g. &#123;<span class="doctag">@link</span> Configuration <span class="doctag">@Configuration</span>&#125; classes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//注册多个注解Bean定义类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Class\&lt;?\&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (Class\&lt;?\&gt; annotatedClass : annotatedClasses) &#123;</span><br><span class="line">      registerBean(annotatedClass);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment"> * class-declared annotations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotatedClass the class of the bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//注册一个注解Bean定义类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(Class\&lt;?\&gt; annotatedClass)</span> </span>&#123;</span><br><span class="line">   doRegisterBean(annotatedClass, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment"> * class-declared annotations, using the given supplier for obtaining a new</span></span><br><span class="line"><span class="comment"> * instance (possibly declared as a lambda expression or method reference).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotatedClass the class of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> instanceSupplier a callback for creating an instance of the bean</span></span><br><span class="line"><span class="comment"> * (may be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> \&lt;T\&gt; <span class="function"><span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(Class\&lt;T\&gt; annotatedClass, @Nullable Supplier\&lt;T\&gt; instanceSupplier)</span> </span>&#123;</span><br><span class="line">   doRegisterBean(annotatedClass, instanceSupplier, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment"> * class-declared annotations, using the given supplier for obtaining a new</span></span><br><span class="line"><span class="comment"> * instance (possibly declared as a lambda expression or method reference).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotatedClass the class of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name an explicit name for the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> instanceSupplier a callback for creating an instance of the bean</span></span><br><span class="line"><span class="comment"> * (may be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> \&lt;T\&gt; <span class="function"><span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(Class\&lt;T\&gt; annotatedClass, String name, @Nullable Supplier\&lt;T\&gt; instanceSupplier)</span> </span>&#123;</span><br><span class="line">   doRegisterBean(annotatedClass, instanceSupplier, name, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment"> * class-declared annotations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotatedClass the class of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> qualifiers specific qualifier annotations to consider,</span></span><br><span class="line"><span class="comment"> * in addition to qualifiers at the bean class level</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Bean定义读取器注册注解Bean定义的入口方法</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(Class\&lt;?\&gt; annotatedClass, Class\&lt;? extends Annotation\&gt;... qualifiers)</span> </span>&#123;</span><br><span class="line">   doRegisterBean(annotatedClass, <span class="keyword">null</span>, <span class="keyword">null</span>, qualifiers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment"> * class-declared annotations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotatedClass the class of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name an explicit name for the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> qualifiers specific qualifier annotations to consider,</span></span><br><span class="line"><span class="comment"> * in addition to qualifiers at the bean class level</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Bean定义读取器向容器注册注解Bean定义类</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBean</span><span class="params">(Class\&lt;?\&gt; annotatedClass, String name, Class\&lt;? extends Annotation\&gt;... qualifiers)</span> </span>&#123;</span><br><span class="line">   doRegisterBean(annotatedClass, <span class="keyword">null</span>, name, qualifiers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a bean from the given bean class, deriving its metadata from</span></span><br><span class="line"><span class="comment"> * class-declared annotations.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> annotatedClass the class of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> instanceSupplier a callback for creating an instance of the bean</span></span><br><span class="line"><span class="comment"> * (may be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name an explicit name for the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> qualifiers specific qualifier annotations to consider, if any,</span></span><br><span class="line"><span class="comment"> * in addition to qualifiers at the bean class level</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> definitionCustomizers one or more callbacks for customizing the</span></span><br><span class="line"><span class="comment"> * factory's &#123;<span class="doctag">@link</span> BeanDefinition&#125;, e.g. setting a lazy-init or primary flag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Bean定义读取器向容器注册注解Bean定义类</span></span><br><span class="line">\&lt;T\&gt; <span class="function"><span class="keyword">void</span> <span class="title">doRegisterBean</span><span class="params">(Class\&lt;T\&gt; annotatedClass, @Nullable Supplier\&lt;T\&gt; instanceSupplier, @Nullable String name,</span></span></span><br><span class="line"><span class="function"><span class="params">      @Nullable Class\&lt;? extends Annotation\&gt;[] qualifiers, BeanDefinitionCustomizer... definitionCustomizers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据指定的注解Bean定义类，创建Spring容器中对注解Bean的封装的数据结构</span></span><br><span class="line">   AnnotatedGenericBeanDefinition abd = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(annotatedClass);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   abd.setInstanceSupplier(instanceSupplier);</span><br><span class="line">   <span class="comment">//解析注解Bean定义的作用域，若@Scope("prototype")，则Bean为原型类型；</span></span><br><span class="line">   <span class="comment">//若@Scope("singleton")，则Bean为单态类型</span></span><br><span class="line">   ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">   <span class="comment">//为注解Bean定义设置作用域</span></span><br><span class="line">   abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">   <span class="comment">//为注解Bean定义生成Bean名称</span></span><br><span class="line">   String beanName = (name != <span class="keyword">null</span> ? name : <span class="keyword">this</span>.beanNameGenerator.generateBeanName(abd, <span class="keyword">this</span>.registry));</span><br><span class="line"></span><br><span class="line">   <span class="comment">//处理注解Bean定义中的通用注解</span></span><br><span class="line">   AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">   <span class="comment">//如果在向容器注册注解Bean定义时，使用了额外的限定符注解，则解析限定符注解。</span></span><br><span class="line">   <span class="comment">//主要是配置的关于autowiring自动依赖注入装配的限定条件，即@Qualifier注解</span></span><br><span class="line">   <span class="comment">//Spring自动依赖注入装配默认是按类型装配，如果使用@Qualifier则按名称</span></span><br><span class="line">   <span class="keyword">if</span> (qualifiers != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (Class\&lt;? extends Annotation\&gt; qualifier : qualifiers) &#123;</span><br><span class="line">         <span class="comment">//如果配置了@Primary注解，设置该Bean为autowiring自动依赖注入装//配时的首选</span></span><br><span class="line">         <span class="keyword">if</span> (Primary<span class="class">.<span class="keyword">class</span> </span>== qualifier) &#123;</span><br><span class="line">            abd.setPrimary(<span class="keyword">true</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//如果配置了@Lazy注解，则设置该Bean为非延迟初始化，如果没有配置，</span></span><br><span class="line">         <span class="comment">//则该Bean为预实例化</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (Lazy<span class="class">.<span class="keyword">class</span> </span>== qualifier) &#123;</span><br><span class="line">            abd.setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//如果使用了除@Primary和@Lazy以外的其他注解，则为该Bean添加一</span></span><br><span class="line">         <span class="comment">//个autowiring自动依赖注入装配限定符，该Bean在进autowiring</span></span><br><span class="line">         <span class="comment">//自动依赖注入装配时，根据名称装配限定符指定的Bean</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            abd.addQualifier(<span class="keyword">new</span> AutowireCandidateQualifier(qualifier));</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (BeanDefinitionCustomizer customizer : definitionCustomizers) &#123;</span><br><span class="line">      customizer.customize(abd);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建一个指定Bean名称的Bean定义对象，封装注解Bean定义类数据</span></span><br><span class="line">   BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(abd, beanName);</span><br><span class="line">   <span class="comment">//根据注解Bean定义类中配置的作用域，创建相应的代理对象</span></span><br><span class="line">   definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">   <span class="comment">//向IOC容器注册注解Bean类定义对象</span></span><br><span class="line">   BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的源码我们可以看出，注册注解 Bean 定义类的基本步骤: </p>
<ol>
<li><p>需要使用注解元数据解析器解析注解 Bean 中关于作用域的配置。</p>
</li>
<li><p>使用 AnnotationConfigUtils 的 processCommonDefinitionAnnotations()方法处理注解 Bean 定 义类中通用的注解。</p>
</li>
<li><p>使用 AnnotationConfigUtils 的 applyScopedProxyMode()方法创建对于作用域的代理对象。 d、通过 BeanDefinitionReaderUtils 向容器注册 Bean。</p>
</li>
</ol>
<p>下面我们继续分析这 4 步的具体实现过程</p>
<p><strong>2)、AnnotationScopeMetadataResolver 解析作用域元数据</strong></p>
<p>AnnotationScopeMetadataResolver 通过 resolveScopeMetadata()方法解析注解 Bean 定义类的作 用域元信息，即判断注册的 Bean 是原生类型(prototype)还是单态(singleton)类型，其源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析注解Bean定义类中的作用域元信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ScopeMetadata <span class="title">resolveScopeMetadata</span><span class="params">(BeanDefinition definition)</span> </span>&#123;</span><br><span class="line">   ScopeMetadata metadata = <span class="keyword">new</span> ScopeMetadata();</span><br><span class="line">   <span class="keyword">if</span> (definition <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">      AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition;</span><br><span class="line">      <span class="comment">//从注解Bean定义类的属性中查找属性为”Scope”的值，即@Scope注解的值</span></span><br><span class="line">      <span class="comment">//annDef.getMetadata().getAnnotationAttributes()方法将Bean</span></span><br><span class="line">      <span class="comment">//中所有的注解和注解的值存放在一个map集合中</span></span><br><span class="line">      AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(</span><br><span class="line">            annDef.getMetadata(), <span class="keyword">this</span>.scopeAnnotationType);</span><br><span class="line">      <span class="comment">//将获取到的@Scope注解的值设置到要返回的对象中</span></span><br><span class="line">      <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">         metadata.setScopeName(attributes.getString(<span class="string">"value"</span>));</span><br><span class="line">         <span class="comment">//获取@Scope注解中的proxyMode属性值，在创建代理对象时会用到</span></span><br><span class="line">         ScopedProxyMode proxyMode = attributes.getEnum(<span class="string">"proxyMode"</span>);</span><br><span class="line">         <span class="comment">//如果@Scope的proxyMode属性为DEFAULT或者NO</span></span><br><span class="line">         <span class="keyword">if</span> (proxyMode == ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">            <span class="comment">//设置proxyMode为NO</span></span><br><span class="line">            proxyMode = <span class="keyword">this</span>.defaultProxyMode;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//为返回的元数据设置proxyMode</span></span><br><span class="line">         metadata.setScopedProxyMode(proxyMode);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//返回解析的作用域元信息对象</span></span><br><span class="line">   <span class="keyword">return</span> metadata;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中的 annDef.getMetadata().getAnnotationAttributes()方法就是获取对象中指定类型的注 解的值。</p>
<p> <strong>3)、AnnotationConfigUtils 处理注解 Bean 定义类中的通用注解</strong></p>
<p> AnnotationConfigUtils 类的 processCommonDefinitionAnnotations()在向容器注册 Bean 之前，首 先对注解 Bean 定义类中的通用 Spring 注解进行处理，源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processCommonDefinitionAnnotations</span><span class="params">(AnnotatedBeanDefinition abd)</span> </span>&#123;</span><br><span class="line">   processCommonDefinitionAnnotations(abd, abd.getMetadata());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理Bean定义中通用注解</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processCommonDefinitionAnnotations</span><span class="params">(AnnotatedBeanDefinition abd, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">   AnnotationAttributes lazy = attributesFor(metadata, Lazy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="comment">//如果Bean定义中有@Lazy注解，则将该Bean预实例化属性设置为@lazy注解的值</span></span><br><span class="line">   <span class="keyword">if</span> (lazy != <span class="keyword">null</span>) &#123;</span><br><span class="line">      abd.setLazyInit(lazy.getBoolean(<span class="string">"value"</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (abd.getMetadata() != metadata) &#123;</span><br><span class="line">      lazy = attributesFor(abd.getMetadata(), Lazy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span> (lazy != <span class="keyword">null</span>) &#123;</span><br><span class="line">         abd.setLazyInit(lazy.getBoolean(<span class="string">"value"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果Bean定义中有@Primary注解，则为该Bean设置为autowiring自动依赖注入装配的首选对象</span></span><br><span class="line">   <span class="keyword">if</span> (metadata.isAnnotated(Primary<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">      abd.setPrimary(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果Bean定义中有@ DependsOn注解，则为该Bean设置所依赖的Bean名称，</span></span><br><span class="line">   <span class="comment">//容器将确保在实例化该Bean之前首先实例化所依赖的Bean</span></span><br><span class="line">   AnnotationAttributes dependsOn = attributesFor(metadata, DependsOn<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">      abd.setDependsOn(dependsOn.getStringArray(<span class="string">"value"</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (abd <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">      AbstractBeanDefinition absBd = (AbstractBeanDefinition) abd;</span><br><span class="line">      AnnotationAttributes role = attributesFor(metadata, Role<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span> (role != <span class="keyword">null</span>) &#123;</span><br><span class="line">         absBd.setRole(role.getNumber(<span class="string">"value"</span>).intValue());</span><br><span class="line">      &#125;</span><br><span class="line">      AnnotationAttributes description = attributesFor(metadata, Description<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">if</span> (description != <span class="keyword">null</span>) &#123;</span><br><span class="line">         absBd.setDescription(description.getString(<span class="string">"value"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据作用域为Bean应用引用的代码模式</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> BeanDefinitionHolder <span class="title">applyScopedProxyMode</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ScopeMetadata metadata, BeanDefinitionHolder definition, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取注解Bean定义类中@Scope注解的proxyMode属性值</span></span><br><span class="line">   ScopedProxyMode scopedProxyMode = metadata.getScopedProxyMode();</span><br><span class="line">   <span class="comment">//如果配置的@Scope注解的proxyMode属性值为NO，则不应用代理模式</span></span><br><span class="line">   <span class="keyword">if</span> (scopedProxyMode.equals(ScopedProxyMode.NO)) &#123;</span><br><span class="line">      <span class="keyword">return</span> definition;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取配置的@Scope注解的proxyMode属性值，如果为TARGET_CLASS</span></span><br><span class="line">   <span class="comment">//则返回true，如果为INTERFACES，则返回false</span></span><br><span class="line">   <span class="keyword">boolean</span> proxyTargetClass = scopedProxyMode.equals(ScopedProxyMode.TARGET_CLASS);</span><br><span class="line">   <span class="comment">//为注册的Bean创建相应模式的代理对象</span></span><br><span class="line">   <span class="keyword">return</span> ScopedProxyCreator.createScopedProxy(definition, registry, proxyTargetClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段为 Bean 引用创建相应模式的代理，这里不做深入的分析。</p>
<p><strong>5)、BeanDefinitionReaderUtils 向容器注册 Bean</strong></p>
<p>BeanDefinitionReaderUtils 主要是校验 BeanDefinition 信息，然后将 Bean 添加到容器中一个管理BeanDefinition 的 HashMap 中。</p>
<h3 id="扫描指定包并解析为-BeanDefinition"><a href="#扫描指定包并解析为-BeanDefinition" class="headerlink" title="扫描指定包并解析为 BeanDefinition"></a><strong>扫描指定包并解析为 BeanDefinition</strong></h3><p>当创建注解处理容器时，如果传入的初始参数是注解 Bean 定义类所在的包时，注解容器将扫描给定的 包及其子包，将扫描到的注解 Bean 定义载入并注册。</p>
<p><strong>1)、ClassPathBeanDefinitionScanner 扫描给定的包及其子包</strong></p>
<p>AnnotationConfigApplicationContext 通 过 调 用 类 路 径 Bean 定 义 扫 描 器 ClassPathBeanDefinitionScanner 扫描给定包及其子包下的所有类，主要源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathBeanDefinitionScanner</span> <span class="keyword">extends</span> <span class="title">ClassPathScanningCandidateComponentProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> BeanDefinitionRegistry registry;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> BeanDefinitionDefaults beanDefinitionDefaults = <span class="keyword">new</span> BeanDefinitionDefaults();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> String[] autowireCandidatePatterns;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> BeanNameGenerator beanNameGenerator = <span class="keyword">new</span> AnnotationBeanNameGenerator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> ScopeMetadataResolver scopeMetadataResolver = <span class="keyword">new</span> AnnotationScopeMetadataResolver();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> includeAnnotationConfig = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new &#123;<span class="doctag">@code</span> ClassPathBeanDefinitionScanner&#125; for the given bean factory.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry the &#123;<span class="doctag">@code</span> BeanFactory&#125; to load bean definitions into, in the form</span></span><br><span class="line"><span class="comment">    * of a &#123;<span class="doctag">@code</span> BeanDefinitionRegistry&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//创建一个类路径Bean定义扫描器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(registry, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new &#123;<span class="doctag">@code</span> ClassPathBeanDefinitionScanner&#125; for the given bean factory.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If the passed-in bean factory does not only implement the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> BeanDefinitionRegistry&#125; interface but also the &#123;<span class="doctag">@code</span> ResourceLoader&#125;</span></span><br><span class="line"><span class="comment">    * interface, it will be used as default &#123;<span class="doctag">@code</span> ResourceLoader&#125; as well. This will</span></span><br><span class="line"><span class="comment">    * usually be the case for &#123;<span class="doctag">@link</span> org.springframework.context.ApplicationContext&#125;</span></span><br><span class="line"><span class="comment">    * implementations.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If given a plain &#123;<span class="doctag">@code</span> BeanDefinitionRegistry&#125;, the default &#123;<span class="doctag">@code</span> ResourceLoader&#125;</span></span><br><span class="line"><span class="comment">    * will be a &#123;<span class="doctag">@link</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver&#125;.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If the passed-in bean factory also implements &#123;<span class="doctag">@link</span> EnvironmentCapable&#125; its</span></span><br><span class="line"><span class="comment">    * environment will be used by this reader.  Otherwise, the reader will initialize and</span></span><br><span class="line"><span class="comment">    * use a &#123;<span class="doctag">@link</span> org.springframework.core.env.StandardEnvironment&#125;. All</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> ApplicationContext&#125; implementations are &#123;<span class="doctag">@code</span> EnvironmentCapable&#125;, while</span></span><br><span class="line"><span class="comment">    * normal &#123;<span class="doctag">@code</span> BeanFactory&#125; implementations are not.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry the &#123;<span class="doctag">@code</span> BeanFactory&#125; to load bean definitions into, in the form</span></span><br><span class="line"><span class="comment">    * of a &#123;<span class="doctag">@code</span> BeanDefinitionRegistry&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> useDefaultFilters whether to include the default filters for the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Repository <span class="doctag">@Repository</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Service <span class="doctag">@Service</span>&#125;, and</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Controller <span class="doctag">@Controller</span>&#125; stereotype annotations</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setResourceLoader</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setEnvironment</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//为容器创建一个类路径Bean定义扫描器，并指定是否使用默认的扫描过滤规则。</span></span><br><span class="line">   <span class="comment">//即Spring默认扫描配置：@Component、@Repository、@Service、@Controller</span></span><br><span class="line">   <span class="comment">//注解的Bean，同时也支持JavaEE6的@ManagedBean和JSR-330的@Named注解</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry, <span class="keyword">boolean</span> useDefaultFilters)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(registry, useDefaultFilters, getOrCreateEnvironment(registry));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new &#123;<span class="doctag">@code</span> ClassPathBeanDefinitionScanner&#125; for the given bean factory and</span></span><br><span class="line"><span class="comment">    * using the given &#123;<span class="doctag">@link</span> Environment&#125; when evaluating bean definition profile metadata.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If the passed-in bean factory does not only implement the &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">    * BeanDefinitionRegistry&#125; interface but also the &#123;<span class="doctag">@link</span> ResourceLoader&#125; interface, it</span></span><br><span class="line"><span class="comment">    * will be used as default &#123;<span class="doctag">@code</span> ResourceLoader&#125; as well. This will usually be the</span></span><br><span class="line"><span class="comment">    * case for &#123;<span class="doctag">@link</span> org.springframework.context.ApplicationContext&#125; implementations.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;If given a plain &#123;<span class="doctag">@code</span> BeanDefinitionRegistry&#125;, the default &#123;<span class="doctag">@code</span> ResourceLoader&#125;</span></span><br><span class="line"><span class="comment">    * will be a &#123;<span class="doctag">@link</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry the &#123;<span class="doctag">@code</span> BeanFactory&#125; to load bean definitions into, in the form</span></span><br><span class="line"><span class="comment">    * of a &#123;<span class="doctag">@code</span> BeanDefinitionRegistry&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> useDefaultFilters whether to include the default filters for the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Repository <span class="doctag">@Repository</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Service <span class="doctag">@Service</span>&#125;, and</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Controller <span class="doctag">@Controller</span>&#125; stereotype annotations</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> environment the Spring &#123;<span class="doctag">@link</span> Environment&#125; to use when evaluating bean</span></span><br><span class="line"><span class="comment">    * definition profile metadata</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 3.1</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setResourceLoader</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry, <span class="keyword">boolean</span> useDefaultFilters,</span></span></span><br><span class="line"><span class="function"><span class="params">         Environment environment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>(registry, useDefaultFilters, environment,</span><br><span class="line">            (registry <span class="keyword">instanceof</span> ResourceLoader ? (ResourceLoader) registry : <span class="keyword">null</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a new &#123;<span class="doctag">@code</span> ClassPathBeanDefinitionScanner&#125; for the given bean factory and</span></span><br><span class="line"><span class="comment">    * using the given &#123;<span class="doctag">@link</span> Environment&#125; when evaluating bean definition profile metadata.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry the &#123;<span class="doctag">@code</span> BeanFactory&#125; to load bean definitions into, in the form</span></span><br><span class="line"><span class="comment">    * of a &#123;<span class="doctag">@code</span> BeanDefinitionRegistry&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> useDefaultFilters whether to include the default filters for the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Component <span class="doctag">@Component</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Repository <span class="doctag">@Repository</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Service <span class="doctag">@Service</span>&#125;, and</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> org.springframework.stereotype.Controller <span class="doctag">@Controller</span>&#125; stereotype annotations</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> environment the Spring &#123;<span class="doctag">@link</span> Environment&#125; to use when evaluating bean</span></span><br><span class="line"><span class="comment">    * definition profile metadata</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> resourceLoader the &#123;<span class="doctag">@link</span> ResourceLoader&#125; to use</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 4.3.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ClassPathBeanDefinitionScanner</span><span class="params">(BeanDefinitionRegistry registry, <span class="keyword">boolean</span> useDefaultFilters,</span></span></span><br><span class="line"><span class="function"><span class="params">         Environment environment, @Nullable ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">      <span class="comment">//为容器设置加载Bean定义的注册器</span></span><br><span class="line">      <span class="keyword">this</span>.registry = registry;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">         registerDefaultFilters();</span><br><span class="line">      &#125;</span><br><span class="line">      setEnvironment(environment);</span><br><span class="line">      <span class="comment">//为容器设置资源加载器</span></span><br><span class="line">      setResourceLoader(resourceLoader);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the BeanDefinitionRegistry that this scanner operates on.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.registry;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the defaults to use for detected beans.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> BeanDefinitionDefaults</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanDefinitionDefaults</span><span class="params">(@Nullable BeanDefinitionDefaults beanDefinitionDefaults)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.beanDefinitionDefaults =</span><br><span class="line">            (beanDefinitionDefaults != <span class="keyword">null</span> ? beanDefinitionDefaults : <span class="keyword">new</span> BeanDefinitionDefaults());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the defaults to use for detected beans (never &#123;<span class="doctag">@code</span> null&#125;).</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 4.1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> BeanDefinitionDefaults <span class="title">getBeanDefinitionDefaults</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.beanDefinitionDefaults;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the name-matching patterns for determining autowire candidates.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> autowireCandidatePatterns the patterns to match against</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAutowireCandidatePatterns</span><span class="params">(@Nullable String... autowireCandidatePatterns)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.autowireCandidatePatterns = autowireCandidatePatterns;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the BeanNameGenerator to use for detected bean classes.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Default is a &#123;<span class="doctag">@link</span> AnnotationBeanNameGenerator&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanNameGenerator</span><span class="params">(@Nullable BeanNameGenerator beanNameGenerator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.beanNameGenerator = (beanNameGenerator != <span class="keyword">null</span> ? beanNameGenerator : <span class="keyword">new</span> AnnotationBeanNameGenerator());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the ScopeMetadataResolver to use for detected bean classes.</span></span><br><span class="line"><span class="comment">    * Note that this will override any custom "scopedProxyMode" setting.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The default is an &#123;<span class="doctag">@link</span> AnnotationScopeMetadataResolver&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setScopedProxyMode</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScopeMetadataResolver</span><span class="params">(@Nullable ScopeMetadataResolver scopeMetadataResolver)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.scopeMetadataResolver =</span><br><span class="line">            (scopeMetadataResolver != <span class="keyword">null</span> ? scopeMetadataResolver : <span class="keyword">new</span> AnnotationScopeMetadataResolver());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Specify the proxy behavior for non-singleton scoped beans.</span></span><br><span class="line"><span class="comment">    * Note that this will override any custom "scopeMetadataResolver" setting.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The default is &#123;<span class="doctag">@link</span> ScopedProxyMode#NO&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #setScopeMetadataResolver</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScopedProxyMode</span><span class="params">(ScopedProxyMode scopedProxyMode)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.scopeMetadataResolver = <span class="keyword">new</span> AnnotationScopeMetadataResolver(scopedProxyMode);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Specify whether to register annotation config post-processors.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The default is to register the post-processors. Turn this off</span></span><br><span class="line"><span class="comment">    * to be able to ignore the annotations or to process them differently.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIncludeAnnotationConfig</span><span class="params">(<span class="keyword">boolean</span> includeAnnotationConfig)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.includeAnnotationConfig = includeAnnotationConfig;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Perform a scan within the specified base packages.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> basePackages the packages to check for annotated classes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> number of beans registered</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//调用类路径Bean定义扫描器入口方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">scan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取容器中已经注册的Bean个数</span></span><br><span class="line">      <span class="keyword">int</span> beanCountAtScanStart = <span class="keyword">this</span>.registry.getBeanDefinitionCount();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//启动扫描器扫描给定包</span></span><br><span class="line">      doScan(basePackages);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Register annotation config processors, if necessary.</span></span><br><span class="line">      <span class="comment">//注册注解配置(Annotation config)处理器</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.includeAnnotationConfig) &#123;</span><br><span class="line">         AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="keyword">this</span>.registry);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//返回注册的Bean个数</span></span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">this</span>.registry.getBeanDefinitionCount() - beanCountAtScanStart);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Perform a scan within the specified base packages,</span></span><br><span class="line"><span class="comment">    * returning the registered bean definitions.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;This method does \&lt;i\&gt;not\&lt;/i\&gt; register an annotation config processor</span></span><br><span class="line"><span class="comment">    * but rather leaves this up to the caller.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> basePackages the packages to check for annotated classes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> set of beans registered if any for tooling registration purposes (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//类路径Bean定义扫描器扫描给定包及其子包</span></span><br><span class="line">   <span class="keyword">protected</span> Set\&lt;BeanDefinitionHolder\&gt; doScan(String... basePackages) &#123;</span><br><span class="line">      Assert.notEmpty(basePackages, <span class="string">"At least one base package must be specified"</span>);</span><br><span class="line">      <span class="comment">//创建一个集合，存放扫描到Bean定义的封装类</span></span><br><span class="line">      Set\&lt;BeanDefinitionHolder\&gt; beanDefinitions = <span class="keyword">new</span> LinkedHashSet\&lt;\&gt;();</span><br><span class="line">      <span class="comment">//遍历扫描所有给定的包</span></span><br><span class="line">      <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">         <span class="comment">//调用父类ClassPathScanningCandidateComponentProvider的方法</span></span><br><span class="line">         <span class="comment">//扫描给定类路径，获取符合条件的Bean定义</span></span><br><span class="line">         Set\&lt;BeanDefinition\&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">         <span class="comment">//遍历扫描到的Bean</span></span><br><span class="line">         <span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">            <span class="comment">//获取Bean定义类中@Scope注解的值，即获取Bean的作用域</span></span><br><span class="line">            ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">            <span class="comment">//为Bean设置注解配置的作用域</span></span><br><span class="line">            candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line">            <span class="comment">//为Bean生成名称</span></span><br><span class="line">            String beanName = <span class="keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="keyword">this</span>.registry);</span><br><span class="line">            <span class="comment">//如果扫描到的Bean不是Spring的注解Bean，则为Bean设置默认值，</span></span><br><span class="line">            <span class="comment">//设置Bean的自动依赖注入装配属性等</span></span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">               postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果扫描到的Bean是Spring的注解Bean，则处理其通用的Spring注解</span></span><br><span class="line">            <span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">               <span class="comment">//处理注解Bean中通用的注解，在分析注解Bean定义类读取器时已经分析过</span></span><br><span class="line">               AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据Bean名称检查指定的Bean是否需要在容器中注册，或者在容器中冲突</span></span><br><span class="line">            <span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">               BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">               <span class="comment">//根据注解中配置的作用域，为Bean应用相应的代理模式</span></span><br><span class="line">               definitionHolder =</span><br><span class="line">                     AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">               beanDefinitions.add(definitionHolder);</span><br><span class="line">               <span class="comment">//向容器注册扫描到的Bean</span></span><br><span class="line">               registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Apply further settings to the given bean definition,</span></span><br><span class="line"><span class="comment">    * beyond the contents retrieved from scanning the component class.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanDefinition the scanned bean definition</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanName the generated bean name for the given bean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinition</span><span class="params">(AbstractBeanDefinition beanDefinition, String beanName)</span> </span>&#123;</span><br><span class="line">      beanDefinition.applyDefaults(<span class="keyword">this</span>.beanDefinitionDefaults);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.autowireCandidatePatterns != <span class="keyword">null</span>) &#123;</span><br><span class="line">         beanDefinition.setAutowireCandidate(PatternMatchUtils.simpleMatch(<span class="keyword">this</span>.autowireCandidatePatterns, beanName));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Register the specified bean with the given registry.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Can be overridden in subclasses, e.g. to adapt the registration</span></span><br><span class="line"><span class="comment">    * process or to register further bean definitions for each scanned bean.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> definitionHolder the bean definition plus bean name for the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry the BeanDefinitionRegistry to register the bean with</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">      BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Check the given candidate's bean name, determining whether the corresponding</span></span><br><span class="line"><span class="comment">    * bean definition needs to be registered or conflicts with an existing definition.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanName the suggested name for the bean</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanDefinition the corresponding bean definition</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the bean can be registered as-is;</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> false&#125; if it should be skipped because there is an</span></span><br><span class="line"><span class="comment">    * existing, compatible bean definition for the specified name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ConflictingBeanDefinitionException if an existing, incompatible</span></span><br><span class="line"><span class="comment">    * bean definition has been found for the specified name</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">checkCandidate</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      BeanDefinition existingDef = <span class="keyword">this</span>.registry.getBeanDefinition(beanName);</span><br><span class="line">      BeanDefinition originatingDef = existingDef.getOriginatingBeanDefinition();</span><br><span class="line">      <span class="keyword">if</span> (originatingDef != <span class="keyword">null</span>) &#123;</span><br><span class="line">         existingDef = originatingDef;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (isCompatible(beanDefinition, existingDef)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ConflictingBeanDefinitionException(<span class="string">"Annotation-specified bean name '"</span> + beanName +</span><br><span class="line">            <span class="string">"' for bean class ["</span> + beanDefinition.getBeanClassName() + <span class="string">"] conflicts with existing, "</span> +</span><br><span class="line">            <span class="string">"non-compatible bean definition of same name and class ["</span> + existingDef.getBeanClassName() + <span class="string">"]"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Determine whether the given new bean definition is compatible with</span></span><br><span class="line"><span class="comment">    * the given existing bean definition.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The default implementation considers them as compatible when the existing</span></span><br><span class="line"><span class="comment">    * bean definition comes from the same source or from a non-scanning source.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> newDefinition the new bean definition, originated from scanning</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> existingDefinition the existing bean definition, potentially an</span></span><br><span class="line"><span class="comment">    * explicitly defined one or a previously generated one from scanning</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether the definitions are considered as compatible, with the</span></span><br><span class="line"><span class="comment">    * new definition to be skipped in favor of the existing definition</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isCompatible</span><span class="params">(BeanDefinition newDefinition, BeanDefinition existingDefinition)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (!(existingDefinition <span class="keyword">instanceof</span> ScannedGenericBeanDefinition) ||  <span class="comment">// explicitly registered overriding bean</span></span><br><span class="line">            (newDefinition.getSource() != <span class="keyword">null</span> &amp;&amp; newDefinition.getSource().equals(existingDefinition.getSource())) ||  <span class="comment">// scanned same file twice</span></span><br><span class="line">            newDefinition.equals(existingDefinition));  <span class="comment">// scanned equivalent class twice</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Get the Environment from the given registry if possible, otherwise return a new</span></span><br><span class="line"><span class="comment">    * StandardEnvironment.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Environment <span class="title">getOrCreateEnvironment</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">      Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">      <span class="keyword">if</span> (registry <span class="keyword">instanceof</span> EnvironmentCapable) &#123;</span><br><span class="line">         <span class="keyword">return</span> ((EnvironmentCapable) registry).getEnvironment();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类路径 Bean 定义扫描器 ClassPathBeanDefinitionScanner 主要通过 findCandidateComponents() 方法调用其父类 ClassPathScanningCandidateComponentProvider 类来扫描获取给定包及其子包下 的类。</p>
<p><strong>2)、ClassPathScanningCandidateComponentProvider 扫描给定包及其子包的类</strong></p>
<p>ClassPathScanningCandidateComponentProvider 类的 findCandidateComponents()方法具体实 现扫描给定类路径包的功能，主要源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathScanningCandidateComponentProvider</span> <span class="keyword">implements</span> <span class="title">EnvironmentCapable</span>, <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_RESOURCE_PATTERN = <span class="string">"**/*.class"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String resourcePattern = DEFAULT_RESOURCE_PATTERN;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//保存过滤规则要包含的注解，即Spring默认的@Component、@Repository、@Service、</span></span><br><span class="line">   <span class="comment">//@Controller注解的Bean，以及JavaEE6的@ManagedBean和JSR-330的@Named注解</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List\&lt;TypeFilter\&gt; includeFilters = <span class="keyword">new</span> LinkedList\&lt;\&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//保存过滤规则要排除的注解</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> List\&lt;TypeFilter\&gt; excludeFilters = <span class="keyword">new</span> LinkedList\&lt;\&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> ConditionEvaluator conditionEvaluator;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> ResourcePatternResolver resourcePatternResolver;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> MetadataReaderFactory metadataReaderFactory;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="keyword">private</span> CandidateComponentsIndex componentsIndex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Protected constructor for flexible subclass initialization.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 4.3.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">ClassPathScanningCandidateComponentProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a ClassPathScanningCandidateComponentProvider with a &#123;<span class="doctag">@link</span> StandardEnvironment&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> useDefaultFilters whether to register the default filters for the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;, &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Service <span class="doctag">@Service</span>&#125;, and &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125;</span></span><br><span class="line"><span class="comment">    * stereotype annotations</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #registerDefaultFilters()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//构造方法，该方法在子类ClassPathBeanDefinitionScanner的构造方法中被调用</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ClassPathScanningCandidateComponentProvider</span><span class="params">(<span class="keyword">boolean</span> useDefaultFilters)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(useDefaultFilters, <span class="keyword">new</span> StandardEnvironment());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Create a ClassPathScanningCandidateComponentProvider with the given &#123;<span class="doctag">@link</span> Environment&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> useDefaultFilters whether to register the default filters for the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;, &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Service <span class="doctag">@Service</span>&#125;, and &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125;</span></span><br><span class="line"><span class="comment">    * stereotype annotations</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> environment the Environment to use</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #registerDefaultFilters()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ClassPathScanningCandidateComponentProvider</span><span class="params">(<span class="keyword">boolean</span> useDefaultFilters, Environment environment)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//如果使用Spring默认的过滤规则，则向容器注册过滤规则</span></span><br><span class="line">      <span class="keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">         registerDefaultFilters();</span><br><span class="line">      &#125;</span><br><span class="line">      setEnvironment(environment);</span><br><span class="line">      setResourceLoader(<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the resource pattern to use when scanning the classpath.</span></span><br><span class="line"><span class="comment">    * This value will be appended to each base package name.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #findCandidateComponents(String)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #DEFAULT_RESOURCE_PATTERN</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourcePattern</span><span class="params">(String resourcePattern)</span> </span>&#123;</span><br><span class="line">      Assert.notNull(resourcePattern, <span class="string">"'resourcePattern' must not be null"</span>);</span><br><span class="line">      <span class="keyword">this</span>.resourcePattern = resourcePattern;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Add an include type filter to the \&lt;i\&gt;end\&lt;/i\&gt; of the inclusion list.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addIncludeFilter</span><span class="params">(TypeFilter includeFilter)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.includeFilters.add(includeFilter);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Add an exclude type filter to the \&lt;i\&gt;front\&lt;/i\&gt; of the exclusion list.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addExcludeFilter</span><span class="params">(TypeFilter excludeFilter)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.excludeFilters.add(<span class="number">0</span>, excludeFilter);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Reset the configured type filters.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> useDefaultFilters whether to re-register the default filters for</span></span><br><span class="line"><span class="comment">    * the &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;, &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125;,</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Service <span class="doctag">@Service</span>&#125;, and &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125;</span></span><br><span class="line"><span class="comment">    * stereotype annotations</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #registerDefaultFilters()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetFilters</span><span class="params">(<span class="keyword">boolean</span> useDefaultFilters)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.includeFilters.clear();</span><br><span class="line">      <span class="keyword">this</span>.excludeFilters.clear();</span><br><span class="line">      <span class="keyword">if</span> (useDefaultFilters) &#123;</span><br><span class="line">         registerDefaultFilters();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Register the default filter for &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125;.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;This will implicitly register all annotations that have the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Component <span class="doctag">@Component</span>&#125; meta-annotation including the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Repository <span class="doctag">@Repository</span>&#125;, &#123;<span class="doctag">@link</span> Service <span class="doctag">@Service</span>&#125;, and</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Controller <span class="doctag">@Controller</span>&#125; stereotype annotations.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Also supports Java EE 6's &#123;<span class="doctag">@link</span> javax.annotation.ManagedBean&#125; and</span></span><br><span class="line"><span class="comment">    * JSR-330's &#123;<span class="doctag">@link</span> javax.inject.Named&#125; annotations, if available.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//向容器注册过滤规则</span></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDefaultFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//向要包含的过滤规则中添加@Component注解类，注意Spring中@Repository</span></span><br><span class="line">      <span class="comment">//@Service和@Controller都是Component，因为这些注解都添加了@Component注解</span></span><br><span class="line">      <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(Component<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">      <span class="comment">//获取当前类的类加载器</span></span><br><span class="line">      ClassLoader cl = ClassPathScanningCandidateComponentProvider<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//向要包含的过滤规则添加JavaEE6的@ManagedBean注解</span></span><br><span class="line">         <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(</span><br><span class="line">               ((Class\&lt;? extends Annotation\&gt;) ClassUtils.forName(<span class="string">"javax.annotation.ManagedBean"</span>, cl)), <span class="keyword">false</span>));</span><br><span class="line">         logger.debug(<span class="string">"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">         <span class="comment">// JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//向要包含的过滤规则添加@Named注解</span></span><br><span class="line">         <span class="keyword">this</span>.includeFilters.add(<span class="keyword">new</span> AnnotationTypeFilter(</span><br><span class="line">               ((Class\&lt;? extends Annotation\&gt;) ClassUtils.forName(<span class="string">"javax.inject.Named"</span>, cl)), <span class="keyword">false</span>));</span><br><span class="line">         logger.debug(<span class="string">"JSR-330 'javax.inject.Named' annotation found and supported for component scanning"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">         <span class="comment">// JSR-330 API not available - simply skip.</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the Environment to use when resolving placeholders and evaluating</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> Conditional <span class="doctag">@Conditional</span>&#125;-annotated component classes.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The default is a &#123;<span class="doctag">@link</span> StandardEnvironment&#125;.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> environment the Environment to use</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">      Assert.notNull(environment, <span class="string">"Environment must not be null"</span>);</span><br><span class="line">      <span class="keyword">this</span>.environment = environment;</span><br><span class="line">      <span class="keyword">this</span>.conditionEvaluator = <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Environment <span class="title">getEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.environment == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.environment = <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the &#123;<span class="doctag">@link</span> BeanDefinitionRegistry&#125; used by this scanner, if any.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> BeanDefinitionRegistry <span class="title">getRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the &#123;<span class="doctag">@link</span> ResourceLoader&#125; to use for resource locations.</span></span><br><span class="line"><span class="comment">    * This will typically be a &#123;<span class="doctag">@link</span> ResourcePatternResolver&#125; implementation.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Default is a &#123;<span class="doctag">@code</span> PathMatchingResourcePatternResolver&#125;, also capable of</span></span><br><span class="line"><span class="comment">    * resource pattern resolving through the &#123;<span class="doctag">@code</span> ResourcePatternResolver&#125; interface.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> org.springframework.core.io.support.ResourcePatternResolver</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(@Nullable ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);</span><br><span class="line">      <span class="keyword">this</span>.metadataReaderFactory = <span class="keyword">new</span> CachingMetadataReaderFactory(resourceLoader);</span><br><span class="line">      <span class="keyword">this</span>.componentsIndex = CandidateComponentsIndexLoader.loadIndex(<span class="keyword">this</span>.resourcePatternResolver.getClassLoader());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the ResourceLoader that this component provider uses.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ResourceLoader <span class="title">getResourceLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> getResourcePatternResolver();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> ResourcePatternResolver <span class="title">getResourcePatternResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.resourcePatternResolver == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.resourcePatternResolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.resourcePatternResolver;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Set the &#123;<span class="doctag">@link</span> MetadataReaderFactory&#125; to use.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Default is a &#123;<span class="doctag">@link</span> CachingMetadataReaderFactory&#125; for the specified</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@linkplain</span> #setResourceLoader resource loader&#125;.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Call this setter method \&lt;i\&gt;after\&lt;/i\&gt; &#123;<span class="doctag">@link</span> #setResourceLoader&#125; in order</span></span><br><span class="line"><span class="comment">    * for the given MetadataReaderFactory to override the default factory.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMetadataReaderFactory</span><span class="params">(MetadataReaderFactory metadataReaderFactory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.metadataReaderFactory = metadataReaderFactory;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Return the MetadataReaderFactory used by this component provider.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> MetadataReaderFactory <span class="title">getMetadataReaderFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.metadataReaderFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.metadataReaderFactory = <span class="keyword">new</span> CachingMetadataReaderFactory();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.metadataReaderFactory;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Scan the class path for candidate components.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> basePackage the package to check for annotated classes</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> a corresponding Set of autodetected bean definitions</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//扫描给定类路径的包</span></span><br><span class="line">   <span class="keyword">public</span> Set\&lt;BeanDefinition\&gt; findCandidateComponents(String basePackage) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.componentsIndex != <span class="keyword">null</span> &amp;&amp; indexSupportsIncludeFilters()) &#123;</span><br><span class="line">         <span class="keyword">return</span> addCandidateComponentsFromIndex(<span class="keyword">this</span>.componentsIndex, basePackage);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> scanCandidateComponents(basePackage);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Determine if the index can be used by this instance.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the index is available and the configuration of this</span></span><br><span class="line"><span class="comment">    * instance is supported by it, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">indexSupportsIncludeFilters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (TypeFilter includeFilter : <span class="keyword">this</span>.includeFilters) &#123;</span><br><span class="line">         <span class="keyword">if</span> (!indexSupportsIncludeFilter(includeFilter)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Determine if the specified include &#123;<span class="doctag">@link</span> TypeFilter&#125; is supported by the index.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> filter the filter to check</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether the index supports this include filter</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #extractStereotype(TypeFilter)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">indexSupportsIncludeFilter</span><span class="params">(TypeFilter filter)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> AnnotationTypeFilter) &#123;</span><br><span class="line">         Class\&lt;? extends Annotation\&gt; annotation = ((AnnotationTypeFilter) filter).getAnnotationType();</span><br><span class="line">         <span class="keyword">return</span> (AnnotationUtils.isAnnotationDeclaredLocally(Indexed<span class="class">.<span class="keyword">class</span>, <span class="title">annotation</span>) ||</span></span><br><span class="line">               annotation.getName().startsWith("javax."));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> AssignableTypeFilter) &#123;</span><br><span class="line">         Class\&lt;?\&gt; target = ((AssignableTypeFilter) filter).getTargetType();</span><br><span class="line">         <span class="keyword">return</span> AnnotationUtils.isAnnotationDeclaredLocally(Indexed<span class="class">.<span class="keyword">class</span>, <span class="title">target</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Extract the stereotype to use for the specified compatible filter.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> filter the filter to handle</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the stereotype in the index matching this filter</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 5.0</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #indexSupportsIncludeFilter(TypeFilter)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> String <span class="title">extractStereotype</span><span class="params">(TypeFilter filter)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> AnnotationTypeFilter) &#123;</span><br><span class="line">         <span class="keyword">return</span> ((AnnotationTypeFilter) filter).getAnnotationType().getName();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> AssignableTypeFilter) &#123;</span><br><span class="line">         <span class="keyword">return</span> ((AssignableTypeFilter) filter).getTargetType().getName();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Set\&lt;BeanDefinition\&gt; addCandidateComponentsFromIndex(CandidateComponentsIndex index, String basePackage) &#123;</span><br><span class="line">      <span class="comment">//创建存储扫描到的类的集合</span></span><br><span class="line">      Set\&lt;BeanDefinition\&gt; candidates = <span class="keyword">new</span> LinkedHashSet\&lt;\&gt;();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Set\&lt;String\&gt; types = <span class="keyword">new</span> HashSet\&lt;\&gt;();</span><br><span class="line">         <span class="keyword">for</span> (TypeFilter filter : <span class="keyword">this</span>.includeFilters) &#123;</span><br><span class="line">            String stereotype = extractStereotype(filter);</span><br><span class="line">            <span class="keyword">if</span> (stereotype == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Failed to extract stereotype from "</span>+ filter);</span><br><span class="line">            &#125;</span><br><span class="line">            types.addAll(index.getCandidateTypes(basePackage, stereotype));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">boolean</span> traceEnabled = logger.isTraceEnabled();</span><br><span class="line">         <span class="keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line">         <span class="keyword">for</span> (String type : types) &#123;</span><br><span class="line">            <span class="comment">//为指定资源获取元数据读取器，元信息读取器通过汇编(ASM)读//取资源元信息</span></span><br><span class="line">            MetadataReader metadataReader = getMetadataReaderFactory().getMetadataReader(type);</span><br><span class="line">            <span class="comment">//如果扫描到的类符合容器配置的过滤规则</span></span><br><span class="line">            <span class="keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">               <span class="comment">//通过汇编(ASM)读取资源字节码中的Bean定义元信息</span></span><br><span class="line">               AnnotatedGenericBeanDefinition sbd = <span class="keyword">new</span> AnnotatedGenericBeanDefinition(</span><br><span class="line">                     metadataReader.getAnnotationMetadata());</span><br><span class="line">               <span class="keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                     logger.debug(<span class="string">"Using candidate component class from index: "</span> + type);</span><br><span class="line">                  &#125;</span><br><span class="line">                  candidates.add(sbd);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                     logger.debug(<span class="string">"Ignored because not a concrete top-level class: "</span> + type);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                  logger.trace(<span class="string">"Ignored because matching an exclude filter: "</span> + type);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> candidates;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Set\&lt;BeanDefinition\&gt; scanCandidateComponents(String basePackage) &#123;</span><br><span class="line">      Set\&lt;BeanDefinition\&gt; candidates = <span class="keyword">new</span> LinkedHashSet\&lt;\&gt;();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX +</span><br><span class="line">               resolveBasePackage(basePackage) + <span class="string">'/'</span> + <span class="keyword">this</span>.resourcePattern;</span><br><span class="line">         Resource[] resources = getResourcePatternResolver().getResources(packageSearchPath);</span><br><span class="line">         <span class="keyword">boolean</span> traceEnabled = logger.isTraceEnabled();</span><br><span class="line">         <span class="keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line">         <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">            <span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">               logger.trace(<span class="string">"Scanning "</span> + resource);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resource.isReadable()) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  MetadataReader metadataReader = getMetadataReaderFactory().getMetadataReader(resource);</span><br><span class="line">                  <span class="keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line">                     ScannedGenericBeanDefinition sbd = <span class="keyword">new</span> ScannedGenericBeanDefinition(metadataReader);</span><br><span class="line">                     sbd.setResource(resource);</span><br><span class="line">                     sbd.setSource(resource);</span><br><span class="line">                     <span class="keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                           logger.debug(<span class="string">"Identified candidate component class: "</span> + resource);</span><br><span class="line">                        &#125;</span><br><span class="line">                        candidates.add(sbd);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">                           logger.debug(<span class="string">"Ignored because not a concrete top-level class: "</span> + resource);</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                        logger.trace(<span class="string">"Ignored because not matching any filter: "</span> + resource);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">                        <span class="string">"Failed to read candidate component class: "</span> + resource, ex);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">                  logger.trace(<span class="string">"Ignored because not readable: "</span> + resource);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> candidates;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Resolve the specified base package into a pattern specification for</span></span><br><span class="line"><span class="comment">    * the package search path.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The default implementation resolves placeholders against system properties,</span></span><br><span class="line"><span class="comment">    * and converts a "."-based package path to a "/"-based resource path.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> basePackage the base package as specified by the user</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the pattern specification to be used for package searching</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> String <span class="title">resolveBasePackage</span><span class="params">(String basePackage)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ClassUtils.convertClassNameToResourcePath(getEnvironment().resolveRequiredPlaceholders(basePackage));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Determine whether the given class does not match any exclude filter</span></span><br><span class="line"><span class="comment">    * and does match at least one include filter.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> metadataReader the ASM ClassReader for the class</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether the class qualifies as a candidate component</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//判断元信息读取器读取的类是否符合容器定义的注解过滤规则</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isCandidateComponent</span><span class="params">(MetadataReader metadataReader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">//如果读取的类的注解在排除注解过滤规则中，返回false</span></span><br><span class="line">      <span class="keyword">for</span> (TypeFilter tf : <span class="keyword">this</span>.excludeFilters) &#123;</span><br><span class="line">         <span class="keyword">if</span> (tf.match(metadataReader, getMetadataReaderFactory())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果读取的类的注解在包含的注解的过滤规则中，则返回ture</span></span><br><span class="line">      <span class="keyword">for</span> (TypeFilter tf : <span class="keyword">this</span>.includeFilters) &#123;</span><br><span class="line">         <span class="keyword">if</span> (tf.match(metadataReader, getMetadataReaderFactory())) &#123;</span><br><span class="line">            <span class="keyword">return</span> isConditionMatch(metadataReader);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果读取的类的注解既不在排除规则，也不在包含规则中，则返回false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Determine whether the given class is a candidate component based on any</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> <span class="doctag">@Conditional</span>&#125; annotations.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> metadataReader the ASM ClassReader for the class</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether the class qualifies as a candidate component</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isConditionMatch</span><span class="params">(MetadataReader metadataReader)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">this</span>.conditionEvaluator =</span><br><span class="line">               <span class="keyword">new</span> ConditionEvaluator(getRegistry(), <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourcePatternResolver);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> !<span class="keyword">this</span>.conditionEvaluator.shouldSkip(metadataReader.getAnnotationMetadata());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Determine whether the given bean definition qualifies as candidate.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;The default implementation checks whether the class is not an interface</span></span><br><span class="line"><span class="comment">    * and not dependent on an enclosing class.</span></span><br><span class="line"><span class="comment">    * \&lt;p\&gt;Can be overridden in subclasses.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> beanDefinition the bean definition to check</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> whether the bean definition qualifies as a candidate component</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isCandidateComponent</span><span class="params">(AnnotatedBeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class="line">      AnnotationMetadata metadata = beanDefinition.getMetadata();</span><br><span class="line">      <span class="keyword">return</span> (metadata.isIndependent() &amp;&amp; (metadata.isConcrete() ||</span><br><span class="line">            (metadata.isAbstract() &amp;&amp; metadata.hasAnnotatedMethods(Lookup<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))))</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Clear the local metadata cache, if any, removing all cached class metadata.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.metadataReaderFactory <span class="keyword">instanceof</span> CachingMetadataReaderFactory) &#123;</span><br><span class="line">         <span class="comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span></span><br><span class="line">         <span class="comment">// for a shared cache since it'll be cleared by the ApplicationContext.</span></span><br><span class="line">         ((CachingMetadataReaderFactory) <span class="keyword">this</span>.metadataReaderFactory).clearCache();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注册注解-BeanDefinition"><a href="#注册注解-BeanDefinition" class="headerlink" title="注册注解 BeanDefinition"></a>注册注解 BeanDefinition</h3><p>AnnotationConfigWebApplicationContext 是 AnnotationConfigApplicationContext 的 Web 版， 它们对于注解 Bean 的注册和扫描是基本相同的，但是 AnnotationConfigWebApplicationContext 对注解 Bean 定义的载入稍有不同，AnnotationConfigWebApplicationContext 注入注解 Bean 定义 源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//载入注解Bean定义资源</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//为容器设置注解Bean定义读取器</span></span><br><span class="line">   AnnotatedBeanDefinitionReader reader = getAnnotatedBeanDefinitionReader(beanFactory);</span><br><span class="line">   <span class="comment">//为容器设置类路径Bean定义扫描器</span></span><br><span class="line">   ClassPathBeanDefinitionScanner scanner = getClassPathBeanDefinitionScanner(beanFactory);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取容器的Bean名称生成器</span></span><br><span class="line">   BeanNameGenerator beanNameGenerator = getBeanNameGenerator();</span><br><span class="line">   <span class="comment">//为注解Bean定义读取器和类路径扫描器设置Bean名称生成器</span></span><br><span class="line">   <span class="keyword">if</span> (beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">      scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">      beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取容器的作用域元信息解析器</span></span><br><span class="line">   ScopeMetadataResolver scopeMetadataResolver = getScopeMetadataResolver();</span><br><span class="line">   <span class="comment">//为注解Bean定义读取器和类路径扫描器设置作用域元信息解析器</span></span><br><span class="line">   <span class="keyword">if</span> (scopeMetadataResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">      reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">      scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!<span class="keyword">this</span>.annotatedClasses.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">         logger.info(<span class="string">"Registering annotated classes: ["</span> +</span><br><span class="line">               StringUtils.collectionToCommaDelimitedString(<span class="keyword">this</span>.annotatedClasses) + <span class="string">"]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      reader.register(<span class="keyword">this</span>.annotatedClasses.toArray(<span class="keyword">new</span> Class\&lt;?\&gt;[<span class="keyword">this</span>.annotatedClasses.size()]));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!<span class="keyword">this</span>.basePackages.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">         logger.info(<span class="string">"Scanning base packages: ["</span> +</span><br><span class="line">               StringUtils.collectionToCommaDelimitedString(<span class="keyword">this</span>.basePackages) + <span class="string">"]"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      scanner.scan(<span class="keyword">this</span>.basePackages.toArray(<span class="keyword">new</span> String[<span class="keyword">this</span>.basePackages.size()]));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取容器定义的Bean定义资源路径</span></span><br><span class="line">   String[] configLocations = getConfigLocations();</span><br><span class="line">   <span class="comment">//如果定位的Bean定义资源路径不为空</span></span><br><span class="line">   <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (String configLocation : configLocations) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用当前容器的类加载器加载定位路径的字节码类文件</span></span><br><span class="line">            Class\&lt;?\&gt; clazz = ClassUtils.forName(configLocation, getClassLoader());</span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">               logger.info(<span class="string">"Successfully resolved class for ["</span> + configLocation + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.register(clazz);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"Could not load class for config location ["</span> + configLocation +</span><br><span class="line">                     <span class="string">"] - trying package scan. "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果容器类加载器加载定义路径的Bean定义资源失败</span></span><br><span class="line">            <span class="comment">//则启用容器类路径扫描器扫描给定路径包及其子包中的类</span></span><br><span class="line">            <span class="keyword">int</span> count = scanner.scan(configLocation);</span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">               <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                  logger.info(<span class="string">"No annotated classes found for specified class/package ["</span> + configLocation + <span class="string">"]"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                  logger.info(<span class="string">"Found "</span> + count + <span class="string">" annotated classes in package ["</span> + configLocation + <span class="string">"]"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是解析和注入注解配置资源的全过程分析。</p>
<h2 id="IOC-容器初始化小结"><a href="#IOC-容器初始化小结" class="headerlink" title="IOC 容器初始化小结"></a>IOC 容器初始化小结</h2><p>现在通过上面的代码，总结一下 IOC 容器初始化的基本步骤:<br> 1、初始化的入口在容器实现中的 refresh()调用来完成。<br> 2、对 Bean 定义载入 IOC 容器使用的方法是 loadBeanDefinition(),<br> 其中的大致过程如下:通过 ResourceLoader 来完成资源文件位置的定位，DefaultResourceLoader 是默认的实现，同时上下文本身就给出了 ResourceLoader 的实现，可以从类路径，文件系统,URL 等 方式来定为资源位置。如果是 XmlBeanFactory 作为 IOC 容器，那么需要为它指定 Bean 定义的资源， 也就是说 Bean 定义文件时通过抽象成 Resource 来被 IOC 容器处理的，容器通过 BeanDefinitionReader 来完成定义信息的解析和 Bean 信息的注册,往往使用的是XmlBeanDefinitionReader 来解析 Bean 的 XML 定义文件-实际的处理过程是委托给 BeanDefinitionParserDelegate 来完成的，从而得到 bean 的定义信息，这些信息在 Spring 中使用 BeanDefinition 对象来表示-这个名字可以让我们想到 loadBeanDefinition(),registerBeanDefinition() 这些相关方法。它们都是为处理 BeanDefinitin 服务的，容器解析得到 BeanDefinition 以后，需要把 它在 IOC 容器中注册，这由 IOC 实现 BeanDefinitionRegistry 接口来实现。注册过程就是在 IOC 容器 内部维护的一个 HashMap 来保存得到的 BeanDefinition 的过程。这个 HashMap 是 IOC 容器持有 Bean 信息的场所，以后对 Bean 的操作都是围绕这个 HashMap 来实现的。</p>
<p>然后我们就可以通过 BeanFactory 和 ApplicationContext 来享受到 Spring IOC 的服务了,在使用 IOC 容器的时候，我们注意到除了少量粘合代码，绝大多数以正确 IOC 风格编写的应用程序代码完全不用关 心如何到达工厂，因为容器将把这些对象与容器管理的其他对象钩在一起。基本的策略是把工厂放到已 知的地方，最好是放在对预期使用的上下文有意义的地方，以及代码将实际需要访问工厂的地方。Spring 本身提供了对声明式载入 web 应用程序用法的应用程序上下文,并将其存储在 ServletContext 中的框架 实现。</p>
<p>以下是容器初始化全过程的时序图:</p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg087c713vj31lv0u0mzd.jpg" alt="一步一步手绘Spring IOC运行时序图"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gg100kca1lj31di0u07wi.jpg" alt="基于XML的IOC容器初始化"></p>
]]></content>
      <categories>
        <category>spring源码解读</category>
      </categories>
      <tags>
        <tag>spring-ioc</tag>
      </tags>
  </entry>
</search>
